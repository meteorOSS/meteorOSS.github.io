<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>apache poi库解析报错;java.io.IOException: Your InputStream was neither an OLE2 stream, nor an OOXML str</title>
      <link href="/2025/06/20/Apache%20POI%E5%BA%93%E6%89%93%E5%8C%85%E4%B8%BAjar%E5%90%8E%E8%A7%A3%E6%9E%90%E6%8A%A5%E9%94%99/"/>
      <url>/2025/06/20/Apache%20POI%E5%BA%93%E6%89%93%E5%8C%85%E4%B8%BAjar%E5%90%8E%E8%A7%A3%E6%9E%90%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>最近业务需要解析excel,使用apache poi库<br>在vscode中一切顺利。打包为jar丢到生产环境时报错:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.io.IOException: Your InputStream was neither an OLE2 stream, nor an OOXML stream or you haven&#x27;t provide the poi-ooxml*.jar in the classpath/modulepath - FileMagic: OOXML, having providers: [org.apache.poi.hssf.usermodel.HSSFWorkbookFactory@405294c8]</span><br></pre></td></tr></table></figure><p>搜了一圈答案都和实际不符，最后在 <a href="https://stackoverflow.com/questions/67884617/apache-poi-excel-writer-works-in-ide-but-not-in-fat-jar-java-io-ioexception-yo">https://stackoverflow.com/questions/67884617/apache-poi-excel-writer-works-in-ide-but-not-in-fat-jar-java-io-ioexception-yo</a> 这个帖子下找到了答案</p><p>问题的根本是:</p><blockquote><p>Apache POI使用META-INF&#x2F;services目录下的文件来识别可用的服务提供者。</p><p>当使用Maven的maven-assembly-plugin打包成fat JAR时，来自poi和poi-ooxml的重名服务提供者文件没有被正确合并，导致在运行时只有一个提供者可用，无法正确处理Excel文件。</p></blockquote><p>什么是服务提供者呢？这是一种服务发现机制，即 <code>Java SPI (Service Provider Interface)</code> ，允许应用程序动态发现和加载服务实现。它基于以下约定：</p><ol><li><p>服务提供者在 META-INF&#x2F;services&#x2F; 目录下创建以服务接口全限定名命名的文件</p></li><li><p>文件内容是实现该接口的类的全限定名列表</p></li><li><p>ServiceLoader 类用于加载这些服务实现</p></li></ol><p>例如，如果有一个接口 com.example.MyService，其实现类是 com.example.impl.MyServiceImpl，则会有一个文件：</p><p>META-INF&#x2F;services&#x2F;com.example.MyService 内容为 com.example.impl.MyServiceImpl</p><p><strong>当使用 Maven 打包成 Fat JAR（包含所有依赖的单一 JAR 文件）时，会出现一个问题：</strong></p><p><strong>如果多个 JAR 包中都有同名的服务提供者配置文件（如 META-INF&#x2F;services&#x2F;com.example.MyService），在合并时这些文件会相互覆盖，导致只有一个文件被保留，其他的实现类信息丢失。</strong></p><p><strong>这正是 Apache POI 在打包成 JAR 后出现问题的原因。poi 和 poi-ooxml 模块都有自己的服务提供者配置文件，但在打包时这些文件没有被正确合并。</strong></p><p>知道问题之后解决起来就很简单了，我的方案是 将maven-assembly-plugin替换为maven-shade-plugin，并添加ServicesResourceTransformer合并服务提供者文件</p><p>修改前:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.0&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;archive&gt;</span><br><span class="line">            &lt;manifest&gt;</span><br><span class="line">                &lt;mainClass&gt;com.exceltool.Application&lt;/mainClass&gt;</span><br><span class="line">            &lt;/manifest&gt;</span><br><span class="line">        &lt;/archive&gt;</span><br><span class="line">        &lt;descriptorRefs&gt;</span><br><span class="line">            &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;</span><br><span class="line">        &lt;/descriptorRefs&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class="line">            &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;single&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>修改后:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.1&lt;/version&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;shade&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;transformers&gt;</span><br><span class="line">                    &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;</span><br><span class="line">                        &lt;mainClass&gt;com.exceltool.Application&lt;/mainClass&gt;</span><br><span class="line">                    &lt;/transformer&gt;</span><br><span class="line">                    &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.ServicesResourceTransformer&quot;/&gt;</span><br><span class="line">                &lt;/transformers&gt;</span><br><span class="line">                &lt;filters&gt;</span><br><span class="line">                    &lt;filter&gt;</span><br><span class="line">                        &lt;artifact&gt;*:*&lt;/artifact&gt;</span><br><span class="line">                        &lt;excludes&gt;</span><br><span class="line">                            &lt;exclude&gt;META-INF/*.SF&lt;/exclude&gt;</span><br><span class="line">                            &lt;exclude&gt;META-INF/*.DSA&lt;/exclude&gt;</span><br><span class="line">                            &lt;exclude&gt;META-INF/*.RSA&lt;/exclude&gt;</span><br><span class="line">                        &lt;/excludes&gt;</span><br><span class="line">                    &lt;/filter&gt;</span><br><span class="line">                &lt;/filters&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>关键的变化是添加了ServicesResourceTransformer，它能够正确合并来自不同JAR包中重名的服务提供者文件，而不是仅保留一个</p><p>问题解决</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我将博客迁移到了这里</title>
      <link href="/2025/06/20/hello-world/"/>
      <url>/2025/06/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>因为一些原因，我将博客迁移到了hexo。后面有空会将旧的内容慢慢搬过来</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>运行时动态载入依赖</title>
      <link href="/2023/12/05/%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8A%A8%E6%80%81%E8%BD%BD%E5%85%A5%E4%BE%9D%E8%B5%96/"/>
      <url>/2023/12/05/%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8A%A8%E6%80%81%E8%BD%BD%E5%85%A5%E4%BE%9D%E8%B5%96/</url>
      
        <content type="html"><![CDATA[<p>在写插件的时候不可避免的需要调用一些外部库，我们需要把依赖打包到jar中，当使用的依赖过多时体积将非常臃肿。通过 <a href="https://www.spigotmc.org/threads/loading-dependencies-from-external-sources-in-spigot.491014/">Loading Dependencies from External Sources in Spigot</a>这篇文章和阅读luckperms的解决方法，花了半个通宵捣鼓出了一种可行的方案</p><p>最初的解决方案是通过<code>ClassLoader</code>的addURL动态的加载依赖，但就像上面那篇文章说的，java16以上的反射不允许这样的操作;最后我找到了这个仓库 <a href="https://github.com/Revxrsal/PluginLib/tree/master/src/main/java/pluginlib">https://github.com/Revxrsal/PluginLib/tree/master/src/main/java/pluginlib</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) f.get(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">ucpField</span> <span class="operator">=</span> URLClassLoader.class.getDeclaredField(<span class="string">&quot;ucp&quot;</span>);</span><br><span class="line">        ucp = unsafe.getObject(AifadianPay.class.getClassLoader(), unsafe.objectFieldOffset(ucpField));</span><br><span class="line">        <span class="type">Field</span> <span class="variable">lookupField</span> <span class="operator">=</span> MethodHandles.Lookup.class.getDeclaredField(<span class="string">&quot;IMPL_LOOKUP&quot;</span>);</span><br><span class="line">        MethodHandles.<span class="type">Lookup</span> <span class="variable">lookup</span> <span class="operator">=</span> (MethodHandles.Lookup) unsafe.getObject(unsafe.staticFieldBase(lookupField), unsafe.staticFieldOffset(lookupField));</span><br><span class="line">        addUrlHandle = lookup.findVirtual(ucp.getClass(), <span class="string">&quot;addURL&quot;</span>, MethodType.methodType(<span class="keyword">void</span>.class, URL.class));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它使用Unsafe绕过安全检查，像魔法一样的取得了 <code>addURL</code> 方法，经过测试，在jdk8到17的版本都运行良好。<br>这是一个最后更新于2020年的库，我去除了一些无用的功能(对我来说)，整理到了<a href="https://github.com/meteorOSS/SpigotDependencyManager">https://github.com/meteorOSS/SpigotDependencyManager</a></p><p>接下来，示范一下使用这个新工具来写代码<br>首先下载上方git仓库发布的jar包，新建一个maven项目，使用<br><code>mvn install:install-file -Dfile=src/lib/DependencyManager-1.0-SNAPSHOT.jar -DgroupId=com. meteor -DartifactId=dependency-manager -Dversion=1.0 -Dpackaging=jar</code><br>来导入到本地仓库，然后定义依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.meteor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dependency-manager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，想想往常要干什么，比方说我有一个要发起网络请求的功能，想使用Httpclient库来操作。那么，引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents.client5<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.httpcomponents.core5/httpcore5-h2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents.core5<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpcore5-h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来就是重头戏了，在<code>plugin.yml</code>中定义依赖</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">TestPlugin</span></span><br><span class="line"><span class="attr">main:</span> <span class="string">com.test.plugin.TestPluginMain</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">1.0</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">meteor</span></span><br><span class="line"><span class="attr">api-version:</span> <span class="number">1.13</span></span><br><span class="line"><span class="comment"># 所需依赖</span></span><br><span class="line"><span class="attr">lib:</span></span><br><span class="line">  <span class="attr">httpcore5:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://repo.maven.apache.org/maven2/&#x27;</span></span><br><span class="line">    <span class="attr">groupId:</span> <span class="string">&#x27;org.apache.httpcomponents.core5&#x27;</span></span><br><span class="line">    <span class="attr">artifactId:</span> <span class="string">&#x27;httpcore5&#x27;</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">&#x27;5.2.4&#x27;</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://repo.maven.apache.org/maven2/&#x27;</span></span><br><span class="line">    <span class="attr">groupId:</span> <span class="string">&#x27;org.apache.httpcomponents.client5&#x27;</span></span><br><span class="line">    <span class="attr">artifactId:</span> <span class="string">&#x27;httpclient5&#x27;</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">&#x27;5.2.3&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在主类中，只需要这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEnable</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 载入依赖</span></span><br><span class="line">       DependencyManager.loadDependency(<span class="built_in">this</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>最后别忘了把DependcyManager打包到你的jar中，这是唯一需要内置的依赖。我使用<code>maven-assembly-plugin</code><br>mvn clean package，在target中找到 xxx-jar-with-dependencies.jar，这就是打包的结果了!<br><img src="http://cdn.zsenhe.com/afcc6915bbdc4d1684dd9c029ab09bd9" alt="image.png"><br>运行,现在启动的时候如未存在依赖，会通过maven仓库下载到插件目录下的lib里并动态添加!<br>不过这种方式有没有其他隐患还待验证</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GoReplaceTool 指定目标目录批量替换工具</title>
      <link href="/2023/11/29/GoReplaceTool%20%E6%8C%87%E5%AE%9A%E7%9B%AE%E6%A0%87%E7%9B%AE%E5%BD%95%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2%E5%B7%A5%E5%85%B7/"/>
      <url>/2023/11/29/GoReplaceTool%20%E6%8C%87%E5%AE%9A%E7%9B%AE%E6%A0%87%E7%9B%AE%E5%BD%95%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.zsenhe.com/b09197b593314913af78bbfb46fc48c8" alt="logo2.png"></p><h1 id="GoReplaceTool"><a href="#GoReplaceTool" class="headerlink" title="GoReplaceTool"></a>GoReplaceTool</h1><p><a href="https://github.com/meteorOSS/GoReplaceTools">github地址</a></p><p>平时服务器更新的时候，写完的配置文件需要一个个拷贝到各个服务端。过程重复度高且容易出问题<br>于是这个工具就诞生了 (go写这些小脚本是真方便)</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式:"></a>使用方式:</h2><ol><li>在发布页根据服务器类型下载软件</li><li>启动软件</li><li>启动后会在当前目录下生成以下文件夹<br>config.xml: 存放待覆盖目标路径<br>commit: 存放覆盖文件<br><img src="https://github.com/meteorOSS/GoReplaceTools/assets/61687266/3a4f6085-1a5e-4240-a1fa-a2fbbea91a8b" alt="image"></li><li>一个示例<br>配置config.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  填写需要覆盖的目录  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  例如以下会把commit的内容覆盖到plugins下，没有的目录自动构建 --!&gt;</span></span><br><span class="line"><span class="comment">&lt;directory&gt;D:/server1/plugins&lt;/directory&gt;</span></span><br><span class="line"><span class="comment">&lt;directory&gt;D:/server2/plugins&lt;/directory&gt;</span></span><br><span class="line"><span class="comment">&lt;/config&gt;</span></span><br></pre></td></tr></table></figure>接下来，此次我将更新所有服务端CMI的配置文件. 在commit下新建文件夹，起一个名字，比如”CMI配置更新”<br><img src="https://github.com/meteorOSS/GoReplaceTools/assets/61687266/81cd21ef-436e-4d3c-8731-2de92aa54a9f" alt="image"><br>我们需要将setting.yml覆盖到目标路径的CMI文件夹下 (D:&#x2F;server1&#x2F;plugins&#x2F;CMI&#x2F;)。<br>由于在上方的软件config.xml配置中，目标文件夹(服务端)仅配置到了plugins文件夹，于是”CMI配置更新”文件夹下还需要新建一个”CMI”文件夹<br><img src="https://github.com/meteorOSS/GoReplaceTools/assets/61687266/2b5aeb38-979c-4889-8727-4a0cebea6b7f" alt="image"></li></ol><p>打开软件 输入 update CMI配置更新<br><img src="https://github.com/meteorOSS/GoReplaceTools/assets/61687266/ff755265-458a-4748-86b6-fb1f8cb5edac" alt="image"></p><h3 id="在linux平台使用"><a href="#在linux平台使用" class="headerlink" title="在linux平台使用"></a>在linux平台使用</h3><p>输入chmod +x GoReplaceTools添加可执行权限</p><p><img src="https://github.com/meteorOSS/GoReplaceTools/assets/61687266/1f977ba1-161c-4def-b027-858e9604ef7d" alt="image"></p><p>使用.&#x2F;GoReplaceTools，操作方式与上面一致</p><p>杀毒报告 <a href="https://www.virscan.org/report/637d5cbabb88960c519dce1bd5afc9f63952f0115d6954b22dfa115dc22d417b">https://www.virscan.org/report/637d5cbabb88960c519dce1bd5afc9f63952f0115d6954b22dfa115dc22d417b</a></p><p>很爽<br><img src="http://cdn.zsenhe.com/8e483000a4d34780b663aab839725cdb" alt="23NXC8BK1V446DJZB.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>XPath与MyBatis解析器模块XPathParser</title>
      <link href="/2023/10/26/XPath%E4%B8%8EMyBatis%E8%A7%A3%E6%9E%90%E5%99%A8%E6%A8%A1%E5%9D%97XPathParser/"/>
      <url>/2023/10/26/XPath%E4%B8%8EMyBatis%E8%A7%A3%E6%9E%90%E5%99%A8%E6%A8%A1%E5%9D%97XPathParser/</url>
      
        <content type="html"><![CDATA[<h2 id="XPath与XPathParse"><a href="#XPath与XPathParse" class="headerlink" title="XPath与XPathParse"></a>XPath与XPathParse</h2><h3 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h3><p>mybatis在初始化过程中处理MybatisConfig.xml以及映射文件时，使用的是DOM解析方式，并结合XPath(javax.xml.xpath包下)对配置文件进行解析，XPath对XML文件来说就相当于SQL语言之于数据库。</p><p>XPath使用路径表达式来选取XML文档中指定的节点或节点集合,对于XPath的语法需要简单了解一下</p><p><img src="http://cdn.zsenhe.com/811faf7e45064620ae943c9691e4af58" alt="image.png"></p><p>例如对于以下xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">&quot;1001&quot;</span> <span class="attr">year</span>=<span class="string">&quot;1955&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>神雕侠侣<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">author</span>&gt;</span>金庸<span class="tag">&lt;/<span class="name">author</span>&gt;</span><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">&quot;1002&quot;</span> <span class="attr">year</span>=<span class="string">&quot;1986&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>天龙八部<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">author</span>&gt;</span>金庸<span class="tag">&lt;/<span class="name">author</span>&gt;</span><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查找所有书籍的表达式是 “&#x2F;&#x2F;book”,查找作者为 ‘金庸’ 的所有图书需要制定<author>的值,得到表达式 “&#x2F;&#x2F;book[author&#x3D;’金庸’]”,再加一个筛选条件,我们需要得到 所有在1955年之后（不包括1995）发行的书,这就需要得到book的属性节点year。此时我们的表达式长这样:</p><blockquote><p>&#x2F;&#x2F;book[author&#x3D;’金庸’][@year&gt;1955]</p></blockquote><p>得到了所有符合条件的节点后,我们需要的是书的名字,于是定位到book节点下的 <name></name>,得到:</p><blockquote><p>&#x2F;&#x2F;book[author&#x3D;’金庸’][@year&gt;1955]&#x2F;name&#x2F;text()</p></blockquote><p>如上所述,text()用于匹配节点的文本，通过该表达式的筛选，我们得到了</p><p><img src="http://cdn.zsenhe.com/02688917d7cf4d7bb5cc2f163516b2ef" alt="image.png"></p><p>完整的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XPathTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DocumentBuilderFactory</span> <span class="variable">documentBuilderFactory</span> <span class="operator">=</span></span><br><span class="line">                DocumentBuilderFactory.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启验证</span></span><br><span class="line">        documentBuilderFactory.setValidating(<span class="literal">true</span>);</span><br><span class="line">        documentBuilderFactory.setNamespaceAware(<span class="literal">true</span>);</span><br><span class="line">        documentBuilderFactory.setIgnoringComments(<span class="literal">true</span>);</span><br><span class="line">        documentBuilderFactory.setIgnoringElementContentWhitespace(<span class="literal">false</span>);</span><br><span class="line">        documentBuilderFactory.setCoalescing(<span class="literal">false</span>);</span><br><span class="line">        documentBuilderFactory.setExpandEntityReferences(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DocumentBuilder</span> <span class="variable">documentBuilder</span> <span class="operator">=</span> documentBuilderFactory.newDocumentBuilder();</span><br><span class="line">            documentBuilder.setErrorHandler(<span class="keyword">new</span> <span class="title class_">ErrorHandler</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">warning</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;warning: &quot;</span>+exception.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">error</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;error: &quot;</span>+exception.getMessage());</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fatalError</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;fatal: &quot;</span>+exception.getMessage());</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> documentBuilder.parse(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;bookdata.xml&quot;</span>)));</span><br><span class="line">            <span class="type">XPathFactory</span> <span class="variable">xPathFactory</span> <span class="operator">=</span> XPathFactory.newInstance();</span><br><span class="line">            <span class="type">XPath</span> <span class="variable">xPath</span> <span class="operator">=</span> xPathFactory.newXPath();</span><br><span class="line">            <span class="comment">// 编译XPath表达式</span></span><br><span class="line">            <span class="type">XPathExpression</span> <span class="variable">expression</span> <span class="operator">=</span> xPath.compile(<span class="string">&quot;//book[author=&#x27;金庸&#x27;][@year&gt;1955]/name/text()&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">evaluate</span> <span class="operator">=</span> expression.evaluate(document, XPathConstants.NODESET);</span><br><span class="line">            <span class="type">NodeList</span> <span class="variable">nodeList</span> <span class="operator">=</span> (NodeList) evaluate;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nodeList.getLength(); i++) &#123;</span><br><span class="line">                System.out.println(nodeList.item(i).getNodeValue());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParserConfigurationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SAXException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (XPathExpressionException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这一行代码:</p><blockquote><p>Object evaluate &#x3D; expression.evaluate(document, XPathConstants.NODESET);</p></blockquote><p>evaluate的第二个参数接受一个枚举类型，他的意义是指定Xpath表达式查找的结果类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XPathConstants</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Private constructor to prevent instantiation.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">XPathConstants</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The XPath 1.0 number data type.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Maps to Java &#123;<span class="doctag">@link</span> Double&#125;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">QName</span> <span class="variable">NUMBER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QName</span>(<span class="string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span>, <span class="string">&quot;NUMBER&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The XPath 1.0 string data type.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Maps to Java &#123;<span class="doctag">@link</span> String&#125;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">QName</span> <span class="variable">STRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QName</span>(<span class="string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span>, <span class="string">&quot;STRING&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The XPath 1.0 boolean data type.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Maps to Java &#123;<span class="doctag">@link</span> Boolean&#125;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">QName</span> <span class="variable">BOOLEAN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QName</span>(<span class="string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span>, <span class="string">&quot;BOOLEAN&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The XPath 1.0 NodeSet data type.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Maps to Java &#123;<span class="doctag">@link</span> org.w3c.dom.NodeList&#125;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">QName</span> <span class="variable">NODESET</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QName</span>(<span class="string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span>, <span class="string">&quot;NODESET&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The XPath 1.0 NodeSet data type.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Maps to Java &#123;<span class="doctag">@link</span> org.w3c.dom.Node&#125;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">QName</span> <span class="variable">NODE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QName</span>(<span class="string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span>, <span class="string">&quot;NODE&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The URI for the DOM object model, &quot;http://java.sun.com/jaxp/xpath/dom&quot;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DOM_OBJECT_MODEL</span> <span class="operator">=</span> <span class="string">&quot;http://java.sun.com/jaxp/xpath/dom&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，如果XPath表达式只使用一次，可以跳过编译步骤直接调用Xpath对象的evaulate方法。但如果是重复多次的调用，编译后性能更佳。</p><h3 id="XPathParse"><a href="#XPathParse" class="headerlink" title="XPathParse"></a>XPathParse</h3><p>Mybatis提供的XPathParser类封装了上文提到的XPath,Document和EntityResolver</p><p>XPathParser的字段如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XPathParser</span>()&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Document document; <span class="comment">//操作的document对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> validation; <span class="comment">//是否开启验证</span></span><br><span class="line">    <span class="keyword">private</span> EntityResolver entityResolver; <span class="comment">//用于加载本地dtd文件</span></span><br><span class="line">    <span class="keyword">private</span> Properties variables; <span class="comment">// mybatis-config.xml中&lt;propteries&gt;标签定义的键值对集合</span></span><br><span class="line">    <span class="keyword">private</span> XPath xpath; <span class="comment">//XPath对象</span></span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，对XML文档进行验证时，会根据XML文档开始位置加载对应的DTD文件</p><blockquote><p>DTD文件为对XML的约束，可参考 <a href="https://www.runoob.com/dtd/dtd-tutorial.html">DTD 教程 | 菜鸟教程</a></p></blockquote><p>如果解析mybatis-config文件时，默认联网加载 <a href="http://mybatis.org/dtd/mybatis-3-config.dtd">http://mybatis.org/dtd/mybatis-3-config.dtd</a> 这个文档，当网络比较慢时会导致验证过程缓慢。在开发中往往会设置EntityResolver接口对象加载本地的DTD文件，从而避免联网加载。</p><p>XMLMapperEntityResolver是Mybatis提供的EntityResolver接口的实现类，该接口的实现如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XMLMapperEntityResolver</span> <span class="keyword">implements</span> <span class="title class_">EntityResolver</span> &#123;</span><br><span class="line">    <span class="comment">// 指定mybatis-config.xml文件和映射文件对应的DTD的SystemId</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IBATIS_CONFIG_SYSTEM</span> <span class="operator">=</span> <span class="string">&quot;ibatis-3-config.dtd&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IBATIS_MAPPER_SYSTEM</span> <span class="operator">=</span> <span class="string">&quot;ibatis-3-mapper.dtd&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MYBATIS_CONFIG_SYSTEM</span> <span class="operator">=</span> <span class="string">&quot;mybatis-3-config.dtd&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MYBATIS_MAPPER_SYSTEM</span> <span class="operator">=</span> <span class="string">&quot;mybatis-3-mapper.dtd&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MYBATIS_CONFIG_DTD</span> <span class="operator">=</span> <span class="string">&quot;org/apache/ibatis/builder/xml/mybatis-3-config.dtd&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MYBATIS_MAPPER_DTD</span> <span class="operator">=</span> <span class="string">&quot;org/apache/ibatis/builder/xml/mybatis-3-mapper.dtd&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">XMLMapperEntityResolver</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> InputSource <span class="title function_">resolveEntity</span><span class="params">(String publicId, String systemId)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (systemId != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">lowerCaseSystemId</span> <span class="operator">=</span> systemId.toLowerCase(Locale.ENGLISH);</span><br><span class="line">                <span class="keyword">if</span> (lowerCaseSystemId.contains(<span class="string">&quot;mybatis-3-config.dtd&quot;</span>) || lowerCaseSystemId.contains(<span class="string">&quot;ibatis-3-config.dtd&quot;</span>)) &#123;</span><br><span class="line">                   <span class="comment">// 查找指定的dtd文件，并调用getInputSource读取dtd文档返回 </span></span><br><span class="line">                   <span class="keyword">return</span> <span class="built_in">this</span>.getInputSource(<span class="string">&quot;org/apache/ibatis/builder/xml/mybatis-3-config.dtd&quot;</span>, publicId, systemId);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (lowerCaseSystemId.contains(<span class="string">&quot;mybatis-3-mapper.dtd&quot;</span>) || lowerCaseSystemId.contains(<span class="string">&quot;ibatis-3-mapper.dtd&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.getInputSource(<span class="string">&quot;org/apache/ibatis/builder/xml/mybatis-3-mapper.dtd&quot;</span>, publicId, systemId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SAXException</span>(var4.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InputSource <span class="title function_">getInputSource</span><span class="params">(String path, String publicId, String systemId)</span> &#123;</span><br><span class="line">        <span class="type">InputSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (path != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(path);</span><br><span class="line">                source = <span class="keyword">new</span> <span class="title class_">InputSource</span>(in);</span><br><span class="line">                source.setPublicId(publicId);</span><br><span class="line">                source.setSystemId(systemId);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var6) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到XPathParser对象，先看每个构造方法中都调用的createDocument(InputSource)方法，在调用该方法之前，会先调用commonConstructor()完成初始化</p><p><img src="http://cdn.zsenhe.com/b4b5b3d42f3443d190df528764435fd5" alt="image.png"></p><p>具体实现如下：</p><p>可以看到，createDocument的对象即是我们创建DocumentBuilder对象的封装。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Document <span class="title function_">createDocument</span><span class="params">(InputSource inputSource)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">DocumentBuilderFactory</span> <span class="variable">factory</span> <span class="operator">=</span> DocumentBuilderFactory.newInstance();</span><br><span class="line">        factory.setFeature(<span class="string">&quot;http://javax.xml.XMLConstants/feature/secure-processing&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        factory.setValidating(<span class="built_in">this</span>.validation);</span><br><span class="line">        factory.setNamespaceAware(<span class="literal">false</span>);</span><br><span class="line">        factory.setIgnoringComments(<span class="literal">true</span>);</span><br><span class="line">        factory.setIgnoringElementContentWhitespace(<span class="literal">false</span>);</span><br><span class="line">        factory.setCoalescing(<span class="literal">false</span>);</span><br><span class="line">        factory.setExpandEntityReferences(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">DocumentBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> factory.newDocumentBuilder();</span><br><span class="line">        builder.setEntityResolver(<span class="built_in">this</span>.entityResolver);</span><br><span class="line">        builder.setErrorHandler(<span class="keyword">new</span> <span class="title class_">ErrorHandler</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">error</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">                <span class="keyword">throw</span> exception;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fatalError</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">                <span class="keyword">throw</span> exception;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">warning</span><span class="params">(SAXParseException exception)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> builder.parse(inputSource);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var4) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BuilderException</span>(<span class="string">&quot;Error creating document instance.  Cause: &quot;</span> + var4, var4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">commonConstructor</span><span class="params">(<span class="type">boolean</span> validation, Properties variables, EntityResolver entityResolver)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.validation = validation;</span><br><span class="line">    <span class="built_in">this</span>.entityResolver = entityResolver;</span><br><span class="line">    <span class="built_in">this</span>.variables = variables;</span><br><span class="line">    <span class="type">XPathFactory</span> <span class="variable">factory</span> <span class="operator">=</span> XPathFactory.newInstance();</span><br><span class="line">    <span class="built_in">this</span>.xpath = factory.newXPath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>往下看这个类，他提供了一系列的eval*()方法用于解析boolean,shor,string等不同数据类型。他通过调用前面介绍的XPath.evaluate()方法来查找指定路径的节点或数学，并进行相应的类型转换。</p><p>值得注意的是其中的evalString()方法，其中会调用PropertyParser.parse()方法处理节点中相应的默认值，实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">evalString</span><span class="params">(Object root, String expression)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (String)<span class="built_in">this</span>.evaluate(expression, root, XPathConstants.STRING);</span><br><span class="line">    <span class="keyword">return</span> PropertyParser.parse(result, <span class="built_in">this</span>.variables);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着往下分析，打开PropertyParser类的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;org.apache.ibatis.parsing.PropertyParser.&quot;</span>;</span><br><span class="line"><span class="comment">// 在mybats-config.xml中&lt;properties&gt;节点下配置是否开启默认值功能的配置项</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_ENABLE_DEFAULT_VALUE</span> <span class="operator">=</span> <span class="string">&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_DEFAULT_VALUE_SEPARATOR</span> <span class="operator">=</span> <span class="string">&quot;org.apache.ibatis.parsing.PropertyParser.default-value-separator&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ENABLE_DEFAULT_VALUE</span> <span class="operator">=</span> <span class="string">&quot;false&quot;</span>; <span class="comment">//默认关闭默认值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_VALUE_SEPARATOR</span> <span class="operator">=</span> <span class="string">&quot;:&quot;</span>; <span class="comment">// 默认分隔符是冒号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//作为工具类，在源码中构造器为私有防止被其他类创建</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">PropertyParser</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PropertyParser. parse（）方法中会创建 GenericTokenParser 解析器，并将默认值的处理委托给GenericTokenParser.parse()方法，实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">parse</span><span class="params">(String string, Properties variables)</span> &#123;</span><br><span class="line">    <span class="type">VariableTokenHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VariableTokenHandler</span>(variables);</span><br><span class="line">    <span class="type">GenericTokenParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericTokenParser</span>(<span class="string">&quot;$&#123;&quot;</span>, <span class="string">&quot;&#125;&quot;</span>, handler);</span><br><span class="line">    <span class="keyword">return</span> parser.parse(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GenericTokenParser是一个占位符解析类，它的字段解释如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericTokenParser</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String openToken; <span class="comment">// 占位符开始标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String closeToken; <span class="comment">// 占位符结束标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenHandler handler; <span class="comment">// tokenhandler实现类会按它的逻辑解析占位符</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GenericTokenParser.parser()的逻辑也并不复杂，它将顺序查找openToken和closeToken，解析得到占位符的字面值，并将其交给传入的TokenHandler处理，然后将解析结果重新拼装成字符串返回。它的流程实现如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">parse</span><span class="params">(String text)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (text != <span class="literal">null</span> &amp;&amp; !text.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 寻找开始标记</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> text.indexOf(<span class="built_in">this</span>.openToken);</span><br><span class="line">        <span class="comment">// 未寻找到开始标记，直接返回text</span></span><br><span class="line">        <span class="keyword">if</span> (start == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> text;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 将text解析为字符数组</span></span><br><span class="line">            <span class="type">char</span>[] src = text.toCharArray();</span><br><span class="line">            <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//初始占位符的偏移值，随着对数组的遍历和查找会不断变化，偏移量之前的字符为已经处理过的</span></span><br><span class="line">            <span class="comment">// 记录解析后的字符串</span></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="comment">// 用来记录一个占位符的字面值</span></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">expression</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当还有开始标记时</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (start &gt; <span class="number">0</span> &amp;&amp; src[start - <span class="number">1</span>] == <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">// 遇到转义的开始标记时，直接将前面的字符串以及开始标记追加到builder中</span></span><br><span class="line">                    builder.append(src, offset, start - offset - <span class="number">1</span>).append(<span class="built_in">this</span>.openToken);</span><br><span class="line">                    offset = start + <span class="built_in">this</span>.openToken.length();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 查找到开始标记，且未转义</span></span><br><span class="line">                    <span class="keyword">if</span> (expression == <span class="literal">null</span>) &#123;</span><br><span class="line">                        expression = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        expression.setLength(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 将前面的字符串追加到builder中</span></span><br><span class="line">                    builder.append(src, offset, start - offset);</span><br><span class="line">                    offset = start + <span class="built_in">this</span>.openToken.length(); <span class="comment">// 更新偏移值,开始标记的位置+标记的长度</span></span><br><span class="line"></span><br><span class="line">                    <span class="type">int</span> end;</span><br><span class="line">                    <span class="keyword">for</span>(end = text.indexOf(<span class="built_in">this</span>.closeToken, offset); end &gt; -<span class="number">1</span>; end = text.indexOf(<span class="built_in">this</span>.closeToken, offset)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (end &lt;= offset || src[end - <span class="number">1</span>] != <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">                            <span class="comment">// 到了这里，将开始标记和结束标记之间的内容追加到 expression 中保存</span></span><br><span class="line">                            expression.append(src, offset, end - offset);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 处理转义的结束标记</span></span><br><span class="line">                        expression.append(src, offset, end - offset - <span class="number">1</span>).append(<span class="built_in">this</span>.closeToken);</span><br><span class="line">                        offset = end + <span class="built_in">this</span>.closeToken.length();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (end == -<span class="number">1</span>) &#123;</span><br><span class="line">                        builder.append(src, start, src.length - start);</span><br><span class="line">                        offset = src.length;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 将占位符的值交给TokenHandler处理，并将结果追加到builder中保存</span></span><br><span class="line">                        <span class="comment">// 并将偏移值移动到结束标记后 (处理完一组占位符)</span></span><br><span class="line">                        builder.append(<span class="built_in">this</span>.handler.handleToken(expression.toString()));</span><br><span class="line">                        offset = end + <span class="built_in">this</span>.closeToken.length();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 移动start (如果有的话，处理下一组)</span></span><br><span class="line">                start = text.indexOf(<span class="built_in">this</span>.openToken, offset);</span><br><span class="line">            &#125; <span class="keyword">while</span>(start &gt; -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (offset &lt; src.length) &#123;</span><br><span class="line">                builder.append(src, offset, src.length - offset);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> builder.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>占位符的字面值由TokenHandler接口实现进行解析，TokenHandler接口有四个实现。</p><p>再回来看PropertyParser.parse()方法</p><p><img src="http://cdn.zsenhe.com/62842403141f45ae82f49bdb75c4d83c" alt="image.png"><br>其中为占位符解析传入的TokenHandler实现类为VariableTokenHandler ，一个内部实现类，其字段含义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Properties variables; <span class="comment">// &lt;properties&gt;节点下定义的键值对</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> enableDefaultValue; <span class="comment">// 是否支持占位符中使用默认值的功能</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String defaultValueSeparator; <span class="comment">// 指定占位符和默认值之间的分隔符</span></span><br></pre></td></tr></table></figure><p>VariableTokenHandler实现了TokenHandler接口中的handlerToken()方法，该实现首先会按照defaultValueSpearator字段对整个占位符进行切割，得到占位符的名称和默认值，按照名称查找对应的值，如不存在且默认值功能开启，则返回默认值。其中代码实现并不复杂，就不贴上来了</p><p>回到对XPathParser的分析，XPathParser.evalNode()返回值类型是XNode，它对org.w3c.dom.Node对象做了封装和解析，其字段含义如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XNode</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node node; <span class="comment">//org.w3c.dom.Node 对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name; <span class="comment">// Node节点名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String body; <span class="comment">// 节点内容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Properties attributes; <span class="comment">//节点属性合集</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Properties variables; <span class="comment">// mybatis-config.xml 中定义的键值对</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> XPathParser xpathParser; <span class="comment">// 生成该XNode对象XPathParser对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XNode的构造函数中调用了它的parseAttributes()和parseBody()方法解析org.w3c.dom.Node对象中的信息，初始化attributes集合和body字段，过程如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Properties <span class="title function_">parseAttributes</span><span class="params">(Node n)</span> &#123;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">attributes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    <span class="comment">// 获取节点的属性集合</span></span><br><span class="line">    <span class="type">NamedNodeMap</span> <span class="variable">attributeNodes</span> <span class="operator">=</span> n.getAttributes();</span><br><span class="line">    <span class="keyword">if</span> (attributeNodes != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; attributeNodes.getLength(); ++i) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">attribute</span> <span class="operator">=</span> attributeNodes.item(i);</span><br><span class="line">            <span class="comment">// 调用上文所述的PropertyParser.parse处理属性值的占位符</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> PropertyParser.parse(attribute.getNodeValue(), <span class="built_in">this</span>.variables);</span><br><span class="line">            attributes.put(attribute.getNodeName(), value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> attributes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">parseBody</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="built_in">this</span>.getBodyData(node); <span class="comment">// 获取节点文本值</span></span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">NodeList</span> <span class="variable">children</span> <span class="operator">=</span> node.getChildNodes();</span><br><span class="line">        <span class="comment">// 处理子节点</span></span><br><span class="line">        <span class="comment">// 注意，xml中节点内的文本属于文本节点</span></span><br><span class="line">        <span class="comment">// 比如直接getBodyData &lt;name&gt;神雕侠侣&lt;/name&gt; 是无法获取文本的</span></span><br><span class="line">        <span class="comment">// 需要再往里一层，解析&quot;神雕侠侣&quot;节点时才属于文本节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; children.getLength(); ++i) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">child</span> <span class="operator">=</span> children.item(i);</span><br><span class="line">            data = <span class="built_in">this</span>.getBodyData(child);</span><br><span class="line">            <span class="keyword">if</span> (data != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getBodyData</span><span class="params">(Node child)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果不是文本值,返回null</span></span><br><span class="line">    <span class="keyword">if</span> (child.getNodeType() != <span class="number">4</span> &amp;&amp; child.getNodeType() != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> ((CharacterData)child).getData();</span><br><span class="line">        <span class="keyword">return</span> PropertyParser.parse(data, <span class="built_in">this</span>.variables);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="到此，让我们玩一下XPathParser吧"><a href="#到此，让我们玩一下XPathParser吧" class="headerlink" title="到此，让我们玩一下XPathParser吧!"></a>到此，让我们玩一下XPathParser吧!</h4><p>还记得我们之前获取1955年之后发行的书步骤吗，现在可以简化成如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XPathParserTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">XPathParser</span> <span class="variable">xPathParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XPathParser</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;bookdata.xml&quot;</span>)));</span><br><span class="line">            List&lt;XNode&gt; xNodes = xPathParser.evalNodes(<span class="string">&quot;//book[@year&gt;1955]&quot;</span>); <span class="comment">// 查询所有 year&gt;1955 的节点</span></span><br><span class="line">            <span class="keyword">for</span> (XNode xNode : xNodes) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> xNode.getStringAttribute(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">XNode</span> <span class="variable">nameNode</span> <span class="operator">=</span> xNode.evalNode(<span class="string">&quot;//name&quot;</span>);</span><br><span class="line">                <span class="type">XNode</span> <span class="variable">authorNode</span> <span class="operator">=</span> xNode.evalNode(<span class="string">&quot;//author&quot;</span>);</span><br><span class="line">                System.out.println(id+<span class="string">&quot;:&quot;</span>+nameNode.getStringBody()+<span class="string">&quot;/&quot;</span>+authorNode.getStringBody());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XNode中提供了多种get*()方法获取所需的节点信息，这些信息来源于attribute,body,node字段;也可以像上面这样通过eval*()配合XPath表达式来取得信息，需要注意的是，eval*中的上下文节点为当前Xnode对象的node字段。</p><p>参考资料 - 《MyBatis技术内幕》</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>XML常见的解析方式</title>
      <link href="/2023/10/26/XML%E5%B8%B8%E8%A7%81%E7%9A%84%E8%A7%A3%E6%9E%90%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/10/26/XML%E5%B8%B8%E8%A7%81%E7%9A%84%E8%A7%A3%E6%9E%90%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="XML的三种解析方式"><a href="#XML的三种解析方式" class="headerlink" title="XML的三种解析方式"></a>XML的三种解析方式</h2><p>在阅读MyBatis解析器模块中的XPathParser类时，需要了解一些关于XML文档解析的相关知识<br>XML常见的解析方式有三种 <em>DOM解析</em> <em>SAX解析</em> <em>STAX解析</em><br>下面将详细记录SAX解析的过程和代码</p><h4 id="DOM解析"><a href="#DOM解析" class="headerlink" title="DOM解析"></a>DOM解析</h4><p>DOM属于是前端选手的老朋友了，它会基于树的形式将整个xml文档读入内存维护，基于这棵树结构对各个节点(Node)进行操作。</p><p><img src="http://cdn.zsenhe.com/356bfd8686434745bdb7534ec338f659" alt="image.png"></p><p>如下经过DOM解析后的树结构:</p><p><img src="http://cdn.zsenhe.com/a8a56780ed694b898450f3748d1bfd71" alt="image.png"></p><p>DOM解析的好处是因为基于树存储，易于节点之间的定位导航。但缺点也很明显，由于需要一次性读入到内存中，当文档过大时会造成较大的资源消耗</p><h4 id="SAX解析"><a href="#SAX解析" class="headerlink" title="SAX解析"></a>SAX解析</h4><p>SAX解析在一定程度上解决了上面所述的资源消耗问题，它并不需要将整个文档加载到内存，只需将XML文档的一部分加载，即可开始解析，在处理过程中不会在内存中缓存XML的数据，占用资源较小。当程序处理过程中满足条件时，也可以立即停止解析过程</p><p>当SAX解析器解析到某类型节点时，会call注册在该类型节点上的回调函数，一般情况下，开发人员只需继承DefaultHandler基类，重写对应事件的函数即可</p><p>比如以下xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">&quot;1001&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span></span><br><span class="line">            神雕侠侣</span><br><span class="line">        <span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span></span><br><span class="line">            金庸</span><br><span class="line">        <span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当sax解析器开始运行的时候，会分别调用以下回调函数</p><blockquote><p>startElement(books)<br>startElement(book)<br>startElement(name)<br>characters(神雕侠侣)<br>endElement(name)<br>startElement(author)<br>characters(金庸)<br>endElement(author)<br>endElement(book)<br>endElement(books)</p></blockquote><p>例如我们需要将xml中的book转为实体类，只需要创建自己的处理类，继承DefaultHandler，重写对应的函数即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomHandler</span> <span class="keyword">extends</span> <span class="title class_">DefaultHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Book bookCache;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Book&gt; books;</span><br><span class="line">    <span class="keyword">private</span> String currentName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析文本的回调</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">characters</span><span class="params">(<span class="type">char</span>[] ch, <span class="type">int</span> start, <span class="type">int</span> length)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;characters(&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(ch,start,length)+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(currentName.equalsIgnoreCase(<span class="string">&quot;author&quot;</span>))&#123;</span><br><span class="line">            <span class="built_in">this</span>.bookCache.setAuthor(<span class="keyword">new</span> <span class="title class_">String</span>(ch,start,length));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(currentName.equalsIgnoreCase(<span class="string">&quot;name&quot;</span>))&#123;</span><br><span class="line">            <span class="built_in">this</span>.bookCache.setName(<span class="keyword">new</span> <span class="title class_">String</span>(ch,start,length));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始解析节点</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;startElement(&quot;</span>+qName+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(qName.equalsIgnoreCase(<span class="string">&quot;books&quot;</span>))&#123;</span><br><span class="line">            <span class="built_in">this</span>.books = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(qName.equalsIgnoreCase(<span class="string">&quot;book&quot;</span>))&#123;</span><br><span class="line">            <span class="built_in">this</span>.bookCache = <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">            <span class="built_in">this</span>.bookCache.setId(Long.parseLong(attributes.getValue(<span class="string">&quot;id&quot;</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.currentName = qName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结束某个节点的解析</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">endElement</span><span class="params">(String uri, String localName, String qName)</span> <span class="keyword">throws</span> SAXException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;endElement(&quot;</span>+qName+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(qName.equalsIgnoreCase(<span class="string">&quot;book&quot;</span>))&#123;</span><br><span class="line">            <span class="built_in">this</span>.books.add(bookCache);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> books;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaxTest</span> &#123;</span><br><span class="line">    <span class="comment">// 获取xml解析器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> XMLReader <span class="title function_">xmlReader</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SAXParserFactory</span> <span class="variable">saxParserFactory</span> <span class="operator">=</span> SAXParserFactory.newInstance();</span><br><span class="line">        <span class="type">SAXParser</span> <span class="variable">saxParser</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            saxParser = saxParserFactory.newSAXParser();</span><br><span class="line">            <span class="keyword">return</span> saxParser.getXMLReader();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParserConfigurationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SAXException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">XMLReader</span> <span class="variable">xmlReader</span> <span class="operator">=</span> xmlReader();</span><br><span class="line">        <span class="type">CustomHandler</span> <span class="variable">customHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomHandler</span>();</span><br><span class="line">        xmlReader.setContentHandler(customHandler);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            xmlReader.parse(<span class="keyword">new</span> <span class="title class_">InputSource</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;bookdata.xml&quot;</span>))));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SAXException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        customHandler.getBooks().forEach(book -&gt; System.out.println(book));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/654b1ba0cc8d47d8817eb78e136a01df" alt="image.png">![])</p><p>stax笔者未去了解过，感兴趣的可以参阅相关资料</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一块钱掉地上，碎成了两张五毛</title>
      <link href="/2023/10/06/%E4%B8%80%E5%9D%97%E9%92%B1%E6%8E%89%E5%9C%B0%E4%B8%8A%EF%BC%8C%E7%A2%8E%E6%88%90%E4%BA%86%E4%B8%A4%E5%BC%A0%E4%BA%94%E6%AF%9B/"/>
      <url>/2023/10/06/%E4%B8%80%E5%9D%97%E9%92%B1%E6%8E%89%E5%9C%B0%E4%B8%8A%EF%BC%8C%E7%A2%8E%E6%88%90%E4%BA%86%E4%B8%A4%E5%BC%A0%E4%BA%94%E6%AF%9B/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.zsenhe.com/af4b15e66ede4e7c9a91a3c0296e7ff3" alt="微信图片_20231006171122.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>该死的反射该死的反射该死的反射该死的反射该死的反射</title>
      <link href="/2023/09/10/%E8%AF%A5%E6%AD%BB%E7%9A%84%E5%8F%8D%E5%B0%84%E8%AF%A5%E6%AD%BB%E7%9A%84%E5%8F%8D%E5%B0%84%E8%AF%A5%E6%AD%BB%E7%9A%84%E5%8F%8D%E5%B0%84%E8%AF%A5%E6%AD%BB%E7%9A%84%E5%8F%8D%E5%B0%84%E8%AF%A5%E6%AD%BB%E7%9A%84%E5%8F%8D%E5%B0%84/"/>
      <url>/2023/09/10/%E8%AF%A5%E6%AD%BB%E7%9A%84%E5%8F%8D%E5%B0%84%E8%AF%A5%E6%AD%BB%E7%9A%84%E5%8F%8D%E5%B0%84%E8%AF%A5%E6%AD%BB%E7%9A%84%E5%8F%8D%E5%B0%84%E8%AF%A5%E6%AD%BB%E7%9A%84%E5%8F%8D%E5%B0%84%E8%AF%A5%E6%AD%BB%E7%9A%84%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<p>这是我要反射获取的类方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateMenu</span><span class="params">(Block b, BlockMenu inv, <span class="type">boolean</span> force)</span> &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">hasHolo</span> <span class="operator">=</span> BlockStorage.getLocationInfo(b.getLocation(), <span class="string">&quot;holo&quot;</span>);</span><br><span class="line">  <span class="type">int</span> <span class="variable">stored</span> <span class="operator">=</span> getStored(b);</span><br><span class="line">  <span class="type">String</span> <span class="variable">itemName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">storedPercent</span> <span class="operator">=</span> doubleRoundAndFade(stored / <span class="built_in">this</span>.MAX_STORAGE * <span class="number">100.0D</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">storedStacks</span> <span class="operator">=</span> doubleRoundAndFade(stored / inv.getItemInSlot(<span class="number">31</span>).getMaxStackSize());</span><br><span class="line">  <span class="keyword">if</span> (inv.hasViewer() || force)</span><br><span class="line">    inv.replaceExistingItem(<span class="number">22</span>, (ItemStack)<span class="keyword">new</span> <span class="title class_">CustomItemStack</span>(Material.LIME_STAINED_GLASS_PANE, <span class="string">&quot;&amp;6&amp;e&quot;</span> + stored + <span class="string">&quot; / &quot;</span> + <span class="built_in">this</span>.MAX_STORAGE, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;&amp;b&quot;</span> + storedStacks + <span class="string">&quot; &amp;8| &amp;7&quot;</span> + storedPercent + <span class="string">&quot;&amp;7%&quot;</span> &#125;)); </span><br><span class="line">  <span class="type">ItemStack</span> <span class="variable">item</span> <span class="operator">=</span> inv.getItemInSlot(<span class="number">31</span>);</span><br><span class="line">  <span class="keyword">if</span> (inv.getItemInSlot(<span class="number">31</span>) != <span class="literal">null</span>)</span><br><span class="line">    itemName = ItemUtils.getItemName(item); </span><br><span class="line">  <span class="keyword">if</span> (((Boolean)<span class="built_in">this</span>.showHologram.getValue()).booleanValue() &amp;&amp; (hasHolo == <span class="literal">null</span> || hasHolo.equals(<span class="string">&quot;true&quot;</span>)))</span><br><span class="line">    updateHologram(b, itemName + <span class="string">&quot; &amp;9x&quot;</span> + stored + <span class="string">&quot; &amp;7(&quot;</span> + storedPercent + <span class="string">&quot;&amp;7%)&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span> (stored == <span class="number">0</span>) &#123;</span><br><span class="line">    inv.replaceExistingItem(<span class="number">31</span>, (ItemStack)<span class="keyword">new</span> <span class="title class_">CustomItemStack</span>(Material.BARRIER, <span class="string">&quot;&amp;c, new String[0]));</span></span><br><span class="line"><span class="string">    if (((Boolean)this.showHologram.getValue()).booleanValue() &amp;&amp; (hasHolo == null || hasHolo.equals(&quot;</span><span class="literal">true</span><span class="string">&quot;)))</span></span><br><span class="line"><span class="string">      updateHologram(b, &quot;</span>&amp;c); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Method</span> <span class="variable">updateMenuMethod</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;updateMenu&quot;</span>, Block.class, BlockMenu.class, Boolean.class);</span><br><span class="line">                    updateMenuMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    updateMenuMethod.invoke(barrel,block,BlockStorage.getInventory(block),<span class="literal">true</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p>怎么看怎么没错是吧!但还是<br><img src="http://cdn.zsenhe.com/24e4c258bacc4eb387a7de25e73fc383" alt="WWMZ_PEDB``67ITQLYNVI.png"><br>这是为什么呢，以为是依赖冲突，折腾了快一个小时<br>眼尖的应该已经看出来了，实际force类型是boolean，getDeclaredMethod却传了个Boolean<br>哎，宝贵的时间就是被这些该死的小问题浪费</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于爱发电的spigot服务器自动充值发货</title>
      <link href="/2023/08/31/%E5%9F%BA%E4%BA%8E%E7%88%B1%E5%8F%91%E7%94%B5%E7%9A%84spigot%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%87%AA%E5%8A%A8%E5%85%85%E5%80%BC%E5%8F%91%E8%B4%A7/"/>
      <url>/2023/08/31/%E5%9F%BA%E4%BA%8E%E7%88%B1%E5%8F%91%E7%94%B5%E7%9A%84spigot%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%87%AA%E5%8A%A8%E5%85%85%E5%80%BC%E5%8F%91%E8%B4%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="AifadianPay"><a href="#AifadianPay" class="headerlink" title="AifadianPay"></a>AifadianPay</h1><p>基于爱发电实现的spigot自动充值发货插件</p><p>使用:<br>前往 <a href="https://afdian.net/">https://afdian.net</a> 注册账号后，右上角点击”开发者”<br>获取user_id,token填入配置文件，重载插件，创建完商品即可开始使用(注意是商品，不是赞助方案)</p><p>配置文件:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">setting:</span></span><br><span class="line">  <span class="comment"># userId与token在爱发电获取,详情可参考mcbbs帖内教程</span></span><br><span class="line">  <span class="attr">userId:</span> <span class="string">&#x27;user_id&#x27;</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">&#x27;token&#x27;</span></span><br><span class="line">  <span class="comment"># 自动发货间隔</span></span><br><span class="line">  <span class="attr">delay:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">shopItem:</span></span><br><span class="line">  <span class="comment"># 商品名称请与爱发电内保持一致</span></span><br><span class="line">  <span class="string">&#x27;100点券&#x27;</span><span class="string">:</span></span><br><span class="line">    <span class="comment"># 展示名</span></span><br><span class="line">    <span class="attr">displayName:</span> <span class="string">&#x27;100点券&#x27;</span></span><br><span class="line">    <span class="comment"># 使用 /apl show 100点券 时展示的url</span></span><br><span class="line">    <span class="attr">showUrl:</span> <span class="string">&#x27;https://afdian.net/item/1cab866647aa11ee9f3652540025c377&#x27;</span></span><br><span class="line">    <span class="comment"># 仅显示在展示信息 ( &#123;price&#125;RMB )</span></span><br><span class="line">    <span class="attr">price:</span> <span class="number">100</span></span><br><span class="line">    <span class="comment"># 获取点券</span></span><br><span class="line">    <span class="attr">point:</span> <span class="number">100</span></span><br><span class="line">    <span class="comment"># 执行指令</span></span><br><span class="line">    <span class="attr">commands:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;give @p@ stone 1&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;say @p@,感谢你的支持&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;say 白给了啊，@p@刚刚赞助了100点券&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;[title]&amp;a已发货/&amp;f+@point@&amp;a 点卷 (&amp;c@price@rmb@&amp;a)&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;[message]&amp;a &#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;[message]&amp;f 已完成订单 &amp;e@tradeNo@ &amp;f感谢您的支持&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;[message]&amp;f 当前点券余额 &amp;e&amp;n@current_point@&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;[message]&amp;a &#x27;</span></span><br></pre></td></tr></table></figure><p>命令&amp;权限:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/apl help 查看帮助 apl.use.help</span><br><span class="line">/apl check [订单] 查看订单状态 apl.admin.check</span><br><span class="line">/apl update [订单] 手动发货订单 apl.admin.update</span><br><span class="line">/apl reload 重载配置文件</span><br></pre></td></tr></table></figure><p>其他:<br>开源地址: <a href="https://github.com/meteorOSS/AifadianPay">https://github.com/meteorOSS/AifadianPay</a><br>自己包装的爱发电javasdk: <a href="https://github.com/meteorOSS/AifadianApi/tree/master">https://github.com/meteorOSS/AifadianApi/tree/master</a></p><p>如果能接受手续费6%的话基本没别的缺点了，平台功能完备且稳定，比圈内一些跑路平台强的多</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CMS与三色标记算法</title>
      <link href="/2023/08/25/CMS%E4%B8%8E%E4%B8%89%E8%89%B2%E6%A0%87%E8%AE%B0%E7%AE%97%E6%B3%95/"/>
      <url>/2023/08/25/CMS%E4%B8%8E%E4%B8%89%E8%89%B2%E6%A0%87%E8%AE%B0%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="CMS与三色标记算法"><a href="#CMS与三色标记算法" class="headerlink" title="CMS与三色标记算法"></a>CMS与三色标记算法</h1><p>CMS是一款里程碑式的垃圾收集器，在它之前GC线程和工作线程是无法同时运行的，在用户层面带来的后果就是运行一段时间就会卡顿一会，降低响应速度</p><p>但在我们认知中，GC时停止其他线程应该是必要的。试想一下如果它们同时运行，如果原本不是垃圾，工作线程将引用更改变成了垃圾，这种情况大不了就是GC下一次再清理就好了，但如果原本是垃圾，在清理过程中其他线程将其引用，GC回收后就会造成灾难的程序运行错误。</p><p>CMS是怎么解决的呢？</p><h2 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h2><p>Concurrent Mark Sweep，从名字上看就能知道这是一个工作在老年代的垃圾收集器，它采用了标记清除法。在它运行中大致分为几个过程</p><blockquote><p>初始标记 -&gt; 并发标记 -&gt; 重新标记 -&gt; 并发清理</p></blockquote><p>初始标记阶段并不会标记所有垃圾，而是对GCroot直接关联的对象进行标记，这个过程依然是STW的，但它的所占时间非常短，几乎可以忽略，因为这时候并不会进行标记以外的工作</p><p>在初始标记结束后，对标记的根关联对象进行dfs，以这些对象为根，遍历整个内存堆；这个过程耗时会较长，但好在该过程并不会触发STW，工作线程依然可以运行，当然响应的速度会受到影响</p><p>由于在并发标记过程中其他线程仍在工作，那么必然会产生错标，那么就得把它修正回来，这个时候就进入了重新标记阶段，在这个阶段会触发STW，但由于错标的对象不会太多，该过程并不会停顿过长，最后进行并发清理</p><h2 id="三色清理算法"><a href="#三色清理算法" class="headerlink" title="三色清理算法"></a>三色清理算法</h2><p>在整个过程中，最具神秘感的便是第二个阶段，并发标记。上文所述它能在不STW下进行垃圾标记，那么是怎么做到的呢。其采用的算法叫 三色标记法</p><p>三色标记法将对象的颜色分为黑 灰 白</p><blockquote><p>白色: 未被标记过的对象（垃圾）</p><p>灰色: 已经被标记过，但该对象关联系下的其他节点对象未被全部标记</p><p>黑色: 已经被标记过且该对象下关联的其他节点也已经全部标记完成</p></blockquote><p><img src="https://pic3.zhimg.com/80/v2-524613ef814265510d92d5fb577bef7e_720w.webp"></p><p>流程如下:</p><blockquote><p>从main方法的GC Root开始沿着它们的对象向下查找，用黑白灰的规则，标记处所有跟GC Root相连接的对象，扫描一遍结束后，进入重新标记，短暂STW，再次进行扫描，此时略过黑色对象，找出灰色对象继续标记，程序继续执行，GC线程扫描所有的白色对象进行回收</p></blockquote><blockquote><ol><li><p>创建三个集合 黑 灰 白</p></li><li><p>初始所有对象存入白色集合</p></li><li><p>从根节点开始遍历所有对象 (初始标记，注意这里并不会进行dfs) ，将遍历到的对象加入灰色集合</p></li><li><p>对灰色集合中所有对象进行dfs，将灰色对象引用的对象从白色变成灰色，之后将此本次遍历的根节点(此灰色对象)加入黑色集合</p></li><li><p>重复 4 直到灰色中无任何对象</p></li><li><p>清理白色垃圾</p></li></ol></blockquote><h2 id="B-D消失，A-D增加"><a href="#B-D消失，A-D增加" class="headerlink" title="B -&gt; D消失，A-&gt;D增加"></a>B -&gt; D消失，A-&gt;D增加</h2><p>在脑海中过一遍流程，很明显这样貌似存在一些问题。如果D原先作为白色对象被灰色对象B所引用，由于清理的过程程序还在不间断运行，如果其他线程取消了B对D的引用，那么就扫描不到D了，这样还不是最严重的，至多产生一些浮动垃圾，下一次再次清理就好了。最严重的是另外一种情况，试想一下，在扫描灰色对象时，原先D属于B的引用，与此同时其他线程进行了更改，B到D的引用消失，增加了黑色对象A到D的引用，由于A属于黑色对象，如果不进行修正，再下次清理的时候，并不会对D进行扫描，到第6步的时候，D作为白色节点被清理，但A还在引用D。</p><p>针对此问题，CMS采用了 增加引用环节(Incremental Update) 来处理，也就是将A重新标记为灰色</p><h3 id="IncrementalUpdate产生的新问题-漏标"><a href="#IncrementalUpdate产生的新问题-漏标" class="headerlink" title="IncrementalUpdate产生的新问题 漏标"></a>IncrementalUpdate产生的新问题 漏标</h3><ul><li>在一个灰色对象正在被一个GC线程回收时，当它已经被标记过的属性指向了一个白色对象（垃圾）</li><li>而这个对象的属性对象本身还未全部标记结束，则为灰色不变</li><li>「而这个GC线程在标记完最后一个属性后，认为已经将所有的属性标记结束了，将这个灰色对象标记为黑色，被重新引用的白色对象，无法被标记</li></ul><p>由于这个问题，重新标记环节需要从头开始扫描。由于重新标记阶段依然得STW，从CMS诞生为止，没有任何一个jdk将CMS作为垃圾收集方案，那么用那么多精力学习CMS和三色标记有什么用。并不是三色标记算法有问题，问题发生在cms采用的IncrementalUpdate算法</p><h2 id="什么都不干的垃圾回收器-Epsilon"><a href="#什么都不干的垃圾回收器-Epsilon" class="headerlink" title="什么都不干的垃圾回收器 Epsilon"></a>什么都不干的垃圾回收器 Epsilon</h2><p>Epsilon是jdk11之后提供的一个垃圾收集器，它相较其他收集器更为特殊。处理内存分配但不进行回收，java堆耗尽后jvm关闭</p><p>当能准确预估程序并不会产生过多垃圾或手动进行管理，以求最高性能运行时，可选择该垃圾收集器，通常用于测量和管理程序。</p><h1 id="最主流的垃圾收集器-G1"><a href="#最主流的垃圾收集器-G1" class="headerlink" title="最主流的垃圾收集器 G1"></a>最主流的垃圾收集器 G1</h1><p><img src="http://cdn.zsenhe.com/964541f63a4849669744eee4dd25df31" alt="20230825235424image.png"></p><p>G1摒弃了以前的分代模型，将内存分为不固定大小的多块区域，每个区域都可以作为eden空间，old空间….(物理上不再分代，但逻辑上依然分代)。根本上的转变使得它衡量标准不再是对象属于哪个分代，而是哪块内存存放的多，回收的收益越大，这就是G1的混合GC模式</p><p>其中Humongous作为连续的内存专门用于存放大对象</p><p><strong>Region的取值范围为 1M ~ 32M</strong></p><p><strong>Region的默认个数为 2048个</strong></p><p>G1的问题在于每次回收要将年轻代的内存全部回收，当年轻代的内存较大时，一次YGC产生的STW时间较长,因此诞生了ZGC</p><h1 id="ZGC"><a href="#ZGC" class="headerlink" title="ZGC"></a>ZGC</h1><p>ZGC采用了分页算法，也是Golang垃圾回收所采用的算法。它相较G1支持TB级别的内存，最大GC停顿10ms，且内存增大的同时停顿时间不会增长，对吞吐量的影响不超过15%</p><p>它与G1一样采用了内存分块，但动态分配使得可以有1m,2m的region，且不再分年轻代老年代，在固定时间内触发gc</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GC垃圾回收及历史演进</title>
      <link href="/2023/08/24/GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%8F%8A%E5%8E%86%E5%8F%B2%E6%BC%94%E8%BF%9B/"/>
      <url>/2023/08/24/GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%8F%8A%E5%8E%86%E5%8F%B2%E6%BC%94%E8%BF%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="GC及历史演进"><a href="#GC及历史演进" class="headerlink" title="GC及历史演进"></a>GC及历史演进</h1><h1 id="栈和堆"><a href="#栈和堆" class="headerlink" title="栈和堆"></a>栈和堆</h1><p>在程序开发中最难以调试的问题莫过于野指针和并发问题。</p><p>野指针即是同一个对象，有着多个指针引用，当对象在某一处释放掉了而另一处还不知情依旧使用;或者是不再指向任何对象的指针，也是在java中最为经典的NullPointerExcetion</p><p>那么它是怎么产生的呢？大多语言在运行期间内存中的表现都有着栈，堆这两个概念</p><p>如下面这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">       <span class="type">Object</span> <span class="variable">p</span> <span class="operator">=</span> o;</span><br><span class="line">       out(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        print(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/688d2f90076148f3801b99df09ce644c" alt="20230825003845image.png"></p><p>如对于java，每个线程对应一个栈，栈中存放着方法的路径引用，而堆是作为动态分配的区域，存放着不同指针指向的实际资源。</p><p>对于图中指针o,p的引用，如果在print之前发生了其他事（如指向的对象在堆中被其他数据覆盖，或是print之前释放掉了o指向的资源…..)，就会造成空指针或野指针的问题</p><p>再来说说并发问题，这个就是老生常谈了，即多个线程栈同时访问一块内存空间</p><p>如果单一的问题还不是最糟糕，那么两者结合就是地狱了</p><h2 id="语言的发展历史"><a href="#语言的发展历史" class="headerlink" title="语言的发展历史"></a>语言的发展历史</h2><p>语言的发展很大原因是这两部分在推进，最开始c&#x2F;c++使用手动管理内存，通过malloc()申请内存，使用后通过free()释放掉，但程序不是一条路走到黑，它可能有着数以上百的运行分支，那么释放内存分配内存的时机会造成各种各样的bug。如忘记释放造成内存泄漏，释放多次，野指针满天飞等情况</p><p>于是，紧跟着产出了一些内存管理方便的语言，如Go&#x2F;Python&#x2F;Java。当然并不是说就完全没有了野指针空指针等问题，而是引入了GC的概念-Gabarge Collector。也就是垃圾收集器</p><p>以前我们不止需要分配对象，还得负责释放对象，而GC的引入便是负责了后者的工作，我们只管分配，回收释放的工作交给GC，极大的提升了开发效率</p><p>别高兴的太早了，不管是java还是go，依然没有解决空指针野指针的问题。虽然在java中有着Options等处理空指针的类，但根本上并没有解决，我们的代码中还是充斥着大量的if(obj!&#x3D;null)。而且gc会占用cpu资源，这导致它们的执行效率不如c&#x2F;c++</p><h2 id="什么是垃圾-garbage"><a href="#什么是垃圾-garbage" class="headerlink" title="什么是垃圾(garbage)?"></a>什么是垃圾(garbage)?</h2><p>既然将内存释放的工作交给GC了，那么怎么定义垃圾呢?在程序运行过程中，没有任何指针引用的肯定就是垃圾了，但怎么定位垃圾呢，其中有多种方式</p><blockquote><p>Reference count 引用计数法</p><p>它的核心思维是使用一个计数器来标识对象被多少个指针所使用，当为0时即确定为垃圾进行回收。</p></blockquote><p>python就使用了这种方式，但引入计数法存在着问题</p><p><img src="http://cdn.zsenhe.com/4533794e9ba44bb4a849a3f8e19760fa" alt="20230825011638image.png"></p><p>如上图这样的情况，三个对象都引用了另一个对象，但没有任何外部指针来引用其中的一个</p><p>这样三个垃圾互相指向，如果使用计数法无法定位其中任何一个垃圾，所以java并没有采用这样的方式</p><blockquote><p>Root Searching 根可达算法</p><p>java采用的是根可达算法，其通过一系列名为”Gc Roots”的对象作为出发点，从这些节点开始往下搜索，搜索走过的路径称为引用链，当一个对象到Gcroots没有任何引用链相连时，则证明该对象是不可用的</p></blockquote><p>其中能作为根节点的对象有很多</p><blockquote><p>(1). 虚拟机栈（栈帧中的局部变量区，也叫做局部变量表）中引用的对象。</p><p>(2). 方法区中的类静态属性引用的对象。</p><p>(3). 方法区中常量引用的对象。</p><p>(4). 本地方法栈中JNI(Native方法)引用的对象。</p></blockquote><p>其中任何一项拎出来都能啃半天，最简单的即是，main入口方法中任何变量都能算根</p><h2 id="常用的垃圾回收算法和垃圾回收器"><a href="#常用的垃圾回收算法和垃圾回收器" class="headerlink" title="常用的垃圾回收算法和垃圾回收器"></a>常用的垃圾回收算法和垃圾回收器</h2><p>当我们知道了什么是垃圾后，就得把它清掉了，常见的垃圾清除算法有三种</p><blockquote><p>Mark-Sweep标记清除</p><p>它分为标记和清除两个阶段，通过根可达算法标记所有的垃圾，在标记完成后统一进行清除。</p><p><img src="http://cdn.zsenhe.com/eff08c7df7ea4eaa90e66bc91629eb43" alt="20230825014059image.png"></p><p>这种清除方式有一个问题，那就是在多次标记清除之后，内存碎片化严重，当一次性需要分配大块的内存空间时，会触发新一次的垃圾收集动作</p></blockquote><hr><blockquote><p>Copying 复制算法</p><p>复制算法针对标记清除算法的缺点，在其基础上进行了改进。它将内存可用容量分割为大小相等的两块，每次只使用其中一块，当上面的内存用完了，将存活的对象复制到另一块中，再把原先已使用的内存进行一次性清除</p><p><img src="http://cdn.zsenhe.com/a687ae7cdc95458c8ef103f93c83eae7" alt="20230825015336image.png"></p><p>它的缺点也很明显，每次只是用1&#x2F;2，可用内存少了整整一半！</p></blockquote><p>为了解决copying算法的缺陷，充分利用内存空间，提出了Mark-Compact算法</p><blockquote><p>标记-整理算法 (Mark-Compact)</p><p>该算法标记阶段和Mark-Sweep一样，但不同的是在标记完成之后会闲将存活对象都向一端移动，然后清理存活对象边界以外的垃圾</p><p><img src="http://cdn.zsenhe.com/e6b1bc5cdbf24862986a545ee713a329" alt="20230825015716image.png"></p><p>当然，缺点就是效率比其他两种低了很多，毕竟除了标记动作，还得进行存活对象的排列移动</p></blockquote><p>那么jvm的GC是怎么做的呢？如果将内存当做只有一块可使用的话，三种算法都有缺点。jvm将一整块内存区域划分为不同的块综合应用不同的回收算法</p><h2 id="GC垃圾回收器的演化过程"><a href="#GC垃圾回收器的演化过程" class="headerlink" title="GC垃圾回收器的演化过程"></a>GC垃圾回收器的演化过程</h2><p>jvm将堆内存分区为 新生代（new) 和老年代(old)</p><p><img src="http://cdn.zsenhe.com/8e2b076dac904c3783103c7b1b40ff82" alt="20230825020358image.png"></p><p>刚诞生的对象优先往新生代存放，每个对象都有自己的“年龄”，当新生代中的对象经历过一次垃圾回收后还存活，那么它的年龄+1，当其年龄超过某个阈值，那么就是老东西了，往老年代移动</p><p>在新生代中采用Copying算法，老年代采用Mark-Compact算法</p><p>新生代中的垃圾回收称为YG，一次性的回收可能回收到90%的对象，100个对象我只剩下10个对象存活，只分成两块是不是太浪费了？于是在分代模型中，比例为8:1:1，占8成的区域称为伊甸(eden)，生命诞生的地方，刚分配的对象会被存放在这里，垃圾回收后存活的存放至占1的survivor区域，伊甸剩下的对象全部清除，在下一次回收中，同时扫描前两个区域，存活的对象搬至第二个Survivor，如此往复。装不下了或是年龄到某个阈值了，迁到老年。当老年代区域满了会触发全区的gc</p><p>说回垃圾收集器，GC的演化随着内存大小的不断增进而推进</p><p>在只有几m到几十m的时候，只需要Serial收集器</p><blockquote><p><img src="http://cdn.zsenhe.com/3fa74a6ffb4e4e3d979c0c7097fcda70" alt="20230825023056image.png"></p><p>Serial收集器</p><p>Serial(串行)收集器是历史最悠久的垃圾收集器。在jdk1.3之前它是年轻代唯一的收集器，它是一个单线程收集器，它只会使用一条垃圾收集线程去完成工作，在它工作的时候会暂停掉所有的工作线程，称为STW（Stop The World），直到它收集结束世界才会重启</p><p>这也意味着它在工作的时候会给用户带来卡顿现象造成不良的体验，由于没有线程之间的交互开销，自然可以获得高效的效率</p></blockquote><p>Serial收集器在老年代和新生代的工作方式相同，不同的只是在年轻代中使用复制算法，后者则使用标记-整理算法</p><p>后面内存增长到上百兆甚至1G了，如果依然使用Serial收集器，那可能得忍受程序暂停半小时这样的问题，这个时候ParNew出现了，它采用了多线程并行的垃圾收集</p><p>工作在年轻代的ParNew叫做Parallel Scavenge，工作在老年代的ParNew称为Parallel Old。简称PS+PO，在1.8中，如果没有过任何设置，这是默认的垃圾回收器方案</p><p>ParNew不止使用了多线程提高效率，它更关注的是吞吐量（高效率的利用CPU，也指系统在一个单位时间内可承受的请求数量，表现了系统的承压能力）</p><p>慢慢的，内存增长到了上百G，这个时候发现想要提高垃圾回收的效率就牵扯到了操作系统的一个问题</p><blockquote><p>线程数越多效率就越高吗？</p></blockquote><p>答案是不一定，多线程并不意味着真正的同时运行。而是cpu时间片的切换，一个cpu同时只能运行一个线程，16核的cpu同时运行16个线程，这个时候你来了一百个线程，徒增了许多切换的开销不说，对效率并没有作用，甚至线程切换所占的资源超过了线程运行。</p><p>所以到了这个时候，增加多的线程并不会提高多大的效率，这个时候，诞生了</p><blockquote><p>Concurrent GC</p></blockquote><p>后面所产生的包括CMS，G1，ZGC都来自于Concureent</p><p>Concurrent让GC线程和工作线程可以同时运行，也就是并发。在这之前，GC一运行其他工作线程都得STW。也可以理解为，程序一边工作GC一边清理垃圾</p><p>这就是GC回收的历史演进了，当掌握了大概的体系，后面就可以开始对细节的探究及调优了</p><p>参考:</p><p><a href="https://www.bookstack.cn/read/gc-handbook/">介绍 - 《GC参考手册-Java版》 - 书栈网 · BookStack</a></p><p><a href="https://www.bilibili.com/video/BV1fe411A7JQ">JVM调优实战1-7p</a></p><p><a href="https://blog.csdn.net/hyb612/article/details/103777129">多线程就一定快吗？天真！_线程越多越快吗_守望之名的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq522044637/article/details/124863705">什么是QPS、TPS、吞吐量？- 高并发名词概念_吞吐量qps_一边学习一边哭的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/ccuaman/article/details/107067222">垃圾回收的三种算法_垃圾回收算法_vvuz2的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_39691723/article/details/121379180">根可达性算法：是什么、怎么做、为什么_根可达算法_键盘上のDancer的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/W_J_F_/article/details/82778565">C++ ：引用计数(reference count) 实现_c++引用计数的实现_WangJ_F_的博客-CSDN博客</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1.16+的forge与bukkit通信</title>
      <link href="/2023/08/18/1.16+%E7%9A%84forge%E4%B8%8Ebukkit%E9%80%9A%E4%BF%A1/"/>
      <url>/2023/08/18/1.16+%E7%9A%84forge%E4%B8%8Ebukkit%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>关于forge和bukkit通信，查阅了很多资料发现大多都已经过时，或是不详细。自己折腾了一番，记录一下</p><blockquote><p>forge 接收方</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Mod(&quot;story_hud_show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StoryHudShow</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> SimpleChannel channel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">222</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] data = &#123;<span class="string">&quot;23456&quot;</span>,<span class="string">&quot;星期天14日&quot;</span>,<span class="string">&quot;上午9:00&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StoryHudShow</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">(<span class="keyword">final</span> FMLCommonSetupEvent event)</span></span><br><span class="line">    &#123;</span><br><span class="line">        channel = NetworkRegistry.ChannelBuilder.named(<span class="keyword">new</span> <span class="title class_">ResourceLocation</span>(<span class="string">&quot;story_hud_show&quot;</span>, <span class="string">&quot;main_channel&quot;</span>))</span><br><span class="line">                .networkProtocolVersion(() -&gt; <span class="string">&quot;bzdo&quot;</span>)</span><br><span class="line">                .serverAcceptedVersions(NetworkRegistry.ACCEPTVANILLA::equals)</span><br><span class="line">                .clientAcceptedVersions(NetworkRegistry.ACCEPTVANILLA::equals)</span><br><span class="line">                .simpleChannel();</span><br><span class="line">        channel.registerMessage(idx,String.class,<span class="built_in">this</span>::enc,<span class="built_in">this</span>::dec,<span class="built_in">this</span>::proc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">enc</span><span class="params">(String str, FriendlyByteBuf buffer)</span> &#123;</span><br><span class="line">        buffer.writeBytes(str.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">dec</span><span class="params">(FriendlyByteBuf buffer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> buffer.toString(StandardCharsets.UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">proc</span><span class="params">(String str, Supplier&lt;NetworkEvent.Context&gt; supplier)</span> &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        data = str.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        NetworkEvent.<span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> supplier.get();</span><br><span class="line">        context.setPacketHandled(<span class="literal">true</span>);</span><br><span class="line">        channel.reply(<span class="string">&quot;rpl&quot;</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ChannelBuilder用于构建一个频道，显而易见是一个工厂类，所示代码中用到的方法解释如下</p><blockquote><p>named 其中需传入一个ResourceLocation，如资源文件一般的引用方式 namespace:path<br>networkProtocolVersion 为网络协议版本<br>server||client AcceptedVersion 参数为NetworkRegistry.ACCEPTVANILLA::equals表示允许未安装forge的原版客户端进入<br>最后使用simpleChannel得到SimpleChannel对象</p></blockquote><p>SimpleChannel就是我们的主角了，接下来使用registerMessage注册完消息种类</p><blockquote><p>channel.registerMessage(idx,String.class,this::enc,this::dec,this::proc);</p></blockquote><p>其中,idx用于区分不同的消息类型;第二个参数为数据类型,在示例中使用String;后面跟着的分别是编码和解码的处理方法<br>如此，我们便完成了消息频道的注册，proc便是接收消息的处理了，其中的channel.reply为接收到消息后，对服务端的回复<br>（其实不写也无关紧要，只是会刷报错不雅观，当然玩家也看不到）</p><blockquote><p>bukkit 发送方</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">StarHudServerPackPlugin</span> <span class="keyword">extends</span> <span class="title class_">JavaPlugin</span> <span class="keyword">implements</span> <span class="title class_">Listener</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">222</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="string">&quot;star_hud_show:main_channel&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEnable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Plugin startup logic</span></span><br><span class="line">        getServer().getMessenger().registerIncomingPluginChannel(<span class="built_in">this</span>,channel,(channel,player,message)-&gt;&#123;</span><br><span class="line">            getLogger().info(<span class="string">&quot;received message from client&quot;</span>);</span><br><span class="line">            getLogger().info(message.toString());</span><br><span class="line">        &#125;);</span><br><span class="line">        getServer().getMessenger().registerOutgoingPluginChannel(<span class="built_in">this</span>, channel);</span><br><span class="line">        getServer().getPluginManager().registerEvents(<span class="built_in">this</span>, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(Player player, String msg)</span> &#123;</span><br><span class="line">        msg = <span class="string">&quot;23846&quot;</span>+<span class="string">&quot;/&quot;</span>+<span class="string">&quot;星期天14日&quot;</span>+<span class="string">&quot;/&quot;</span>+<span class="string">&quot;上午9:00&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = msg.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> Unpooled.buffer(bytes.length + <span class="number">1</span>);</span><br><span class="line">        buf.writeByte(idx);</span><br><span class="line">        buf.writeBytes(bytes);</span><br><span class="line">        player.sendPluginMessage(<span class="built_in">this</span>, channel, buf.array());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] array)</span> &#123;</span><br><span class="line">        <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> Unpooled.wrappedBuffer(array);</span><br><span class="line">        <span class="keyword">if</span> (buf.readUnsignedByte() == idx) &#123;</span><br><span class="line">            <span class="keyword">return</span> buf.toString(StandardCharsets.UTF_8);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventHandler</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onJoin</span><span class="params">(PlayerJoinEvent event)</span>&#123;</span><br><span class="line">        <span class="type">Player</span> <span class="variable">player</span> <span class="operator">=</span> event.getPlayer();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;? <span class="keyword">extends</span> <span class="title class_">CommandSender</span>&gt; senderClass = player.getClass();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">addChannel</span> <span class="operator">=</span> senderClass.getDeclaredMethod(<span class="string">&quot;addChannel&quot;</span>, String.class);</span><br><span class="line">            addChannel.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            addChannel.invoke(player, channel);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Bukkit.getScheduler().runTaskLater(<span class="built_in">this</span>,</span><br><span class="line">                () -&gt; send(player, <span class="string">&quot;23846&quot;</span>+<span class="string">&quot;/&quot;</span>+<span class="string">&quot;星期天14日&quot;</span>+<span class="string">&quot;/&quot;</span>+<span class="string">&quot;上午9:00&quot;</span>), <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDisable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Plugin shutdown logic</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bukkit的代码就较为熟悉了，其中疑惑是这个丑陋的反射是怎么回事？<br>原因是在1.13之后的版本，forge客户端不会在加入前向服务器注册消息通道，只能用反射假装我们已经收到了register包hh</p><p>有了forge和bukkit通信，可以做到很多有意思的事情，且负荷都在客户端，服务端只需发个包就好了。那些付费的龙核,vv等也都是一样的原理<br>比如说，用hud展示服务器信息，这可比计分板优雅多了<br><img src="http://cdn.zsenhe.com/235cb63e49894fffab04df89df9c88be" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cdnjs.cloudflare的替代解决方案</title>
      <link href="/2023/08/14/cdnjs.cloudflare%E7%9A%84%E6%9B%BF%E4%BB%A3%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2023/08/14/cdnjs.cloudflare%E7%9A%84%E6%9B%BF%E4%BB%A3%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>最近网站出现了markdown无法渲染等奇奇怪怪的问题。<br>排查之下发现是由于cdnjs.cloudflare被屏蔽了无法访问导致包括markdown渲染在内的一系列js文件无法载入</p><p>解决方法是将所有js里的cdnjs.cloudflare替换为cdnjs.loli.net&#x2F;，其中包括了前者在内的所有开源库</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>实现微信小游戏广告中的“武器围着小人转”</title>
      <link href="/2023/08/10/%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%B9%BF%E5%91%8A%E4%B8%AD%E7%9A%84%E2%80%9C%E6%AD%A6%E5%99%A8%E5%9B%B4%E7%9D%80%E5%B0%8F%E4%BA%BA%E8%BD%AC%E2%80%9D/"/>
      <url>/2023/08/10/%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%B9%BF%E5%91%8A%E4%B8%AD%E7%9A%84%E2%80%9C%E6%AD%A6%E5%99%A8%E5%9B%B4%E7%9D%80%E5%B0%8F%E4%BA%BA%E8%BD%AC%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.zsenhe.com/13ebbd5a7d714f10a999a2dba26298ee" alt="http://cdn.zsenhe.com/13ebbd5a7d714f10a999a2dba26298ee"><br>都看过这种广告吧，武器围着小人转圈圈，被武器碰到的小怪就扣血。看着很有意思，手痒尝试着用现有的知识实现一个<br>就不花时间去学习游戏引擎了，用纯原生js+canvas库做一个网页版的小实现吧<br>首先在canvas上将玩家操控的主角画出来，贴图就不做了，直接上圆点吧</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dddemo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">canvas</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;gameMap&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> canvas  = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;gameMap&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 通过画布宽高取得中心点坐标</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> cX = canvas.<span class="property">width</span>/<span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> cY = canvas.<span class="property">height</span>/<span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 圆点(人物)的半径</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> r = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 让每一帧都调用draw函数更新画面</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 清除画布上所有像素</span></span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">400</span>,<span class="number">400</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 画圆</span></span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">arc</span>(cX,cY,r,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="property">fillStyle</span> = <span class="string">&quot;black&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">fillText</span>(<span class="string">&quot;我是人物&quot;</span>,cX-<span class="number">10</span>,cY-<span class="number">12</span>,<span class="number">800</span>);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">fill</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 重复绘制</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">requestAnimationFrame</span>(draw);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">draw</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="http://cdn.zsenhe.com/739ce0803c3c45d8948c6d7b6533f117" width="512px"><p>接下来最重要的就是他边上的武器了，剑呢？就不画了，直接拿根线条代替吧</p><blockquote><p>CanvasRenderingContext2D.lineTo() 是 Canvas 2D API 使用直线连接子路径的终点到 x，y 坐标的方法</p></blockquote><p>子路径即是圆点所在的坐标，那么x,y目标坐标呢？我们可以使用三角函数来进行计算<br>设(cx,cy)为圆心所在的坐标，ang为弧度制的角（初始为0），每次draw执行的时候都更新角+speed(速度)<br>根据三角函数与弧度制，cos(ang) &#x3D; x&#x2F;圆半径，而这里的圆半径就是线的长度，因此线的坐标为<br>x &#x3D; cos(ang)*r，加上cX的偏移量,y轴同理；于是可以推导出线的坐标为<br>(cX+cos(ang)*线长度,cY+sin(ang)*线长度)<br>ok，写出相应的代码实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dddemo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">canvas</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;gameMap&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> canvas  = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;gameMap&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 通过画布宽高取得中心点坐标</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> cX = canvas.<span class="property">width</span>/<span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> cY = canvas.<span class="property">height</span>/<span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 圆点(人物)的半径</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> r = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 当前角</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> ang = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 让每一帧都调用draw函数更新画面</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 清除画布上所有像素</span></span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">400</span>,<span class="number">400</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 画圆</span></span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">arc</span>(cX,cY,r,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="property">fillStyle</span> = <span class="string">&quot;black&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">fillText</span>(<span class="string">&quot;我是人物&quot;</span>,cX-<span class="number">10</span>,cY-<span class="number">12</span>,<span class="number">800</span>);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">fill</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(ang);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(cX+<span class="string">&quot;/&quot;</span>+cY+<span class="string">&quot;/圆坐标&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 线的坐标</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> lx = cX + <span class="title class_">Math</span>.<span class="title function_">cos</span>(ang)*<span class="number">80</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> ly = cY + <span class="title class_">Math</span>.<span class="title function_">sin</span>(ang)*<span class="number">80</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">cos</span>(ang)+<span class="string">&quot;/&quot;</span>+<span class="title class_">Math</span>.<span class="title function_">sin</span>(ang));</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;-----&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 设置子路径(起始坐标)</span></span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">moveTo</span>(cX,cY);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">lineTo</span>(lx,ly);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 更新角度</span></span></span><br><span class="line"><span class="language-javascript">ang += <span class="number">0.03</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 重复绘制</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">requestAnimationFrame</span>(draw);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">draw</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><video src="http://cdn.zsenhe.com/bandicam%202023-08-10%2020-14-26-858.mp4" width=400px; height=500px controls></video><br>ok，现在它会动了，接下来要让他移动。由于“武器”和“人物”的绘制都是根据圆心坐标来的，我们只需要监听wasd更改圆心的坐标就完事了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&quot;keydown&quot;, handlerMove);</span><br><span class="line"></span><br><span class="line">       function handlerMove(event) &#123;</span><br><span class="line">           var key = event.key;</span><br><span class="line"></span><br><span class="line">           switch(key) &#123;</span><br><span class="line">               case &quot;w&quot;:</span><br><span class="line">                   cY -= 5;</span><br><span class="line">                   break;</span><br><span class="line">               case &quot;a&quot;:</span><br><span class="line">                   cX -= 5;</span><br><span class="line">                   break;</span><br><span class="line">               case &quot;s&quot;:</span><br><span class="line">                   cY += 5;</span><br><span class="line">                   break;</span><br><span class="line">               case &quot;d&quot;:</span><br><span class="line">                   cX += 5;</span><br><span class="line">                   break;</span><br><span class="line">               default:</span><br><span class="line">                   break;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>效果如下:<br><video src="http://cdn.zsenhe.com/bandicam%202023-08-10%2020-35-19-613.mp4" width=400px; height=500px controls></video></p><p>接下来我们设置几个敌人,敌人就用绿色的球球表示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dddemo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">canvas</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;gameMap&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> canvas  = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;gameMap&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 通过画布宽高取得中心点坐标</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> cX = canvas.<span class="property">width</span>/<span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> cY = canvas.<span class="property">height</span>/<span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 圆点(人物)的半径</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> r = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 当前角</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> ang = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> mX = cX+<span class="number">128</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> mY = cY+<span class="number">128</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> mR = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>, handlerMove);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">handlerMove</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> key = event.<span class="property">key</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">switch</span>(key) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">case</span> <span class="string">&quot;w&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">                    cY -= <span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">case</span> <span class="string">&quot;a&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">                    cX -= <span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">case</span> <span class="string">&quot;s&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">                    cY += <span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">case</span> <span class="string">&quot;d&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">                    cX += <span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">default</span>:</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 让每一帧都调用draw函数更新画面</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 清除画布上所有像素</span></span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">400</span>,<span class="number">400</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 画圆</span></span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">arc</span>(cX,cY,r,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="property">fillStyle</span> = <span class="string">&quot;black&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">fillText</span>(<span class="string">&quot;我是人物&quot;</span>,cX-<span class="number">10</span>,cY-<span class="number">12</span>,<span class="number">800</span>);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">fill</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 线的坐标</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> lx = cX+<span class="title class_">Math</span>.<span class="title function_">cos</span>(ang)*<span class="number">80</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> ly = cY+<span class="title class_">Math</span>.<span class="title function_">sin</span>(ang)*<span class="number">80</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;圆坐标:(&quot;</span>+cX+<span class="string">&quot;,&quot;</span>+cY+<span class="string">&quot;)&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;角:&quot;</span>+ang+<span class="string">&quot;cos:&quot;</span>+<span class="title class_">Math</span>.<span class="title function_">cos</span>(ang));</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;角:&quot;</span>+ang+<span class="string">&quot;sin:&quot;</span>+<span class="title class_">Math</span>.<span class="title function_">sin</span>(ang));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 设置子路径(起始坐标)</span></span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">moveTo</span>(cX,cY);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">lineTo</span>(lx,ly);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 更新角度</span></span></span><br><span class="line"><span class="language-javascript">ang += <span class="number">0.03</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">arc</span>(mX,mY,mR,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="property">fillStyle</span> = <span class="string">&quot;green&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">fillText</span>(<span class="string">&quot;我是敌人&quot;</span>,mX-<span class="number">10</span>,mY-<span class="number">12</span>,<span class="number">800</span>);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">fill</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 重复绘制</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">requestAnimationFrame</span>(draw);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">draw</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来在draw函数中，计算线与敌人的距离，两点间的距离公式</p><blockquote><p>var dis &#x3D; Math.sqrt(Math.pow((lx - mX), 2) + Math.pow((ly - mY), 2));</p></blockquote><p>当被线击中时，敌人颜色变为红色，300毫秒后恢复绿色</p><p><img src="http://cdn.zsenhe.com/6e54e113245a433db945d2c36646c607" alt="image.png"><br>稍微整理一下代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dddemo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">canvas</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;gameMap&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> canvas  = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;gameMap&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 通过画布宽高取得中心点坐标</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> cX = canvas.<span class="property">width</span>/<span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> cY = canvas.<span class="property">height</span>/<span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 圆点(人物)的半径</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> r = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 当前角</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> ang = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> mX = cX+<span class="number">128</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> mY = cY+<span class="number">128</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> mR = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> mC = <span class="string">&quot;green&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> mH = <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>, handlerMove);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">handlerMove</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> key = event.<span class="property">key</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">switch</span>(key) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">case</span> <span class="string">&quot;w&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">                    cY -= <span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">case</span> <span class="string">&quot;a&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">                    cX -= <span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">case</span> <span class="string">&quot;s&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">                    cY += <span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">case</span> <span class="string">&quot;d&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">                    cX += <span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">default</span>:</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 让每一帧都调用draw函数更新画面</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 清除画布上所有像素</span></span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">400</span>,<span class="number">400</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 画圆</span></span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">arc</span>(cX,cY,r,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="property">fillStyle</span> = <span class="string">&quot;black&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">fillText</span>(<span class="string">&quot;我是人物&quot;</span>,cX-<span class="number">10</span>,cY-<span class="number">12</span>,<span class="number">800</span>);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">fill</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 线的坐标</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> lx = cX+<span class="title class_">Math</span>.<span class="title function_">cos</span>(ang)*<span class="number">80</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> ly = cY+<span class="title class_">Math</span>.<span class="title function_">sin</span>(ang)*<span class="number">80</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;圆坐标:(&quot;</span>+cX+<span class="string">&quot;,&quot;</span>+cY+<span class="string">&quot;)&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;角:&quot;</span>+ang+<span class="string">&quot;cos:&quot;</span>+<span class="title class_">Math</span>.<span class="title function_">cos</span>(ang));</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;角:&quot;</span>+ang+<span class="string">&quot;sin:&quot;</span>+<span class="title class_">Math</span>.<span class="title function_">sin</span>(ang));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 设置子路径(起始坐标)</span></span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">moveTo</span>(cX,cY);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">lineTo</span>(lx,ly);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 更新角度</span></span></span><br><span class="line"><span class="language-javascript">ang += <span class="number">0.03</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(mH&gt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">arc</span>(mX,mY,mR,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">context.<span class="property">fillStyle</span> = mC;</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">fillText</span>(<span class="string">&quot;敌人 血量:&quot;</span>+mH+<span class="string">&quot;/100&quot;</span>,mX-<span class="number">10</span>,mY-<span class="number">12</span>,<span class="number">800</span>);</span></span><br><span class="line"><span class="language-javascript">context.<span class="title function_">fill</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> dis = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>((lx - mX), <span class="number">2</span>) + <span class="title class_">Math</span>.<span class="title function_">pow</span>((ly - mY), <span class="number">2</span>));</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(dis&lt;mR)&#123;</span></span><br><span class="line"><span class="language-javascript">mC = <span class="string">&quot;red&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">mH = mH-<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(mH&lt;=<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">mH = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">mR = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">mC = <span class="string">&quot;green&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="number">300</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 重复绘制</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">requestAnimationFrame</span>(draw);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">draw</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整的效果如下:<br><video src="http://cdn.zsenhe.com/dddddemo.mp4" width=400px; height=500px controls></video></p><p>溜了，等我画好贴图整个小游戏出来</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ip地址划分与子网掩码</title>
      <link href="/2023/08/09/ip%E5%9C%B0%E5%9D%80%E5%88%92%E5%88%86%E4%B8%8E%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81/"/>
      <url>/2023/08/09/ip%E5%9C%B0%E5%9D%80%E5%88%92%E5%88%86%E4%B8%8E%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="ip地址的划分"><a href="#ip地址的划分" class="headerlink" title="ip地址的划分:"></a>ip地址的划分:</h2><p>ip的范围是0.0.0.0~255.255.255.255,它的由来是32位的二进制。为了方便记忆将他们拆分为四组(以.分割)，每组由8位二进制组成</p><blockquote><p>a类 1.0.0.1 ~ 126.255.255.254</p><p>0&lt;a类&lt;127 128个大网段</p><p>b类 128.0.0.1~192.255.255.254</p><p>128&lt;&#x3D;b类&lt;192 64个大网段</p><p>c类 192.0.0.1 ~ 223.255.255.254 32个大网段</p><p>d类 组播,vrrp协议,keepalive高可用224~239</p><p>e类 科研240…~255….</p></blockquote><p>(00000000)bit全1下为(255)dec(2^8&#x3D;255),于是最大就只能取到255.255.255.255</p><p>照这样推算，总的ip地址量约有43e个，而全球人口有80e之多。且不提不够人手一个ip地址，现如今一个人也不止一台设备需要上网，那么怎么解决这个问题呢?</p><p>为了缓解ipv4地址耗尽，诸多的技术应运而生</p><h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><p>NAT全程为Network Address Translation,意为网络地址转换，当内网用户访问公文时，如果网关设备(路由器)部署了NAT，设备会将接收到的IP数据报文中的IP地址转换为一个唯一的ip转发给公网。因此设备可以用一个公网地址来转换多个内网用户发过来的数据包报文，从而达到地址复用的目的</p><p>在如今，最小的局域网都能支持上千万台设备进行访问。现如今家庭使用的宽带也是一个链接了无数个用户的大型局域网</p><h2 id="内网ip网段"><a href="#内网ip网段" class="headerlink" title="内网ip网段:"></a>内网ip网段:</h2><p>a 10.0.0.0~10.255.255.255</p><p>b 176.16.0.0~172.31.255.255</p><p>c 192.168.0.0~192.168.255.255</p><p>除了内网网段以外，都属于公网。</p><p>一般路由器仅分配c类网段使用，最大65536，这就够用了</p><h2 id="iPV6"><a href="#iPV6" class="headerlink" title="iPV6:"></a>iPV6:</h2><p>就算使用了NAT技术，ipv4地址也总有耗尽的一天。如上文所述，ipv4的长度是32位，那么用更多的位数不就好了？这就是IPV6了</p><p>IPV6有着128位的长度，它号称能给予全球的每一颗沙子一个ip地址</p><blockquote><p>fe80::2c4:3412:e85c:a787%3</p></blockquote><p>在16进制下，它的表示范围比ipv4多的多，但作为1996年诞生的标准，直至今日也未能完全普及。从网上摘过来的:</p><blockquote><p><strong>第一：不好管控</strong></p><p>v6时代每台设备都能有独立ip，这也就意味着向公网提供服务的门槛大幅度降低了，也就是说，违法犯罪的成本被降低了。</p><p><strong>第二：难以控制</strong></p><p>IPV6还有一大特点就是全面使用IPSec，数据传输经过加密，安全性大增。但这种情况下会让DNS污染这类手段失效，海量的IP又封不过来。如果这个技术问题解决，IPv6的推广会快很多，而不仅仅只局限于教育网等本身就容易控制的网络。</p><p><strong>第三：大部分路由器依然不支持ipv6</strong></p><p>目前淘宝tplink等低端路由器厂家在售的很多路由器依然不支持v6，有很多家庭用的是营业厅送的光猫和路由器，也不支持v6。是的你没听错，运营商的宽带支持v6但是他给的光猫不支持v6。开启v6支持需要宽带，光猫，路由器和终端这四者同时支持才行，缺一不可。这一点在目前应该是最大的阻力</p><p><strong>第四：总宽带很低</strong></p><p>目前v6处于刚发展阶段，之前广东的v6只能省内访问，出口宽带简直跟没有一样，现在好很多了。</p></blockquote><p>不过我觉得靠谱的说法还是当时陈旧的设备舍不得丢，大家都没着急上ipv6，暂时用nat缓缓，后面再说</p><p>扯了这么多概念，对于单纯的软件开发从业人员来说什么帮助呢，就算不是为了应试，光记住ip段，也大有作用的地方。试想有一天服务蹦了，一看监控，大部分攻击都是从内网网段打出，那么可以很快推断出内部某台服务器可能被渗透当肉鸡了（或者有内鬼？hh)</p><h2 id="子网掩码的作用"><a href="#子网掩码的作用" class="headerlink" title="子网掩码的作用:"></a>子网掩码的作用:</h2><p>子网掩码的作用是决定一个网段的大小，须知只有在同一个网段内才能互相进行通讯</p><p><img src="http://cdn.zsenhe.com/5c44706aff644117bb9e0d2924ec9753" alt="image.png"></p><p>有的时候也会表示成 192.168.19.11&#x2F;24，它表示成二进制</p><p>(11000000 10101000 00010011 00001011)bit</p><p>它可以表示为:</p><p>11111111 11111111 11111111 00000000</p><p>其中前面的24个1为网络位，后面0部分为主机位。</p><blockquote><p>(11111111 11111111 11111111 00000000)bit &#x3D; 255.255.255.0 &#x3D; 24</p></blockquote><p>只要网络位相同，我们称之为同一个网段。根据ip地址加子网掩码，即可以推算出该网段的范围</p><p>如上图的 192.168.1.108&#x2F;24，该网段的可用ip范围</p><blockquote><p>(192.168.1.0 ~ 192.168.1.255)</p><p>注意是开区间，左右端点一般保留作为网络号和广播地址</p><p>实际可用的范围是192.168.1.1 ~ 192.168.1.254</p><p>前者称为起始ip，后者为结束ip</p></blockquote><p>使用CPT来做同网段通讯实验</p><p><img src="http://cdn.zsenhe.com/fc2a548f440541d9adadf5b8603e0593" alt="image.png"></p><p>pc0为:</p><p>192.168.100.126&#x2F;25</p><p>pc1为:</p><p>192.168.100.129&#x2F;25</p><p><img src="http://cdn.zsenhe.com/bd666affba8f4b1bac9bb6fd9a762180" alt="20230809182023image.png"><br>使用PC0pingPC1,结果是<br><img src="http://cdn.zsenhe.com/b327dd7da25d4954b6b2436a06b9c771" alt="20230809182214image.png"><br>为什么ping不通呢，看着是一个网段啊。计算一下两个ip所属的网段</p><blockquote><p>看一下pc0的所在网段</p><p>11000000 10101000 01100100 01111110</p><p>子网掩码: 1…1 1…1 1…1 10000000</p><p>那么pc0的网段ip为 (192.168.100.0,192.168.100.127)</p><p>跟pc1明显不在同一个网段，肯定是ping不通了</p></blockquote><p>将两个设备的子网掩码都改为24，就没问题了<br><img src="http://cdn.zsenhe.com/bc12df4f898a4779b2b3e5282063df3b" alt="20230809183155image.png"><br>不同网段之间的通讯需要借助路由器进行转发</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>osi七层模型与数据的封装解封装</title>
      <link href="/2023/08/08/osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%9A%84%E5%B0%81%E8%A3%85%E8%A7%A3%E5%B0%81%E8%A3%85/"/>
      <url>/2023/08/08/osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%9A%84%E5%B0%81%E8%A3%85%E8%A7%A3%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="设备是怎么上网的？"><a href="#设备是怎么上网的？" class="headerlink" title="设备是怎么上网的？"></a>设备是怎么上网的？</h2><p>每台设备（手机，电脑）带有网卡设备，网卡通过光线连接至交换机（交换机可能有多个），交换机连接至路由器，路由器连接至光猫，光猫通过光纤连接到运营商的设备箱</p><hr><h2 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型:"></a>OSI七层模型:</h2><p><img src="http://cdn.zsenhe.com/2c3e24d3ca384e618d231ca969505f6a" alt="20230808170318image.png"></p><p>在网络通讯中，有着操作系统兼容,多介质,传输目标,安全,保密等问题，解决的方案是所有设备都统一使用一个网络标准，这个标准就是OSI七层模型</p><p>各种通讯协议都是由七层模型设计而出，不同的物理设备使用不同的信号通讯，例如网线发出电信号，光纤发出光信号，wifi发出电磁波信号。</p><p>他们只能发出特定的信号，网线又怎么会知道光纤在说什么呢？这个时候就需要所谓的协议了，规定好光闪三下和电磁波指定的频率段都代表一个意义，那么就能沟通了</p><p>为了解决不同的问题，公有的私有的，整个网络诞生了无数的协议，但无一例外都得遵循osi七层模型</p><p>为了让不同的协议复用，整个模型分为七层，就像名字一样，分别是</p><blockquote><p>物理层 信号转换的问题(数字信号，电信号，光纤)</p><p>数据链接层 mac地址,唯一,物理地址,以太网</p><p>网络层 ip地址，公网ip，定位</p><p>传输层 端口,tcp&#x2F;ip</p><p>会话层 会话</p><p>表示层 文件类型</p><p>应用层 http,ftp,smtp</p></blockquote><h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><p>物理层解决了信号转换的问题，也就解决了多介质的问题。</p><p>不论来自光纤或是wifi，物理层都将之转换为数字信号 (二进制信号)，即01串。数字信号输出的时候又转换为不同介质信号进行通讯</p><h3 id="数字链路层"><a href="#数字链路层" class="headerlink" title="数字链路层"></a>数字链路层</h3><p>而数字链路层的最大作用则是选择传输目标，其中的mac地址又称为物理地址，为每块网卡唯一分配的标识<br>如路由器管理里随便找一台上网设备<br><img src="http://cdn.zsenhe.com/5192936b1529417bb8ee2b74b106b5cc" alt="20230808155642image.png"></p><p>可以通过一些工具查到生产商位置信息等</p><p><img src="http://cdn.zsenhe.com/ac54294f5bb749b28d5dadf561c0e3eb" alt="20230808155709image.png"></p><p>每个设备（网卡）作为互联网的一份子，都拥有一个唯一的标识，那么传输目标的问题不就解决了吗。</p><p>那么怎么称为互联网的一份子呢，经常能听到所谓“入网许可”的词汇，例如每台手机在生产前，都需要通过入网许可，这个过程就是为了获取唯一的mac地址。</p><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>虽然知道了物理地址，但我需要更详细的定位。当被问及地址的时候，我总不能回答我在中国吧，这样会被当成极为幼稚的调侃，网络层中的ip地址即解决了定位的问题。ip地址分为 公网ip,内网ip,也称公网与私网每个公网ip也像物理地址一样是唯一标识，由iana进行分配。内网ip类似酒店的房间地址，像酒店A和酒店B的602属于不同的房间</p><p>综上对于以上三层最基础的理解即是:</p><p><strong>物理层解决了多介质的问题，数据链路层解决了目标选择的问题，网络层解决了定位问题</strong></p><p>作为软件开发而不是网安相关从业人员，想要粗略的了解osi七层模型，下一层的传输层也需要很多笔墨来讲大白话。</p><hr><h2 id="七层模型的传输层"><a href="#七层模型的传输层" class="headerlink" title="七层模型的传输层:"></a>七层模型的传输层:</h2><h3 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h3><p>传输层使用的传输协议分为tcp和udp,tcp是一个可靠的协议,网络的传输可能会经过多个设备,其中可能某个设备环节出了错,那么网络传输是需要容错的,又怎么称之为可靠呢？</p><p>单个数据包可能高达3,4g,而数据包最大仅接受1500byte,在tcp协议下会采用分块的机制。将数据包拆成多个，每次发送都会向目标进行询问是否收到，当目标设备出现接收失败的情况会进行重传，因此tcp协议是可靠的。</p><p>udp类似于发短信，它是不可靠的，udp不需要询问是否确定，因此速度比tcp协议快，一般长距离传输采用udp协议</p><p>综上udp注重效率与实时性。通话，视频直播通常采用udp协议(试想一下，直播如果采用tcp协议，直播过程中卡了一下，重连又重复了一下画面，相比这么鬼畜的场面，还是容许几分钟的丢失比较和谐吧)</p><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>端口则是更细致的定位作用,试想一台服务器上可能会挂载多个服务,而它只有一个公网ip;当接收请求的时候，服务器又是怎么知道将请求分配给哪个进程处理的呢，这就是端口号的作用了</p><p>发送请求时携带一个端口号，当服务器接收到请求时，内核将请求分配给对应端口号的进程处理</p><p>每个程序在启动时都会监听一个端口，如ssh登录使用22端口,mysql挂载在3306端口上等</p><hr><h2 id="会话层，表示层，应用层"><a href="#会话层，表示层，应用层" class="headerlink" title="会话层，表示层，应用层"></a>会话层，表示层，应用层</h2><p>这三层的联系颇大，很多协议都将这三层进行了合并。如应用最广泛的tcp&#x2F;ip协议，它将这三层规划为应用层</p><h3 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h3><p>会话层的基本作用是建立会话关系并保持畅通</p><h3 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h3><p>表示层的作用为标识数据包类型，让目标设备能够正确识别。例如文件发送需要标识类型，如果目标设备不知道它是jpg格式的图片，它就无法正确打开</p><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>见名知意，它负责和各种应用程序打交道，提供下层接口以使程序使用网络服务。例如发送电子邮件，它通过应用层沟通传输层完成工作。</p><hr><h2 id="使用wireshark查看数据包"><a href="#使用wireshark查看数据包" class="headerlink" title="使用wireshark查看数据包"></a>使用wireshark查看数据包</h2><p>访问<a href="http://175.178.152.24/%E5%90%8E%E5%81%9C%E6%AD%A2%E6%8D%95%E8%8E%B7%EF%BC%8C%E5%9C%A8%E8%BF%87%E6%BB%A4%E6%9D%A1%E4%BB%B6%E4%B8%AD%E8%BE%93%E5%85%A5">http://175.178.152.24/后停止捕获，在过滤条件中输入</a><br>ip.addr &#x3D;&#x3D; 175.178.152.24<br><img src="http://cdn.zsenhe.com/a26682c88e284ceeb9f7e2d3573a75c5" alt="20230808172506image.png"></p><p>随便点开一个tcp类型的数据包<br><img src="http://cdn.zsenhe.com/9ba687b2a42d474bb5ef35c27791cf8a" alt="20230808172702image.png"><br>可以在底部看到数据包的信息，第一行是物理层的信息，往下是数据链路层，传输层，应用层（TCP协议）<br>如图，前面除了测试数据包以外，都不是完整的数据包，HTTP类型的才是本次访问的完整数据包<br><img src="http://cdn.zsenhe.com/a639f5fdeea446f68212787d764cb1c6" alt="20230808173032image.png"><br><img src="http://cdn.zsenhe.com/f3064437c1b04cbdb2bd7f90caf0979c" alt="20230808173424image.png"><br>传输层描述了当前访问源的端口号50467,目标端口号80，len表示长度<br><img src="http://cdn.zsenhe.com/7113236e506b4ccf87eba35debfc9af6" alt="20230808173520image.png"><br>再往上便是网络层了，描述源,目标公网ip地址<br><img src="http://cdn.zsenhe.com/515f3ae42b48418784364752b3a80d39" alt="20230808173659image.png"><br>之后是链路层，描述了mac地址<br><img src="http://cdn.zsenhe.com/11170a580b084ac5b6df52d0c8329115" alt="20230808174208image.png"><br>最底部就是应用层了，占了数据包的大部分<br>如果把数据包形容成一份快递，那么应用层的数据就是寄送物品了，前面的数据链路层等或许可以用快递单来比喻<br>这五层也就是TCP的五层模型</p><h2 id="数据的封装与解封装"><a href="#数据的封装与解封装" class="headerlink" title="数据的封装与解封装"></a>数据的封装与解封装</h2><p>以本次http请求为例,数据的传输由应用层往下逐层进行封装,每层的作用如下</p><blockquote><p>应用层: 数据</p><p>传输层: tcp报文+数据</p><p>网络层: ip包+tcp报文+数据</p><p>数据链路层: 数据帧(mac地址)+ip包+tcp报文+数据</p><p>物理层: 将完整的数据包由二进制转换为电信号</p></blockquote><p>接收即是将这个过程倒着做一遍</p><blockquote><p>物理层: 将电信号转换为二进制</p><p>数据链路层: 数据帧(mac地址)+ip包+tcp报文+数据</p><p>&#x2F; 内核查看数据帧，校验mac地址是否正确对应本机</p><p>网络层: ip包+tcp报文+数据</p><p>&#x2F; 网络层校验ip地址,正确则继续解包</p><p>传输层: tcp报文+数据</p><p>&#x2F; 在内存中校验数据包，需要合并则合并</p><p>应用层: 数据包</p><p>&#x2F; 最后 应用层得到完整数据包</p></blockquote><p>这个过程即是数据包的封装和解封装</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql delete语句为表起别称报1064</title>
      <link href="/2023/06/29/delete%E8%AF%AD%E5%8F%A5%E4%B8%BA%E8%A1%A8%E8%B5%B7%E5%88%AB%E7%A7%B0%E6%8A%A51064/"/>
      <url>/2023/06/29/delete%E8%AF%AD%E5%8F%A5%E4%B8%BA%E8%A1%A8%E8%B5%B7%E5%88%AB%E7%A7%B0%E6%8A%A51064/</url>
      
        <content type="html"><![CDATA[<p>考试的时候一道删除记录的题，噼里啪啦三下敲完自信提交。<br>报了1064，调试了好一阵也不知道为什么，边上的同学把别称去了就正常运行了<br>今晚翻别人代码的时候才知道问题出在哪，sql的delete语句不太一样，使用别称时需要在”delete”后标注<br>如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">table</span> t</span><br></pre></td></tr></table></figure><p>需要改成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> t <span class="keyword">from</span> <span class="keyword">table</span> t</span><br></pre></td></tr></table></figure><p>睡了睡了，明天去爬山</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式系统定时任务，如何保证多台服务器之间只执行一次</title>
      <link href="/2023/05/20/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%A4%9A%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E5%8F%AA%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1/"/>
      <url>/2023/05/20/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%A4%9A%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E5%8F%AA%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1/</url>
      
        <content type="html"><![CDATA[<p>场景是这样的，我们有一个模块设定如下</p><blockquote><p>用户通过各种渠道获取积分，每月10号，25号进行一次结算;结算排名存入数据库，排行前列的可获得奖励</p></blockquote><p>因为是分布式架构，多个服务器同时操作积分表，于是就有了脏数据的情况。当a服务器对表进行了一次结算操作，b服务器又对结算后的结果再次进行结算。于是数据就脏掉了，那么怎么费最小的劲避免这个问题呢？我们可以使用mysql的事务加一张临时表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> `SCHEDULED` </span><br><span class="line">(</span><br><span class="line">`end_time` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">`id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT, </span><br><span class="line"><span class="keyword">PRIMARY KEY</span> (`end_time`) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>增加SCHEDULED表来记录每一次排行榜的结算操作，其中字段END_TIME记录结算时的毫秒数;由于每次只会获取下个10号或25号，该字段是百分百唯一且无后效性的</p><p>定时任务的逻辑如下</p><p>表结构:</p><figure class="highlight sql"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.meteor.activetop;</span><br><span class="line"></span><br><span class="line">public enum SQL_MAPPER &#123;</span><br><span class="line"></span><br><span class="line">    CREATE_RACE_SCHEDULED_TABLE(</span><br><span class="line">            &quot;create table `&#123;table_name&#125;` (`end_time` bigint(20) NOT NULL,`id` int(11) NOT NULL AUTO_INCREMENT, PRIMARY KEY (`end_time`) );&quot;</span><br><span class="line">    ),</span><br><span class="line">    IS_EXECUTE_CLOSE_SCHEDULED(</span><br><span class="line">            &quot;select count(*) as cnt from &#123;table_name&#125; where `end_time` = ?;&quot;</span><br><span class="line">    ),</span><br><span class="line">    CREATE_RACE_DATA_TABLE(</span><br><span class="line">      &quot;create table `&#123;table_name&#125;` (`type` varchar(25) NOT NULL , `value` varchar(255) NOT NULL , PRIMARY KEY(`type`));&quot;</span><br><span class="line">    ),</span><br><span class="line">    INSERT_EXECUTE_CLOSE_LOG(</span><br><span class="line">            &quot;insert into `table_name`(`end_time`) values(&#123;end_time&#125;);&quot;</span><br><span class="line">    ),</span><br><span class="line">    CLOSE_SORT(</span><br><span class="line">      &quot;select player from &#123;table_name&#125; where last_active_time &lt;= ? order by `point` desc limit 30;&quot;</span><br><span class="line">    ),</span><br><span class="line">    INSERT_TOP_LOG(</span><br><span class="line">            &quot;insert into &#123;table_name&#125; values(?,?,?,?);&quot;</span><br><span class="line">    ),</span><br><span class="line">    RESET_POINT(</span><br><span class="line">            &quot;update `&#123;table_name&#125;` set `point` = ?;&quot;</span><br><span class="line">    ),</span><br><span class="line">    SAVE_ENDTIME(</span><br><span class="line">            &quot;insert into `&#123;table_name&#125;`(`type`,`value`) values(&#x27;end_time&#x27;,?) on duplicate key update `type`=&#x27;end_time&#x27;,`value`=?;&quot;</span><br><span class="line">    ),</span><br><span class="line">    SELECT_CURRENT_RACE_ENDTIME(</span><br><span class="line">            &quot;select `value` from `&#123;table_name&#125;` where `type` = &#x27;end_time&#x27;;&quot;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    private String query;</span><br><span class="line"></span><br><span class="line">    SQL_MAPPER(String query) &#123;</span><br><span class="line">        this.query <span class="operator">=</span> query;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getQuery() &#123;</span><br><span class="line">        <span class="keyword">return</span> query;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.meteor.activetop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.meteor.activetop.storage.AbstractPlayerDataStorage;</span><br><span class="line"><span class="keyword">import</span> com.meteor.activetop.util.Utils;</span><br><span class="line"><span class="keyword">import</span> com.meteor.jellylib.mysql.FastMySQLStorage;</span><br><span class="line"><span class="keyword">import</span> com.meteor.jellylib.mysql.column.Column;</span><br><span class="line"><span class="keyword">import</span> com.meteor.jellylib.mysql.data.KeyValue;</span><br><span class="line"><span class="keyword">import</span> org.bukkit.Bukkit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.security.sasl.SaslServer;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RaceStore</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RACE_SCHEDULED_TABLE</span> <span class="operator">=</span> <span class="string">&quot;race_scheduled&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RACE_DATA_TABLE</span> <span class="operator">=</span> <span class="string">&quot;race_data&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ActiveTop plugin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">raceEndTime</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RaceStore</span><span class="params">(ActiveTop plugin)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.plugin = plugin;</span><br><span class="line">        <span class="built_in">this</span>.initDatabase();</span><br><span class="line">        <span class="built_in">this</span>.initRace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initDatabase</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.connection = DriverManager.getConnection(plugin.getConfig().getString(<span class="string">&quot;RaceStore.url&quot;</span>));</span><br><span class="line">            <span class="type">String</span> <span class="variable">create_race_scheduled_tableQuery</span> <span class="operator">=</span> SQL_MAPPER.CREATE_RACE_SCHEDULED_TABLE.getQuery();</span><br><span class="line">            create_race_scheduled_tableQuery = create_race_scheduled_tableQuery.replace(<span class="string">&quot;&#123;table_name&#125;&quot;</span>,RACE_SCHEDULED_TABLE);</span><br><span class="line">            executeSqlQuery(connection,create_race_scheduled_tableQuery);</span><br><span class="line">            <span class="type">String</span> <span class="variable">create_race_dataQuery</span> <span class="operator">=</span> SQL_MAPPER.CREATE_RACE_DATA_TABLE.getQuery();</span><br><span class="line">            create_race_dataQuery = create_race_dataQuery.replace(<span class="string">&quot;&#123;table_name&#125;&quot;</span>,RACE_DATA_TABLE);</span><br><span class="line">            executeSqlQuery(connection,create_race_dataQuery);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        plugin.getLogger().info(<span class="string">&quot;初始化竞赛数据库&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取未结算的比赛结束日</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">getLastEndTime</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">select_current_race_endtimeQuery</span> <span class="operator">=</span> SQL_MAPPER.SELECT_CURRENT_RACE_ENDTIME.getQuery();</span><br><span class="line">        select_current_race_endtimeQuery = select_current_race_endtimeQuery.replace(<span class="string">&quot;&#123;table_name&#125;&quot;</span>,RACE_DATA_TABLE);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="built_in">this</span>.connection.prepareStatement(select_current_race_endtimeQuery);</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.getResultSet();</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) Long.parseLong(resultSet.getString(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用临时表来存储事务是否执行过;避免重复结算</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isExecuteClose</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">is_execute_close_scheduledQuery</span> <span class="operator">=</span> SQL_MAPPER.IS_EXECUTE_CLOSE_SCHEDULED.getQuery();</span><br><span class="line">        is_execute_close_scheduledQuery = is_execute_close_scheduledQuery.replace(<span class="string">&quot;&#123;table_name&#125;&quot;</span>,RACE_SCHEDULED_TABLE);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(is_execute_close_scheduledQuery);</span><br><span class="line">            preparedStatement.setLong(<span class="number">1</span>,getRaceEndTime());</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;cnt&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(cnt&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">executeSqlQuery</span><span class="params">(Connection connection,String sql,Object... args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=args.length;i++)</span><br><span class="line">                preparedStatement.setObject(i,args[i-<span class="number">1</span>]);</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title function_">executeQuery</span><span class="params">(Connection connection,String sql,Object... args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=args.length;i++)</span><br><span class="line">                preparedStatement.setObject(i,args[i-<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">return</span> preparedStatement.executeQuery();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结算一场比赛...</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">closeReward</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 一场比赛已结束..</span></span><br><span class="line">        <span class="keyword">if</span>(System.currentTimeMillis()&gt;getRaceEndTime())&#123;</span><br><span class="line">            <span class="comment">// 如果事务未执行过，开始结算</span></span><br><span class="line">            <span class="keyword">if</span>(!isExecuteClose())&#123;</span><br><span class="line">                AbstractPlayerDataStorage.getInstance().closeReward(SQL_MAPPER.INSERT_EXECUTE_CLOSE_LOG</span><br><span class="line">                        .getQuery().replace(<span class="string">&quot;&#123;table_name&#125;&quot;</span>,RACE_SCHEDULED_TABLE)</span><br><span class="line">                        .replace(<span class="string">&quot;&#123;end_tme&#125;&quot;</span>,String.valueOf(getRaceEndTime())),getRaceEndTime());</span><br><span class="line">            &#125;</span><br><span class="line">            raceEndTime = Utils.countRaceEndTime(System.currentTimeMillis());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">delayTick</span> <span class="operator">=</span> ((raceEndTime - System.currentTimeMillis())/<span class="number">1000</span>)*<span class="number">20</span>;</span><br><span class="line">        plugin.getLogger().info(<span class="string">&quot;将在&quot;</span>+delayTick+<span class="string">&quot;个tick后开始结算竞赛&quot;</span>);</span><br><span class="line">        Bukkit.getScheduler().runTaskLaterAsynchronously(plugin,()-&gt;&#123;</span><br><span class="line">            closeReward();</span><br><span class="line">        &#125;,delayTick+(<span class="number">60</span>*<span class="number">20</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initRace</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 如果一场比赛正在进行中,尝试结算;否则计算新的结束日期</span></span><br><span class="line">        <span class="keyword">if</span>((<span class="built_in">this</span>.raceEndTime = getLastEndTime())!=-<span class="number">1</span>) closeReward();</span><br><span class="line">        <span class="keyword">else</span> raceEndTime = Utils.countRaceEndTime(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 保存未结束的比赛</span></span><br><span class="line">        executeSqlQuery(connection,SQL_MAPPER.SAVE_ENDTIME.getQuery().replace(<span class="string">&quot;&#123;table_name&#125;&quot;</span>,RACE_SCHEDULED_TABLE),</span><br><span class="line">                raceEndTime,raceEndTime);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getRaceEndTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> raceEndTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">closeReward</span><span class="params">(String lockSql,<span class="type">long</span> endTime)</span> &#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = fastMySQLStorage.getConnection();</span><br><span class="line">        connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">close_sortQuery</span> <span class="operator">=</span> SQL_MAPPER.CLOSE_SORT.getQuery();</span><br><span class="line">        close_sortQuery = close_sortQuery.replace(<span class="string">&quot;&#123;table_name&#125;&quot;</span>,P_POINT_TABLE);</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> RaceStore.executeQuery(connection, close_sortQuery, endTime);</span><br><span class="line">        <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">insert_top_logQuery</span> <span class="operator">=</span> SQL_MAPPER.INSERT_TOP_LOG.getQuery();</span><br><span class="line">        insert_top_logQuery = insert_top_logQuery.replace(<span class="string">&quot;&#123;table_name&#125;&quot;</span>,TOP_TABLE);</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            RaceStore.executeSqlQuery(connection,insert_top_logQuery,top++,endTime,resultSet.getInt(<span class="string">&quot;point&quot;</span>),resultSet.getString(<span class="string">&quot;player&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//标注已结算过奖励</span></span><br><span class="line">        RaceStore.executeSqlQuery(connection,lockSql);</span><br><span class="line">        <span class="comment">//重置积分</span></span><br><span class="line">        RaceStore.executeSqlQuery(connection,SQL_MAPPER.RESET_POINT.getQuery().replace(<span class="string">&quot;&#123;table_name&#125;&quot;</span>,P_POINT_TABLE),<span class="number">0</span>);</span><br><span class="line">        connection.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考虑a,b服务器的结算操作。如果a子服的结算事务先成功提交，此时SCHEDULED表中会插入一条记录来堵塞B子服的事务开始;如果a,b子服同时进行结算操作，事务的默认隔离级别为可重复读，他们读到的数据是一致的，和业务逻辑并无冲突<br>至此，只要其中一台服务器没挂，每月10,25号的“结算”操作都能正常运行</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>再好听的歌也耐不起“设置为来电铃声”</title>
      <link href="/2023/05/16/%E5%86%8D%E5%A5%BD%E5%90%AC%E7%9A%84%E6%AD%8C%E4%B9%9F%E8%80%90%E4%B8%8D%E8%B5%B7%E2%80%9C%E8%AE%BE%E7%BD%AE%E4%B8%BA%E6%9D%A5%E7%94%B5%E9%93%83%E5%A3%B0%E2%80%9D/"/>
      <url>/2023/05/16/%E5%86%8D%E5%A5%BD%E5%90%AC%E7%9A%84%E6%AD%8C%E4%B9%9F%E8%80%90%E4%B8%8D%E8%B5%B7%E2%80%9C%E8%AE%BE%E7%BD%AE%E4%B8%BA%E6%9D%A5%E7%94%B5%E9%93%83%E5%A3%B0%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<p>隔三差五线上出bug一个电话过来，多来几次就不想听了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>距离相等的条形码1054 - 大根堆</title>
      <link href="/2023/05/16/%E8%B7%9D%E7%A6%BB%E7%9B%B8%E7%AD%89%E7%9A%84%E6%9D%A1%E5%BD%A2%E7%A0%811054%20-%20%E5%A4%A7%E6%A0%B9%E5%A0%86/"/>
      <url>/2023/05/16/%E8%B7%9D%E7%A6%BB%E7%9B%B8%E7%AD%89%E7%9A%84%E6%9D%A1%E5%BD%A2%E7%A0%811054%20-%20%E5%A4%A7%E6%A0%B9%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.zsenhe.com/f5fba0457d9e42e192168129bda1fa08" alt="image.png"></p><p>分析出贪心策略为: 优先选择次数较多且不等于上一个填充数的数<br>之后要想的就是怎么维护他们的次数，此时可以使用堆的特性。堆的每个根节点都是和其左右儿子的最值，<br>可以建一个大根堆来操作，如对于示例2，会预处理出来这样的结构<br><img src="http://cdn.zsenhe.com/1ef1675765f947e68b1871c515e17d70" alt="image.png"><br>使用map维护各个数字的剩下次数，每次选择answer[i]时，记上一个选择的数为last。如果last!&#x3D;堆顶元素，选择堆顶元素作为当前填充;否则选择堆顶左右儿子其中次数最多的数填充</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">down</span><span class="params">(Map&lt;Integer,Integer&gt; cnt,<span class="type">int</span> size,<span class="type">int</span>[] h,<span class="type">int</span> u)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> u;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">2</span>*u&lt;=size&amp;&amp;cnt.get(h[<span class="number">2</span>*u])&gt;cnt.get(h[u])) t = <span class="number">2</span>*u;</span><br><span class="line">    <span class="keyword">if</span>((<span class="number">2</span>*u+<span class="number">1</span>)&lt;=size&amp;&amp;cnt.get(h[<span class="number">2</span>*u+<span class="number">1</span>])&gt;cnt.get(h[u])) t = <span class="number">2</span>*u+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(t!=u) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> h[u];</span><br><span class="line">        h[u] = h[t];</span><br><span class="line">        h[t] = tmp;</span><br><span class="line">        down(cnt, size, h, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] rearrangeBarcodes(<span class="type">int</span>[] barcodes) &#123;</span><br><span class="line">    Map&lt;Integer,Integer&gt; cnt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> barcode : barcodes) &#123;</span><br><span class="line">        cnt.put(barcode,cnt.getOrDefault(barcode,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] heap = <span class="keyword">new</span> <span class="title class_">int</span>[cnt.size()+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Integer integer : cnt.keySet()) &#123;</span><br><span class="line">        heap[++size] = integer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size/<span class="number">2</span>; i!=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">        down(cnt,size,heap,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> -<span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span>[] answer = <span class="keyword">new</span> <span class="title class_">int</span>[barcodes.length];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;barcodes.length;i++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> heap[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(top==last) &#123;</span><br><span class="line">            <span class="keyword">if</span> (size &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cnt.get(heap[<span class="number">2</span>]) &gt; cnt.get(heap[<span class="number">3</span>])) top = heap[idx = <span class="number">2</span>];</span><br><span class="line">                <span class="keyword">else</span> top = heap[idx = <span class="number">3</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> top = heap[idx = <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        answer[i] = last = top;</span><br><span class="line">        cnt.put(top,cnt.get(top)-<span class="number">1</span>);</span><br><span class="line">        down(cnt,size,heap,idx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效率挺低的，可能用PriorityQueue会好一点吧。主要是想练习一下建堆操作</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>345周赛</title>
      <link href="/2023/05/14/345%E5%91%A8%E8%B5%9B/"/>
      <url>/2023/05/14/345%E5%91%A8%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<ol><li>6430找出转圈游戏输家<br><img src="http://cdn.zsenhe.com/b6b3e51404444fe29270e76fd7d857d3" alt="image.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] circularGameLosers(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">    HashSet&lt;Integer&gt; acceptBallList = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="number">1</span>,idx = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(acceptBallList.contains(ac)) <span class="keyword">break</span>;</span><br><span class="line">        acceptBallList.add(ac);</span><br><span class="line">        ac += ((idx++)*k);</span><br><span class="line">        <span class="keyword">if</span>(ac&gt;n) ac = (ac%n)==<span class="number">0</span>?n:(ac%n);</span><br><span class="line">    &#125;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] answer = <span class="keyword">new</span> <span class="title class_">int</span>[n-acceptBallList.size()&lt;<span class="number">0</span>?<span class="number">0</span>:n-acceptBallList.size()];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!acceptBallList.contains(i)) answer[idx++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(answer);</span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="http://cdn.zsenhe.com/8fb0cddaa3fb44caa16b8528ea1fed10" alt="image.png"><br>单纯的模拟，不过下标应该从0开始的.从1开始要额外判断%n&#x3D;&#x3D;0的情况，搞的多了几次没必要的错误提交</li></ol><p>2.相邻值的按位异或</p><p><img src="http://cdn.zsenhe.com/19b7b5fca8074034ab8cabca603b0798" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">boolean</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span>[] o,<span class="type">int</span>[] d)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;d.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            o[i+<span class="number">1</span>] = d[i]^o[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((o[<span class="number">0</span>]^o[o.length-<span class="number">1</span>])!=d[d.length-<span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">doesValidArrayExist</span><span class="params">(<span class="type">int</span>[] derived)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] o = <span class="keyword">new</span> <span class="title class_">int</span>[derived.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">endBit</span> <span class="operator">=</span> derived[derived.length-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(endBit == <span class="number">0</span>)&#123;</span><br><span class="line">            o[<span class="number">0</span>] = o[derived.length-<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> handler(o,derived);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            o[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            o[derived.length-<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> handler(o,derived);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/43d31410022248738e510f7d214d58d4" alt="image.png"><br>推公式递推即可。<br>题目中说了如果i &#x3D; n-1,那么derived[i] &#x3D; original[i] ^ original[0];<br>基于这一条件，可以根据原数组中第n-1个元素确定original数组的 original[0],original[n-1]<br>记 endBit &#x3D; derived[n-1] ,如果endBit &#x3D; 0，那么original[0] &#x3D; original[n-1] &#x3D; 0 (0^0 &#x3D; 0,当然都为1也可以)<br>如果 endBit &#x3D; 1,那么original[0] &#x3D; 0,original[n-1] &#x3D; 1</p><p>于是基于这两个初始状态，可以递推出original内剩下元素<br>i从0开始，对于每个original[i+1]<br>由于 derived[i] &#x3D; original[i] ^ original[i+1]<br>于是 original[i+1] &#x3D; derived[i] ^ original[i]</p><p>最后判断推出的original是不是合法的,这一步只需要判断头尾即可（因为其他元素都是合法推出来的）</p><p>第三题dfs出来样例了，不知道怎么剪枝超时了。下周再战</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决了下网站卡顿的问题</title>
      <link href="/2023/05/13/%E8%A7%A3%E5%86%B3%E4%BA%86%E4%B8%8B%E7%BD%91%E7%AB%99%E5%8D%A1%E9%A1%BF%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/05/13/%E8%A7%A3%E5%86%B3%E4%BA%86%E4%B8%8B%E7%BD%91%E7%AB%99%E5%8D%A1%E9%A1%BF%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>这几天访问的时候一直在loading，导致“回复”之类的子组件加载不出来<br>断点调试了一会，原因是调用的一个外部js库挂了，一直超时<br><img src="http://cdn.zsenhe.com/b77da9c3774a47f69616bf4e1a2a02c0" alt="image.png"></p><p><img src="http://cdn.zsenhe.com/b3da48af45ce43b4b7723c0b13cdc69c" alt="image.png"><br>也不是什么重要的东西，单独拎出来删了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>稻花香里说丰年，听取蛙声一片</title>
      <link href="/2023/05/05/%E7%A8%BB%E8%8A%B1%E9%A6%99%E9%87%8C%E8%AF%B4%E4%B8%B0%E5%B9%B4%EF%BC%8C%E5%90%AC%E5%8F%96%E8%9B%99%E5%A3%B0%E4%B8%80%E7%89%87/"/>
      <url>/2023/05/05/%E7%A8%BB%E8%8A%B1%E9%A6%99%E9%87%8C%E8%AF%B4%E4%B8%B0%E5%B9%B4%EF%BC%8C%E5%90%AC%E5%8F%96%E8%9B%99%E5%A3%B0%E4%B8%80%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.zsenhe.com/fd044d34da794e9fb8ecaeb72f37cf12" alt="image.png"><br>纯模拟，定义total表示正在发出声音的青蛙，cnt[]将’croak’映射至0~4的下标作为字符计数器。遍历croakOfFrogs,遇到c时代表一只青蛙发出了叫声，total++，cnt[mapper]++。否则娃叫上一个字符是否已经在cnt中出现过，如不存在说明字符串不是一个合法串，返回答案-1;当遍历到的字符为k时，一只青蛙已经完成了一次蛙叫，total–;在遍历到c中对比到最大答案作为answer返回即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minNumberOfFrogs</span><span class="params">(String croakOfFrogs)</span> &#123;</span><br><span class="line">        Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&#x27;c&#x27;</span>,<span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;r&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;o&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;k&#x27;</span>,<span class="number">4</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">answer</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; croakOfFrogs.length(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mapper</span> <span class="operator">=</span> map.get(croakOfFrogs.charAt(i));</span><br><span class="line">            <span class="keyword">if</span>(mapper==<span class="number">0</span>)&#123;</span><br><span class="line">                answer = Math.max(answer,++total);</span><br><span class="line">                cnt[mapper] ++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt[mapper-<span class="number">1</span>]==<span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                cnt[mapper-<span class="number">1</span>] --;</span><br><span class="line">                <span class="keyword">if</span>(mapper==<span class="number">4</span>)&#123;</span><br><span class="line">                    total--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cnt[mapper]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(total&gt;<span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该可以用贪心解决，等下午上课试试</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode2106.摘水果</title>
      <link href="/2023/05/04/leetcode2106.%E6%91%98%E6%B0%B4%E6%9E%9C/"/>
      <url>/2023/05/04/leetcode2106.%E6%91%98%E6%B0%B4%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.zsenhe.com/8b6e29eb71a140b78947f6e02eb6cd93" alt="image.png"></p><p>一开始想的是二分去做，推了一些发现映射到坐标轴左右移动上太麻烦了。就转而用双指针了，被边界卡了一上午。整理下思路<br>首先需要明确的就是往一个方向移动后，最多回头一次，如果回头后再次转向只会浪费策略（既然要再次回头，那为什么不一次性往一条路走呢）<br>只要明白这一点，这题大概就能从hard降到中等了<br>如图，以样例2为例<br><img src="http://cdn.zsenhe.com/bf156d24004b41b493ac03fa89ac8a04" alt="image.png"><br>当i指针递增的时候，j也会随之往右拉，因为2(i-startPos)+(startPos-j)必须&lt;&#x3D;k，显然可以使用滑动窗口来操作<br>分别枚举以startPos上下界区分的左右两个区间即遍历所有的方案，在其中选择最大的即可。但要注意一些边界情况<br>如在枚举右窗口i指针时，j有可能越过startPos<br><img src="http://cdn.zsenhe.com/8f99b5e6461e4d6d9990a30c1dd7d041" alt="image.png"><br>当发生这种情况的时候，(startPos-j)可以被丢弃，但(i-startPos)可能是有效的，需要特判一下。处理左窗口的时候同理</p><p>每次选取一对i,j后，在预处理好的前缀和中划分区域来得到采摘的水果数（推了好久）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">lowerBound</span><span class="params">(List&lt;Integer&gt; pos,<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>,r=pos.size()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(pos.get(mid)&gt;=x) r=mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxTotalFruits</span><span class="params">(<span class="type">int</span>[][] fruits, <span class="type">int</span> startPos, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; pos = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span>[] sum = <span class="keyword">new</span> <span class="title class_">int</span>[fruits.length];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;fruits.length;i++)&#123;</span><br><span class="line">            pos.add(fruits[i][<span class="number">0</span>]);</span><br><span class="line">            sum[i] = (i==<span class="number">0</span>?<span class="number">0</span>:sum[i-<span class="number">1</span>])+fruits[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> pos.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lowerBound(pos,startPos);</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">answer</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=mid;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(pos.get(j)&lt;=startPos&amp;&amp;<span class="number">2</span>*(pos.get(i)-startPos)+(startPos-pos.get(j))&gt;k) j++;</span><br><span class="line">            <span class="keyword">if</span>(pos.get(j)&gt;startPos)&#123;</span><br><span class="line">                <span class="keyword">if</span>(pos.get(i)-startPos&lt;=k)</span><br><span class="line">                    answer = Math.max(answer,sum[i]-(mid==<span class="number">0</span>?<span class="number">0</span>:sum[mid-<span class="number">1</span>]));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Math.max(<span class="number">0</span>,<span class="number">2</span>*(pos.get(i)-startPos))+(startPos-pos.get(j))&lt;=k) &#123;</span><br><span class="line">                answer = Math.max(answer,sum[i]-(j==<span class="number">0</span>?<span class="number">0</span>:sum[j-<span class="number">1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mid = lowerBound(pos,startPos);</span><br><span class="line">        <span class="keyword">if</span>(pos.get(mid)&gt;startPos) mid--;</span><br><span class="line">        j = length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=mid;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">while</span>(pos.get(j)&gt;=startPos&amp;&amp;<span class="number">2</span>*(startPos-pos.get(i))+(pos.get(j)-startPos)&gt;k) j--;</span><br><span class="line">            <span class="keyword">if</span>(pos.get(j)&lt;startPos)&#123;</span><br><span class="line">                <span class="keyword">if</span>(startPos-pos.get(i)&lt;=k) &#123;</span><br><span class="line">                    answer = Math.max(answer,sum[mid]-(i==<span class="number">0</span>?<span class="number">0</span>:sum[i-<span class="number">1</span>]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">2</span>*(startPos-pos.get(i))+(pos.get(j)-startPos)&lt;=k)&#123;</span><br><span class="line">                answer = Math.max(answer,sum[j]-(i==<span class="number">0</span>?<span class="number">0</span>:sum[i-<span class="number">1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/881f6a2e49a446a286f157ab014e0188" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>fel计算引擎的使用</title>
      <link href="/2023/04/24/fel%E8%AE%A1%E7%AE%97%E5%BC%95%E6%93%8E%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/04/24/fel%E8%AE%A1%E7%AE%97%E5%BC%95%E6%93%8E%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>最近接到一个需求，每个配置好的公式中有诸多因子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 经验获取公式</span></span><br><span class="line"><span class="comment"># exp 本次拾取得经验</span></span><br><span class="line"><span class="attr">reg:</span> <span class="string">&#x27;exp*0.25*5&#x27;</span></span><br></pre></td></tr></table></figure><p>如上述配置，需要把exp提出来替换成值再进行计算。记录一下fel的简单<br>使用,Fel是轻量级的高效的表达式计算引擎,在开源的引擎中效率是最高的，且无任何额外学习成本</p><p>引入库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eweb4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> exp)</span>&#123;</span><br><span class="line"><span class="comment">// 表达式</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">petExpReg</span> <span class="operator">=</span> BasicConfig.petExpReg;</span><br><span class="line">       <span class="type">FelContext</span> <span class="variable">ctx</span> <span class="operator">=</span> fel.getContext();</span><br><span class="line"><span class="comment">// 设置变量exp值</span></span><br><span class="line">       ctx.set(<span class="string">&quot;exp&quot;</span>,exp);</span><br><span class="line"><span class="comment">// 传入表达式，计算结果</span></span><br><span class="line">       <span class="keyword">return</span> (<span class="type">int</span>) fel.eval(petExpReg);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>fel引擎也提供自定义函数，上下文环境等操作，不过暂时用不上，等以后再研究了<br><a href="https://code.google.com/p/fast-el/">https://code.google.com/p/fast-el/</a> fel官网</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL语句中 ` 的作用</title>
      <link href="/2023/04/20/SQL%E8%AF%AD%E5%8F%A5%E4%B8%AD%20%60%20%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
      <url>/2023/04/20/SQL%E8%AF%AD%E5%8F%A5%E4%B8%AD%20%60%20%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>写插件的时候遇到了sql异常，print出来sql语句粘贴到navicat后发现有个字段蓝了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(code) <span class="keyword">as</span> total <span class="keyword">from</span> INVITE_PLAYER </span><br><span class="line"><span class="keyword">where</span> code <span class="operator">=</span> <span class="string">&#x27;be820&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这是统计邀请新用户数量的业务，一开始以为只是使用了code这个关键词，修改成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="string">&#x27;code&#x27;</span>) <span class="keyword">as</span> total <span class="keyword">from</span> INVITE_PLAYER </span><br><span class="line"><span class="keyword">where</span> <span class="string">&#x27;code&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;be820&#x27;</span>;</span><br></pre></td></tr></table></figure><p>后，倒是不报错了，但查出来是空的，表里实际上是有二十多条匹配的。左看右看都没问题，…折腾了小半个钟，突发奇想改成了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(`code`) <span class="keyword">as</span> total <span class="keyword">from</span> INVITE_PLAYER </span><br><span class="line"><span class="keyword">where</span> `code` <span class="operator">=</span> <span class="string">&#x27;be820&#x27;</span>;</span><br></pre></td></tr></table></figure><p>果然没问题了，查了一下文档，原来&#96;&#96;是用于标注表，表字段，数据库的，一直以为是等价于引号<br>吃了基础不牢固的亏</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL增删查改</title>
      <link href="/2023/03/07/SQL%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9/"/>
      <url>/2023/03/07/SQL%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="1-在单一表格检索数据"><a href="#1-在单一表格检索数据" class="headerlink" title="1. 在单一表格检索数据"></a>1. 在单一表格检索数据</h3><h4 id="SELECT-语句"><a href="#SELECT-语句" class="headerlink" title="SELECT 语句"></a>SELECT 语句</h4><p>SELECT用于从数据库中选取数据，返回的表称为结果集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- SELECT 语法</span></span><br><span class="line"><span class="keyword">SELECT</span> column1,column2... </span><br><span class="line"><span class="keyword">FROM</span> TABLE_NAME;</span><br></pre></td></tr></table></figure><p>column 为选取的列字段名，TABLE_NAME为查询的表名称</p><h5 id="选择子句SELECT-Clause"><a href="#选择子句SELECT-Clause" class="headerlink" title="选择子句SELECT Clause"></a>选择子句SELECT Clause</h5><p>可在选择子句中嵌套数学表达式,特定值,文本;</p><img src="http://cdn.zsenhe.com/dfdedb800c8d4d088deda6dc56525a79" width="600px" height="200px"><p>如对于表customer,执行sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id,points,(points <span class="operator">+</span> <span class="number">10</span>) <span class="keyword">AS</span> new_points</span><br><span class="line"><span class="keyword">FROM</span> customers;</span><br></pre></td></tr></table></figure><p>返回结果集<br><img src="http://cdn.zsenhe.com/e149343dc1fb4a2db999a77d98f791fb" alt="image.png"><br>在这个案例中 返回了新的一列“new_points”,它的结果是每一行数据points列值+10<br>使用AS得到了一个新的列别名</p><h4 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h4><p>WHERE子句用于过滤记录，在一些场景中一张表里可能有成百上千万行数据，针对某一次查询如果返回所有的数据会对数据库造成很大的压力;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- WHERE子句 语法</span></span><br><span class="line"><span class="keyword">SELECT</span> column1,column2... </span><br><span class="line"><span class="keyword">FROM</span> TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br></pre></td></tr></table></figure><p>condition为表达式<br>还是针对上面的customers表,执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id,first_name,points</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> points <span class="operator">&gt;=</span> <span class="number">500</span>;</span><br></pre></td></tr></table></figure><p>这个sql语句返回了所有points列大于等于500的数据</p><h5 id="AND-NOT-OR-逻辑运算"><a href="#AND-NOT-OR-逻辑运算" class="headerlink" title="AND NOT OR 逻辑运算"></a>AND NOT OR 逻辑运算</h5><p>这三个运算符号与字面意思相同，用于处理where语句中多条表达式“或”“与”“取反”逻辑<br>如我们需要得到points值在区间[500,3000]中的数据,可以像这样写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id,first_name,points</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> points <span class="operator">&gt;=</span><span class="number">500</span> <span class="keyword">AND</span> points <span class="operator">&lt;=</span><span class="number">3000</span>;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/4e24893c61cb48f29cd4487e91c0a74c" alt="image.png"></p><p>对于AND逻辑,sql有一个简化的语法,使用BETWEENK操作符,它用于选取介于两个值之间的数据范围</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id,first_name,points</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> points <span class="keyword">BETWEEN</span> <span class="number">500</span> <span class="keyword">AND</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/ed12447d79f14480af8e5bcedda8fd37" alt="image.png"><br>接下来,选取除了这个区间以外的数据,修改一下上面的sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id,first_name,points</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> points <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">500</span> <span class="keyword">AND</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/4314d24bda4c402e89d304b7b0f7e99d" alt="image.png"><br>现在记住，NOT用于表达式中取反</p><h4 id="对于字符串检索-（LIKE-REGEXP）"><a href="#对于字符串检索-（LIKE-REGEXP）" class="headerlink" title="对于字符串检索 （LIKE,REGEXP）"></a>对于字符串检索 （LIKE,REGEXP）</h4><img src="http://cdn.zsenhe.com/dfdedb800c8d4d088deda6dc56525a79" width="600px" height="200px"><p>在真实情境中不可能每一列都是数字或日期,如first_name;在sql操作中对字符串进行寻找是很常见的操作<br>稍有年头的LIKE操作符可以帮我们完成这个任务，它就像正则表达式青春版，可以完成一些简单的工作</p><p>对于了解使用过正则表达式的开发者，只需记住 “%””_”分别占位 “任意个字符” “一个字符” 即可<br>现在，我们将要检索first_name列值以b开头的数据，这样写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id,points,first_name <span class="keyword">AS</span> B_NAME</span><br><span class="line"><span class="keyword">FROM</span> customers </span><br><span class="line"><span class="keyword">WHERE</span> first_name <span class="keyword">LIKE</span> <span class="string">&#x27;B%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/4201e10f2e8c4e5bb2367afb5f6dd17f" alt="image.png"></p><p>sql也支持正则表达式，使用REGEXP操作符进行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id,points,first_name <span class="keyword">AS</span> B_NAME</span><br><span class="line"><span class="keyword">FROM</span> customers </span><br><span class="line"><span class="keyword">WHERE</span> first_name REGEXP <span class="string">&#x27;^B.+$&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/ada3bc923fa648e89ba8db3d0d4becb7" alt="image.png"></p><h4 id="对结果集进行排序-ORDER-BY"><a href="#对结果集进行排序-ORDER-BY" class="headerlink" title="对结果集进行排序 (ORDER BY)"></a>对结果集进行排序 (ORDER BY)</h4><p>ORDER BY 关键字用于对结果集进行排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column1, column2, ... <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>ORDER BY 后面紧跟进行排序的列字段，DESC为降序，默认使用升序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id,first_name,points</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> points <span class="keyword">DESC</span>,first_name;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/ca64bdda9f8e4c87b49455e22ced7c86" alt="image.png"><br>观察id为5和6这两行数据;根据ORDER BY使用的规则,先对points进行降序,当points一样的时候;<br>使用了后一个规则,对first_name进行了升序排序</p><h5 id="使用LIMIT关键词限定查询数据量"><a href="#使用LIMIT关键词限定查询数据量" class="headerlink" title="使用LIMIT关键词限定查询数据量"></a>使用LIMIT关键词限定查询数据量</h5><p>修改上面的sql语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT customer_id,first_name,points</span><br><span class="line">FROM customers</span><br><span class="line">ORDER BY points DESC,first_name</span><br><span class="line">LIMIT 5;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/f3872935da1c480681cb0c6142b51022" alt="image.png"></p><p>同时可以为LIMIT设置一个偏移量，这对一些分页操作的查询是很有用的技巧</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id,first_name,points</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> points <span class="keyword">DESC</span>,first_name</span><br><span class="line">LIMIT <span class="number">2</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>2为偏移量，查询5条数据<br><img src="http://cdn.zsenhe.com/4bdf607439e9492f8e55aa7ca0cba2b2" alt="image.png"></p><h3 id="2-在多表之间检索数据"><a href="#2-在多表之间检索数据" class="headerlink" title="2. 在多表之间检索数据"></a>2. 在多表之间检索数据</h3><p>单表是满足不了大部分业务需求的，很多时候采用多表关联来解决存储问题，如对于该表</p><img src="http://cdn.zsenhe.com/4944c32d58c04bd0a6521e8fef11f9e7" width="600px" height="300px"><p>orders是一张“订单表”，其中order_id字段为主键与表order_items中的同名字段相关联;orders.order_id也称之为“外键”</p><p><img src="http://cdn.zsenhe.com/343e15ba7a2f4c4fb133286b97c02ee4" alt="image.png"></p><p>当我们查询orders的时候，想要同时得到产品id(product_id),它在另外一张表中，这个时候怎么操作?使用JOIN连接关键词</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>codition为连接条件,用于指定连接方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> o.order_id,oi.product_id</span><br><span class="line"><span class="keyword">FROM</span> orders o</span><br><span class="line"><span class="keyword">JOIN</span> order_items oi <span class="keyword">ON</span> o.order_id <span class="operator">=</span> oi.order_id;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/d53cf4aa74564df18f0899f3b308276c" alt="image.png"></p><p>在sql语句中 o,oi 为表的别名，而SELECT查询列的o.order_id是为指定order_id是哪张表中的字段(原因是orders,order_items中<br>都有order_id这个字段)</p><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>什么是外连接？在清楚这个概念之前先引入一张新的示例表<br><img src="http://cdn.zsenhe.com/e50b9a72b388476e9e3c9bf4f620a79b" alt="image.png"><br>很明显这张表用于管理某个公司中的员工,其中reports_to列指定了他的上级（汇报人员;而reports_to对应的employee_id<br>现在我们要查找所有人员以及他的上级id<br>利用前面的概念很轻松的写出查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USE sql_hr;</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">e.employee_id,</span><br><span class="line">e.first_name,</span><br><span class="line">m.first_name <span class="keyword">AS</span> manger_first_name,</span><br><span class="line">m.employee_id <span class="keyword">AS</span> manger_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">JOIN</span> employees m <span class="keyword">ON</span> e.reports_to <span class="operator">=</span> m.employee_id;</span><br></pre></td></tr></table></figure><p>(注意，表自己与自己连接，称之为自连接SelfJoin)<br><img src="http://cdn.zsenhe.com/5093cbd7204f41639a9f694cc7c83420" alt="image.png"><br>仔细看结果集似乎有点不对，我们期望得到所有人员以及他的管理员;但貌似少了一行<br>也就是first_name为Yovonnda的数据,这是为什么呢?往回翻一下表，发现Yovonnda的reports_to列为NULL<br><img src="http://cdn.zsenhe.com/55c895369fa44dac8e738b84bec240a6" alt="image.png"><br>没什么好奇怪的，他没有上级，这可能是公司的CEO<br>要想得到正确的结果，就得了解下所谓内连接与外连接的差别了<br>上文所提到所使用的JOIN语句都默认使用的内连接，即</p><p><strong>以某种条件进行连接的，两张表之间的交集</strong></p><p>既然Yovonnda的reports_id为NULL,也就没有交集,自然也查询不到他的信息;<br>我们可以使用外连接来修复这个错误</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> o.order_id,oi.product_id</span><br><span class="line"><span class="keyword">FROM</span> orders o</span><br><span class="line">[<span class="keyword">LEFT</span><span class="operator">/</span><span class="keyword">RIGHT</span>] <span class="keyword">JOIN</span> order_items oi <span class="keyword">ON</span> o.order_id <span class="operator">=</span> oi.order_id;</span><br></pre></td></tr></table></figure><p>修改一下sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE sql_hr;</span><br><span class="line"><span class="keyword">SELECT</span>  e.employee_id,</span><br><span class="line">e.first_name,</span><br><span class="line">m.first_name <span class="keyword">as</span> admin</span><br><span class="line"> <span class="keyword">FROM</span> employees e</span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> employees m</span><br><span class="line"> <span class="keyword">ON</span> e.reports_to <span class="operator">=</span> m.employee_id;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/e01dbd9a4a4742aebb60a62a3e8f6bbf" alt="image.png"></p><p>ok，现在的结果集是我们期望得到的了;可以看到外连接与内连接的差别只是多了个LEFT,它指的是左表,在这个例子中是FROM的<br>employess,它将左表中无法与右表建立连接的记录也返回;在大多数时候为了sql语句清晰,我们只使用left而少用right</p><h3 id="3-插入，更新，删除数据"><a href="#3-插入，更新，删除数据" class="headerlink" title="3. 插入，更新，删除数据"></a>3. 插入，更新，删除数据</h3><h4 id="插入-（INSERT-INTO）"><a href="#插入-（INSERT-INTO）" class="headerlink" title="插入 （INSERT INTO）"></a>插入 （INSERT INTO）</h4><p>语法:<br>第一种方式无需提供插入的列字段名，只需提供值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> table_name</span><br><span class="line"><span class="keyword">VALUES</span> (value1,value2,value3,...);</span><br></pre></td></tr></table></figure><p>也可以这样</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> table_name (column1,column2,column3,...)</span><br><span class="line"><span class="keyword">VALUES</span> (value1,value2,value3,...);</span><br></pre></td></tr></table></figure><p>尝试往customers表里插入一名新的客人，执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">USE sql_store;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> customers </span><br><span class="line">(customer_id,</span><br><span class="line">first_name,</span><br><span class="line">last_name,</span><br><span class="line">birth_date,</span><br><span class="line">phone,</span><br><span class="line">address,</span><br><span class="line">city,</span><br><span class="line">state,</span><br><span class="line">points)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="keyword">DEFAULT</span>,&quot;z&quot;,&quot;sh&quot;,&quot;2023-3-8&quot;,&quot;13169018149&quot;,&quot;stou&quot;,&quot;stou&quot;,&quot;CH&quot;,<span class="keyword">DEFAULT</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers <span class="keyword">where</span> last_name <span class="operator">=</span> &quot;sh&quot;;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/f1f896ce0e0048d49c0ee9e60b91d3f0" alt="image.png"></p><p>DEFAULT为缺省值，即使用字段中定义的自增或默认值<br>也可以同时插入多行<br><img src="http://cdn.zsenhe.com/40b74f27541b4771834995581edf6aed" alt="image.png"></p><h4 id="插入分层行-（LAST-INSERT-ID函数）"><a href="#插入分层行-（LAST-INSERT-ID函数）" class="headerlink" title="插入分层行 （LAST_INSERT_ID函数）"></a>插入分层行 （LAST_INSERT_ID函数）</h4><img src="http://cdn.zsenhe.com/4944c32d58c04bd0a6521e8fef11f9e7" width="600px" height="300px"><p><img src="http://cdn.zsenhe.com/767035a9fd1543898f74acad9c4f7722" alt="image.png"></p><p>如图所展示的两张表 “orders” “order_items” ,他们使用order_id作为外键进行连接，母表orders一行记录可能对应子表order_items多条数据; 在插入的时候不止要操作orders表，同时还要插入order_items（订单产品信息)</p><p>在写sql语句的时候会遇到一个问题,order_id作为自增列,为了防止重复在插入时无法指定该字段的值;而往子订单里插入数据的时候又需要该字段作为索引,使用LAST_INSERT_ID()来解决问题</p><p>LAST_INSERT_ID()是mysql内置的功能函数，它会返回上一次创建的自增值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> orders </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="keyword">DEFAULT</span>,<span class="number">6</span>,&quot;2023-3-8&quot;,<span class="number">1</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> order_items</span><br><span class="line"><span class="keyword">VALUES</span>(LAST_INSERT_ID(),<span class="number">4</span>,<span class="number">3</span>,<span class="number">4.5</span>),</span><br><span class="line">(LAST_INSERT_ID(),<span class="number">3</span>,<span class="number">4</span>,<span class="number">5.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> order_items</span><br><span class="line"><span class="keyword">where</span> order_id <span class="operator">=</span> LAST_INSERT_ID();</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/79cd83fafac94e2793671cbe24d0a993" alt="image.png"></p><h4 id="复制表数据-子查询"><a href="#复制表数据-子查询" class="headerlink" title="复制表数据 (子查询)"></a>复制表数据 (子查询)</h4><p>有时候需要将表中所有或某一部分数据拷贝到另一张表，一条条记录insert是效率极低的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> orders_copy </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders;</span><br></pre></td></tr></table></figure><p>该查询会创建一张新的表”orders_copy”,并导入所有orders表中的数据;CREATE TABLE 后紧跟着的SELECT 称之为子查询<br>充分利用该特性可以完成许多骚操作，例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> orders_copy2 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_date <span class="operator">&lt;</span> <span class="string">&#x27;2019-1-1&#x27;</span>;</span><br></pre></td></tr></table></figure><p>该查询会得到一张新的表，里面记录了2019-1-1之前的订单数据;值得注意的是，该方式会忽略所有列属性<br><img src="http://cdn.zsenhe.com/26d56f1d89c74695bd1d7d4872375176" alt="image.png"><br>复制出来的表，其中order_id并没有被标注为主键，也没有自增属性</p><h4 id="更新表数据-UPDATE"><a href="#更新表数据-UPDATE" class="headerlink" title="更新表数据 (UPDATE)"></a>更新表数据 (UPDATE)</h4><p>使用UPDATE来更新数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name</span><br><span class="line"><span class="keyword">SET</span> column1 <span class="operator">=</span> value1, column2 <span class="operator">=</span> value2, ...</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>例如,将customer中,所有state&#x3D;CH的数据points列更改为1000</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> customers </span><br><span class="line"><span class="keyword">SET</span> points <span class="operator">=</span> <span class="number">1000</span></span><br><span class="line"><span class="keyword">WHERE</span> state<span class="operator">=</span><span class="string">&#x27;CH&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/7ccddcda0ba94871aa67c147b158f4d2" alt="image.png"><br>其中也可以嵌套数学表达式，例如为所有CH的客户加1000积分<br><img src="http://cdn.zsenhe.com/5fc1df1fdf3a4f949b338f35aaf56c55" alt="image.png"></p><h4 id="删除表数据-DELETE"><a href="#删除表数据-DELETE" class="headerlink" title="删除表数据 (DELETE)"></a>删除表数据 (DELETE)</h4><p>DELETE语句用于删除数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>where condition作为缺省值出现,如果不填写会默认删除整张表的数据</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springboot  + jwt-token实现微信小程序登录授权</title>
      <link href="/2023/03/03/springboot%20%20+%20jwt-token%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E6%8E%88%E6%9D%83/"/>
      <url>/2023/03/03/springboot%20%20+%20jwt-token%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E6%8E%88%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<p>最近在写类似校园墙的小程序，记录下开发过程。<br>万丈高楼平地起，在实现一系列的功能之前先要做的就是“登录注册”;因为是小程序注册这块就省略了，只需要写登录的逻辑就好<br>前端选用了uni-app,一套代码多端发布很吸引人;后端框架选择了SpringBoot,由于是要落地玩的项目，自然是怎么效率高怎么来了</p><p>登录模块所需的依赖引入: jwt-token,spring-security</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-impl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&lt;/dependency</span><br></pre></td></tr></table></figure><p>小程序的登录流程与一般应用没什么区别，只是多存了一个openid而已；登录流程大概如下</p><p>1: 前端调用微信的登录API，获取临时code，携带code向后端发送请求<br>2: 后端接收到请求，携带本次的code,appid(小程序id),secret向微信服务器发送请求，获取唯一标识openid<br>3: 查找数据库，未发现该openid的条目则创建（实际上就是省略的注册）,插入库<br>4: 签发jwt-token，返回给前端;前端缓存，之后的业务请求携带token进行验证权限</p><p>做一些准备:</p><p>application.properties中增加配置项</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">小程序id</span><br><span class="line">wx.appid=wx683fdea76c3825</span><br><span class="line">wx.secret=0554defd893f3eec9bf4c43dd97</span><br></pre></td></tr></table></figure><p>注意secret不会被记录，需妥善保存</p><p>JWT工具类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.wswbackend.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">JWT_TTL</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000L</span> * <span class="number">24</span> * <span class="number">14</span>;  <span class="comment">// 有效期14天</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JWT_KEY</span> <span class="operator">=</span> <span class="string">&quot;SDFGjhdsfalshdfHFdsjkdsffHFdsjkdsfds121232131afasdfac232131afasdfac&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUUID</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建token</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String subject)</span> &#123;</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getJwtBuilder(subject, <span class="literal">null</span>, getUUID());</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JwtBuilder <span class="title function_">getJwtBuilder</span><span class="params">(String subject, Long ttlMillis, String uuid)</span> &#123;</span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(nowMillis);</span><br><span class="line">        <span class="keyword">if</span> (ttlMillis == <span class="literal">null</span>) &#123;</span><br><span class="line">            ttlMillis = JwtUtil.JWT_TTL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + ttlMillis;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setId(uuid)</span><br><span class="line">                .setSubject(subject)</span><br><span class="line">                .setIssuer(<span class="string">&quot;sg&quot;</span>)</span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                .signWith(signatureAlgorithm, secretKey)</span><br><span class="line">                .setExpiration(expDate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">generalKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] encodeKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(encodeKey, <span class="number">0</span>, encodeKey.length, <span class="string">&quot;HmacSHA256&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String jwt)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="keyword">return</span> Jwts.parserBuilder()</span><br><span class="line">                .setSigningKey(secretKey)</span><br><span class="line">                .build()</span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建用户，权限表</p><p>user表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- auto-generated definition</span></span><br><span class="line"><span class="keyword">create table</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    openid   <span class="type">varchar</span>(<span class="number">125</span>) <span class="keyword">null</span>,</span><br><span class="line">    wx       <span class="type">varchar</span>(<span class="number">24</span>)  <span class="keyword">null</span>,</span><br><span class="line">    id       <span class="type">int</span> auto_increment</span><br><span class="line">        <span class="keyword">primary key</span>,</span><br><span class="line">    role     <span class="type">int</span>          <span class="keyword">null</span>,</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">300</span>) <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">constraint</span> id</span><br><span class="line">        <span class="keyword">unique</span> (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>user_role表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- auto-generated definition</span></span><br><span class="line"><span class="keyword">create table</span> user_role</span><br><span class="line">(</span><br><span class="line">    id        <span class="type">int</span> auto_increment</span><br><span class="line">        <span class="keyword">primary key</span>,</span><br><span class="line">    role_name <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">constraint</span> id</span><br><span class="line">        <span class="keyword">unique</span> (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>实体类:<br>(使用了lombook，省略了一大堆的getset和构造器代码)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.wswbackend.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String openid;</span><br><span class="line">    <span class="keyword">private</span> String wx;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer role;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置Security</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/account/login/&quot;</span>, <span class="string">&quot;/user/account/register/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(HttpMethod.OPTIONS).permitAll()</span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, <span class="meta">@NotNull</span> HttpServletResponse response, <span class="meta">@NotNull</span> FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(token) || !token.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        token = token.substring(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        String userid;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(token);</span><br><span class="line">            userid = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(Integer.parseInt(userid));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名未登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">UserDetailsImpl</span> <span class="variable">loginUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDetailsImpl</span>(user);</span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(loginUser, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getOpenid();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;openid&quot;</span>, username);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDetailsImpl</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后写一个接口组合起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">login</span><span class="params">(String code,String wx)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">appid</span> <span class="operator">=</span>  environment.getProperty(<span class="string">&quot;wx.appid&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">secret</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;wx.secret&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">openid</span> <span class="operator">=</span> GetOpenIdUtil.getopenid(appid,secret,code);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSON.parseObject(openid);</span><br><span class="line">        openid = jsonObject.getString(<span class="string">&quot;openid&quot;</span>);</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">        queryWrapper = queryWrapper.eq(<span class="string">&quot;openid&quot;</span>, openid);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(userList.isEmpty())&#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setRole(<span class="number">0</span>);</span><br><span class="line">            user.setWx(wx);</span><br><span class="line">            user.setOpenid(openid);</span><br><span class="line">            user.setPassword(passwordEncoder.encode(openid));</span><br><span class="line">            userMapper.insert(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">usernamePasswordAuthenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(openid,openid);</span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationManager.authenticate(usernamePasswordAuthenticationToken);</span><br><span class="line">        <span class="type">UserDetailsImpl</span> <span class="variable">userDetails</span> <span class="operator">=</span> (UserDetailsImpl)authenticate.getPrincipal();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDetails.getUser();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> JwtUtil.createJWT(user.getId().toString());</span><br><span class="line">        map.put(<span class="string">&quot;error_message&quot;</span>,<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;token&quot;</span>,jwt);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>获取openid的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetOpenIdUtil</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getopenid</span><span class="params">(String appid,String secret,String code)</span> &#123;</span><br><span class="line">         <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">         String url=<span class="string">&quot;https://api.weixin.qq.com/sns/jscode2session?appid=&quot;</span></span><br><span class="line">                 +appid+<span class="string">&quot;&amp;secret=&quot;</span>+secret+<span class="string">&quot;&amp;js_code=&quot;</span>+code+<span class="string">&quot;&amp;grant_type=authorization_code&quot;</span>;</span><br><span class="line">         <span class="keyword">try</span>&#123;</span><br><span class="line">             <span class="type">URL</span> <span class="variable">weChatUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">             <span class="type">URLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> weChatUrl.openConnection();</span><br><span class="line">             connection.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">             connection.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">             connection.connect();</span><br><span class="line">             in = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream()));</span><br><span class="line">             <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">             String line;</span><br><span class="line">             <span class="keyword">while</span> ((line = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                 sb.append(line);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> sb.toString();</span><br><span class="line">         &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">finally</span> &#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                     in.close();</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">                 e2.printStackTrace();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前端部分代码太丑了不做展示，最后实现效果如下图</p><p><img src="http://cdn.zsenhe.com/dd64545545fb4c50a21b92a7f728b691" alt="login 0.gif"></p><p>头像的更新没录到hh</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>装饰者模式与IO包</title>
      <link href="/2023/03/02/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E4%B8%8EIO%E5%8C%85/"/>
      <url>/2023/03/02/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E4%B8%8EIO%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><p>装饰者模式是继承的一种替代方案。它以对客户端透明的状态动态的为对象赋予不同的职责，而不用进行大量子类的扩写。</p><h4 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h4><p>它的类图如下:</p><p><img src="http://cdn.zsenhe.com/9fbbc0418fce488ea434dec5780eb0a1" alt="3985563a0d0ac0c5bdf5c93.png"></p><p><strong>Component(抽象构件)</strong>: 通常作为接口被实现，用于规范被装饰角色<br><strong>ConcreteComponent(具体构件)</strong>: 作为揽收职责的对象类，实现了抽象构件接口<br><strong>Decorator(装饰职责超类)</strong>: 用于规范具体装饰组件，持有一个具体构建实例<br><strong>ConcreteDecoratorA,B(具体装饰类)</strong>: 作为具体装饰职责，为对象扩展功能</p><h4 id="装饰者模式实例"><a href="#装饰者模式实例" class="headerlink" title="装饰者模式实例"></a>装饰者模式实例</h4><p>记录这篇笔记主要目的是把io类啃下来，单纯是理论就太枯燥了。在对io类三拜五扣之前先引入一段栗子</p><blockquote><p>考虑一下咖啡厅的业务，咖啡作为产出，但不同的人口味不尽相同，有的喜欢加薄荷有的喜欢加牛奶;不同的配料需要收不同的钱。当我们使用继承来进行抽象，可能会多出许多coffee的子类，例如MintCoffee,MilkCoffee….这样的实现是不优雅的，考虑客人可能要加一点薄荷，再加一点牛奶。我们总不能上两杯吧</p></blockquote><p>这个时候就需要装饰者模式派上用场了，定义出抽象构件 CoffeeComponent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.meteor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CoffeeComponent</span> &#123;</span><br><span class="line">    <span class="comment">//返回咖啡的名称</span></span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//返回咖啡的配料</span></span><br><span class="line">    String <span class="title function_">getAdd</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//返回咖啡的价格</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及具体构件,客人可能需要一杯蓝山咖啡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.meteor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlueCoffee</span> <span class="keyword">implements</span> <span class="title class_">CoffeeComponent</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;蓝山咖啡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰职责超类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.meteor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeDecorator</span> <span class="keyword">implements</span> <span class="title class_">CoffeeComponent</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CoffeeComponent coffeeEntity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CoffeeDecorator</span><span class="params">(CoffeeComponent coffeeEntity)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.coffeeEntity = coffeeEntity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> coffeeEntity.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> coffeeEntity.getAdd();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> coffeeEntity.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CoffeeComponent <span class="title function_">getCoffeeEntity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> coffeeEntity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据客人的喜好写出具体装饰类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.meteor.decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.meteor.CoffeeComponent;</span><br><span class="line"><span class="keyword">import</span> com.meteor.CoffeeDecorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MilkCoffeeDecorator</span> <span class="keyword">extends</span> <span class="title class_">CoffeeDecorator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MilkCoffeeDecorator</span><span class="params">(CoffeeComponent coffeeEntity)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(coffeeEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCoffeeEntity().getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCoffeeEntity().getPrice()+<span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCoffeeEntity().getAdd()+<span class="string">&quot;牛奶 &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.meteor.decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.meteor.CoffeeComponent;</span><br><span class="line"><span class="keyword">import</span> com.meteor.CoffeeDecorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MintCoffeeDecorator</span> <span class="keyword">extends</span> <span class="title class_">CoffeeDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MintCoffeeDecorator</span><span class="params">(CoffeeComponent coffeeEntity)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(coffeeEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCoffeeEntity().getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCoffeeEntity().getAdd()+<span class="string">&quot;薄荷 &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCoffeeEntity().getPrice()+<span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里就完成了，当需要推出新口味的时候你可以再次增加装饰类。在客人需要薄荷的时候赋予薄荷的职责，或者是直接new 一杯红豆牛奶咖啡….不论是什么口味，他总是一杯CoffeeComponent </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(CoffeeComponent coffeeComponent)</span>&#123;</span><br><span class="line">    out.println(coffeeComponent.getName()+<span class="string">&quot;/&quot;</span>+coffeeComponent.getAdd()+<span class="string">&quot;/&quot;</span>+coffeeComponent.getPrice()+<span class="string">&quot;$&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">CoffeeComponent</span> <span class="variable">coffeeComponent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlueCoffee</span>();</span><br><span class="line">    print(coffeeComponent);</span><br><span class="line">    out.println(<span class="string">&quot;======加入牛奶=======&quot;</span>);</span><br><span class="line">    coffeeComponent = <span class="keyword">new</span> <span class="title class_">MilkCoffeeDecorator</span>(coffeeComponent);</span><br><span class="line">    print(coffeeComponent);</span><br><span class="line">    out.println(<span class="string">&quot;======加入薄荷=======&quot;</span>);</span><br><span class="line">    coffeeComponent = <span class="keyword">new</span> <span class="title class_">MintCoffeeDecorator</span>(coffeeComponent);</span><br><span class="line">    print(coffeeComponent);</span><br><span class="line">    out.println(<span class="string">&quot;======一杯薄荷牛奶咖啡=====&quot;</span>);</span><br><span class="line">    <span class="type">CoffeeComponent</span> <span class="variable">mintMilkCoffee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MintCoffeeDecorator</span>(<span class="keyword">new</span> <span class="title class_">MilkCoffeeDecorator</span>(<span class="keyword">new</span> <span class="title class_">BlueCoffee</span>()));</span><br><span class="line">    print(coffeeComponent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">蓝山咖啡/</span> <span class="string">/5.0$</span></span><br><span class="line"><span class="string">======加入牛奶=======</span></span><br><span class="line"><span class="string">蓝山咖啡/</span> <span class="string">牛奶</span> <span class="string">/7.0$</span></span><br><span class="line"><span class="string">======加入薄荷=======</span></span><br><span class="line"><span class="string">蓝山咖啡/</span> <span class="string">牛奶</span> <span class="string">薄荷</span> <span class="string">/9.0$</span></span><br><span class="line"><span class="string">======一杯薄荷牛奶咖啡=====</span></span><br><span class="line"><span class="string">蓝山咖啡/</span> <span class="string">牛奶</span> <span class="string">薄荷</span> <span class="string">/9.0$</span></span><br></pre></td></tr></table></figure><h4 id="通过装饰者模式记忆IO类"><a href="#通过装饰者模式记忆IO类" class="headerlink" title="通过装饰者模式记忆IO类"></a>通过装饰者模式记忆IO类</h4><p>在理解了装饰者模式后，再来理io的脉络就不是很难了。以下是java中io的类图关系<br><img src="http://cdn.zsenhe.com/fa3ef9b3cd58481e986da41629044634" alt="20190908093820782.jpg"><br>将目光放在字节流上<br><img src="http://cdn.zsenhe.com/61ec9ab634b1473cbdfa81bec9fd9ccb" alt="image.png"><br>用前文提到的模式结构将他们的关系用装饰者模式理一遍</p><p><strong>InputStream OutputStream</strong> 作为字节流的两个超类（抽象构件 Component），分别是输入与输出<br>在InputStream这个模式中，拥有 <strong>FileInputStream(文件处理),ByteArrayInputStream….</strong> 等具体构件（ConcreteComponent）<br>同样与具体构件实现了Component的是装饰职责超类 <strong>FilterInputStream</strong> ,它的继承下定义了三个具体装饰类<br><strong>BufferedInputStream,DataInputStream,PushbakInputStream</strong>;OutStream同样可以这样整理出来</p><p>在脑海中整理出模型后，当我们想读取某个文件时终于不用对着文档敲了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;zsh.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//具体构件</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="comment">//增加装饰者 缓冲流</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(inputStream);</span><br><span class="line">        <span class="type">byte</span> bytes[] = <span class="keyword">new</span> <span class="title class_">byte</span>[bufferedInputStream.available()];</span><br><span class="line">        <span class="keyword">while</span> ((bufferedInputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">          out.print(<span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用字符流时也是同样的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.meteor.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;zsh.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//具体构件</span></span><br><span class="line">            <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">            <span class="comment">//装饰组件</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>();</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span>  <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = bufferedReader.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/01cf3dfb78e84018abaf7bd1c48e2564" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二叉树遍历的应用</title>
      <link href="/2023/02/14/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2023/02/14/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>::: hljs-center</p><p><font size='20' color='green'><strong>二叉树遍历的应用</strong></font></p><p>:::</p><hr>利用二叉树遍历的框架,思想可以做很多二叉树应用方面的问题<h3 id="输出所有叶子节点"><a href="#输出所有叶子节点" class="headerlink" title="输出所有叶子节点"></a>输出所有叶子节点</h3><p>将二叉树中所有没有儿子的节点输出,使用先序遍历来做;在先序遍历算法中，增加检测节点的 <font color='blue'><strong>“左右儿子是否为空”</strong></font><br>程序的实现如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrderTraversal</span><span class="params">(BinTree BT)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(BT)&#123;</span><br><span class="line"><span class="keyword">if</span>(!BT.left&amp;&amp;!BT.right) cout &lt;&lt; BT.data &lt;&lt; endl; <span class="comment">//判断是否左右儿子都为空</span></span><br><span class="line"><span class="built_in">PreOrderTraversal</span>(BT.left);</span><br><span class="line"><span class="built_in">PreOrderTraversal</span>(BT.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求二叉树高度"><a href="#求二叉树高度" class="headerlink" title="求二叉树高度"></a>求二叉树高度</h3><p>树使用递归定义，那必然也可以用递归的方式求解这个问题;这个问题实际上是求 <font color='blue'><strong>“根节点左右子树高度的较大者+1”</strong></font><br>之前提到过不同序的区别在于访问节点的时机不同，要求根节点左右子树的高度，那必然是要先递归处理左右子树，最后递归层再返回到根节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求二叉树高度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">PostOrderTraversal</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(BT)&#123;</span><br><span class="line"><span class="type">int</span> lf = <span class="built_in">PreOrderTraversal</span>(BT.left); <span class="comment">//左子树高度</span></span><br><span class="line"><span class="type">int</span> rf = <span class="built_in">PreOrderTraversal</span>(BT.right);  <span class="comment">//右子树高度</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(lf,rf)<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那就是使用后序遍历来做了</p><h3 id="二元表达式树"><a href="#二元表达式树" class="headerlink" title="二元表达式树"></a>二元表达式树</h3><p><img src="http://cdn.zsenhe.com/c4a5afe7020f43d7adf0fe5e224d3b81" alt="image.png"></p><p>如图给出的二元表达式树，树当中的叶节点为运算数，非叶节点为运算符号;每一棵子树描述了一个式子。<br>通过不同的遍历次序可以得到 <font color='blue'><strong>前缀表达式，中缀表达式，后缀表达式</strong></font></p><p><img src="http://cdn.zsenhe.com/a75b455b336d41c2abe32266d019e112" alt="image.png"></p><p>如图中缀表达式直接通过前序遍历的方式输出是不准确的，必须在开始递归左子树时输出”(“,并在返回的时候输出右括号”)”<br>这样才能得到正确的中缀表达式</p><h3 id="由两种遍历序列确定一棵唯一二叉树"><a href="#由两种遍历序列确定一棵唯一二叉树" class="headerlink" title="由两种遍历序列确定一棵唯一二叉树"></a>由两种遍历序列确定一棵唯一二叉树</h3><p>当得知一棵树的两种遍历序列，是否能推出一棵唯一的二叉树? 答案是 <font color='blue'><strong>“两种序列中必须包含一个中序”</strong></font><br>为什么给出后序，先序的遍历结果不能推测出来呢？例如前序遍历的结果为 AB;后序为BA，并没法知道B是A的左儿子还是右儿子，自然就无法知道二叉树的准确形式了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的遍历</title>
      <link href="/2023/02/02/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
      <url>/2023/02/02/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>::: hljs-center</p><p><font size='20' color='green'><strong>二叉树的遍历</strong></font></p><p>:::</p><hr>以二叉树的链式存储为例,二叉树的遍历方式有以下几种<h2 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h2><blockquote><p><a href="http://www.zsenhe.com/article/89">二叉树的定义与存储</a><br><font color='black'><strong>void PreOrderTraversal(T) 先序</strong> </font> <font color='blue'> <strong>根,左子树,右子树;</strong> </font><br><font color='black'><strong>void InOrderTraversal(T) 中序</strong> </font> <font color='blue'> <strong>左子树,根,右子树;</strong> </font><br><font color='black'><strong>void PostOrderTraversal(T) 后序</strong> </font> <font color='blue'> <strong>左子树,右子树,根;</strong> </font><br><font color='black'><strong>void LevelOrderTraversal(T) 层次遍历</strong> </font> <font color='blue'> <strong>从上至下，从左到右;</strong> </font></p></blockquote><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><p><img src="http://cdn.zsenhe.com/d6294c133a5e46dca9f64a351b749180" alt="image.png"><br>遍历过程为:</p><ol><li>访问 <font color='blue'><strong>根节点</strong> </font></li><li><font color='blue'><strong>先序</strong> </font>遍历其<font color='blue'><strong>左子树</strong> </font></li><li><font color='blue'><strong>先序</strong> </font>遍历其<font color='blue'><strong>右子树</strong> </font></li></ol><p>这样的过程采用了递归的设计，相应的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrderTraversal</span><span class="params">(BinTree BT)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(BT)&#123;</span><br><span class="line">cout &lt;&lt; BT-&gt;data &lt;&lt; endl;</span><br><span class="line"><span class="built_in">PreOrderTraversal</span>(BT-&gt;left);</span><br><span class="line"><span class="built_in">PreOrderTraversal</span>(BT-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p><img src="http://cdn.zsenhe.com/7a990cde8d9640cb8f166f73cf8aa6cb" alt="image.png"><br>图中输出: D B E F A G H C I</p><p>遍历过程为:</p><ol><li><font color='blue'><strong>中序</strong> </font>遍历其<font color='blue'><strong>左子树</strong> </font></li><li>访问 <font color='blue'><strong>根节点</strong> </font></li><li><font color='blue'><strong>中序</strong> </font>遍历其<font color='blue'><strong>右子树</strong> </font></li></ol><p>代码也就是将上面的访问根节点调换到两次子问题处理中间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderTraversal</span><span class="params">(BinTree BT)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(BT)&#123;</span><br><span class="line"><span class="built_in">PreOrderTraversal</span>(BT-&gt;left);</span><br><span class="line">cout &lt;&lt; BT-&gt;data &lt;&lt; endl;</span><br><span class="line"><span class="built_in">PreOrderTraversal</span>(BT-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p><img src="http://cdn.zsenhe.com/f78f78ee22d64f6baa6dafe5ee4b1869" alt="image.png"><br>遍历过程为:</p><ol><li><font color='blue'><strong>后序</strong> </font>遍历其<font color='blue'><strong>左子树</strong> </font></li><li><font color='blue'><strong>中序</strong> </font>遍历其<font color='blue'><strong>右子树</strong> </font></li><li>访问 <font color='blue'><strong>根节点</strong> </font></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostOrderTraversal</span><span class="params">(BinTree BT)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(BT)&#123;</span><br><span class="line"><span class="built_in">PreOrderTraversal</span>(BT-&gt;left);</span><br><span class="line"><span class="built_in">PreOrderTraversal</span>(BT-&gt;right);</span><br><span class="line">cout &lt;&lt; BT-&gt;data &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不管是何种次序进行遍历，遍历过程中经过节点的路线是一样的，只是访问各接点的时机不同。</p><h2 id="中序遍历非递归实现"><a href="#中序遍历非递归实现" class="headerlink" title="中序遍历非递归实现"></a>中序遍历非递归实现</h2><p>上面的遍历都是使用递归的形式实现，既然是递归，那肯定可以更朴素的用堆栈来完成</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderTraversal</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line">BinTree T = BT;</span><br><span class="line">Stack s = <span class="built_in">createStack</span>(); <span class="comment">//获取一个栈 </span></span><br><span class="line"><span class="keyword">while</span>(T||!<span class="built_in">isEmpty</span>(s))&#123;</span><br><span class="line"><span class="keyword">while</span> (T)&#123; <span class="comment">//一直向左走并将沿途节点压入堆栈 </span></span><br><span class="line"><span class="built_in">push</span>(T,s);</span><br><span class="line">T = T-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isEmpty</span>(s))&#123;</span><br><span class="line">T = <span class="built_in">pop</span>(s);</span><br><span class="line">cout &lt;&lt; T-&gt;data;</span><br><span class="line">T = T-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面提到对于树的遍历,三种序列的区别也就是在第几次遇到它的时候进行访问;对于中序遍历是在第二次遇到节点的时候进行输出,所以我们设计出以下步骤,配合堆栈实现中序遍历</p><blockquote><p>遇到一个节点，将它压入栈，并遍历所有左子树<br>当左子树遍历完之后，从栈顶pop出去并访问它<br>继续中序遍历刚才pop出去的节点的右子树</p></blockquote><h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><p>在学习层序遍历之前，要先搞懂二叉树遍历的核心问题是什么;二叉树是一个二维结构,既然是遍历,那么必然是要产生一个序列,根据不同的访问节点顺序会产生不同结果的序列,而这个序列是一维结构,所以二叉树的遍历本质问题是 <font color='blue'><strong>二维结构的一维化</strong></font></p><p>那么二维怎么变成一维?难点是什么?仔细想想上面的遍历方式,访问一个节点的前提是”你是我的右儿子” or “你是我的左儿子”,所以我们是通过一个已知的节点来访问左右儿子节点，再通过左儿子右儿子再往深层遍历;</p><p>所以访问过程中就会遇到一个问题,在遍历中,我们访问了节点的左儿子,<font color='red'><strong>右儿子怎么办?</strong></font>;如果把右儿子放弃，以后就找不到右儿子了</p><p>综上所述，我们需要一种方式来记住节点，可以使用堆栈或者队列来进行保存（例如上文的非递归中序遍历，在堆栈中保存的就是节点本身）</p><p>当使用堆栈保存的时候，存的是节点本身（即是说回溯回来的时候使用节点本身来访问左或右儿子）；而使用队列进行记忆的时候，存的是右节点（先访问左节点，再将右节点入队）</p><h3 id="层序遍历的队列方式实现"><a href="#层序遍历的队列方式实现" class="headerlink" title="层序遍历的队列方式实现:"></a>层序遍历的队列方式实现:</h3><p>使用队列先进先出的特性,可以很方便的做到对二叉树进行层序遍历,基本的流程是这样的</p><blockquote><p>遍历从根节点开始,首先将<font color='blue'>根节点入队</font>,然后进行循环: 节点出队-&gt;访问该节点,其<font color='blue'>左右儿子入队</font></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TreeNode</span> * BinTree;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line"><span class="type">char</span> data;</span><br><span class="line">BinTree left;</span><br><span class="line">BinTree right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LevelOrderTraversal</span><span class="params">(BinTree BT)</span></span>&#123;</span><br><span class="line">Queue q;BinTree T;</span><br><span class="line"><span class="keyword">if</span>(!BT) <span class="keyword">return</span>;</span><br><span class="line">Q = <span class="built_in">createQueue</span>();</span><br><span class="line"><span class="built_in">Add</span>(Q,BT);</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isEmpty</span>(Q))&#123;</span><br><span class="line">T = <span class="built_in">DeleteQ</span>(Q);</span><br><span class="line">cout &lt;&lt; T-&gt;data;</span><br><span class="line"><span class="keyword">if</span>(T-&gt;left) <span class="built_in">AddQ</span>(Q,T-&gt;left);</span><br><span class="line"><span class="keyword">if</span>(T-&gt;right) <span class="built_in">AddQ</span>(Q,T-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>队列的实现 <a href="http://www.zsenhe.com/article/85">http://www.zsenhe.com/article/85</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的定义与存储</title>
      <link href="/2023/02/02/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%AD%98%E5%82%A8/"/>
      <url>/2023/02/02/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p>::: hljs-center</p><p><font size='20' color='green'><strong>二叉树的存储与遍历</strong></font></p><p>:::</p><hr><h2 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h2><p><font  color='blue'><strong>二叉树T</strong></font>: 一个有穷的节点集合<br>这个集合可以为空;若不为空，则它是由<font  color='red'><strong>根节点</strong></font>和称为其<font  color='red'><strong>左子树Tl</strong></font>和<font  color='red'><strong>右子树Tr</strong></font>的两个不相交的二叉树组成。<br>从某种角度理解，二叉树可以当做一颗度为2的树，但他有左右之分</p><h3 id="二叉树的五种基本形态"><a href="#二叉树的五种基本形态" class="headerlink" title="二叉树的五种基本形态"></a>二叉树的五种基本形态</h3><p><img src="http://cdn.zsenhe.com/78a5bcb7d1814e0d9dc6739cbc596e2a" alt="image.png"></p><blockquote><p><strong>a</strong> : 空二叉树<br><strong>b</strong> : 只有一个根节点<br><strong>c</strong> <strong>d</strong> : 左右子树分别为空<br><strong>e</strong> : 拥有左右子树</p></blockquote><p>二叉树与一般树的差别便是子树拥有<font color='blue'><strong>左右顺序之分</strong></font>，而一般度为2的树是没有左右之分的</p><h3 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h3><h4 id="斜二叉树"><a href="#斜二叉树" class="headerlink" title="斜二叉树"></a>斜二叉树</h4><p>子树都往一边倒，只有左儿子，没有右儿子（当然也可能往右边倒）;这样的结构实际上就形成一个链表了<br><img src="http://cdn.zsenhe.com/26d614307f4a4effb77410f4e9cea7bb" alt="image.png"></p><h4 id="完美二叉树（满二叉树）"><a href="#完美二叉树（满二叉树）" class="headerlink" title="完美二叉树（满二叉树）"></a>完美二叉树（满二叉树）</h4><p><img src="http://cdn.zsenhe.com/63ce7e85548044afb5dfd3012b71fcc0" alt="image.png"><br>除叶节点外，每个节点都拥有左右子树，称之为完美二叉树</p><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><p>有n个节点的二叉树，从上到下从左到右对节点进行编号，编号为i的节点与完美二叉树中编号i节点位置相同<br>听起来有点绕，将上面的完美二叉树拿掉一些节点<br><img src="http://cdn.zsenhe.com/94a160357f70443aa968195ede80dd2a" alt="image.png"><br>可以看到，即使缺失了叶节点右边一部分，他的序号依然与满二叉树保持一致，这也能称之为 <strong>完全二叉树</strong><br><img src="http://cdn.zsenhe.com/3419678ce2a6447cb14310ab69e6c207" alt="image.png"><br>如图，因为节点D的右儿子缺失，使得编号与完美二叉树不一致，<strong>这就不能称为完全二叉树</strong></p><h3 id="二叉树的重要性质"><a href="#二叉树的重要性质" class="headerlink" title="二叉树的重要性质"></a>二叉树的重要性质</h3><ol><li><font color='black'><strong>一个二叉树第i层的最大节点数为<font color='red'> 2^i-1^,i&gt;&#x3D;1</strong></font></font></li><li>由1可以推出: <font color='black'><strong>深度为k的二叉树拥有最大节点数量 <font color='red'> 2^k^-1,k&gt;&#x3D;1</strong></font></font></li><li>对于任何非空二叉树T，若N0表示叶节点个数,N1表示度为1的节点个数.N2表示度为2的节点个数，存在 <font color='red'><strong>n0&#x3D;n2+1</strong> </font> 的关系<br><img src="http://cdn.zsenhe.com/6900e20148c24563b665f9e64d407aae" alt="image.png"></li></ol><p>能证明这个结论吗?其实是不难的,对于一棵节点数为n的二叉树T，除根节点外对边数的贡献都为1，于是总的边数k&#x3D;n-1;展开来说 k&#x3D;n0+n1+n2-1。n1对于边的贡献为n0<em>0,n1的贡献为n1</em>1,n2的贡献为n2*2，得出以下等式关系:</p><blockquote><p>n0+n1+n2-1 &#x3D; k &#x3D; n0*0 + n1 + 2n2<br>两边一约,推出:<br>n0 &#x3D; n2+1<br>问题得证</p></blockquote><h3 id="二叉树的抽象数据类型定义"><a href="#二叉树的抽象数据类型定义" class="headerlink" title="二叉树的抽象数据类型定义"></a>二叉树的抽象数据类型定义</h3><p><img src="http://cdn.zsenhe.com/87e72290a0ee42018417684d629b5568" alt="image.png"><br>遍历是二叉树的主要操作，大多数算法实现都在此基础上，二叉树的遍历分为:</p><p><font color='black'><strong>void PreOrderTraversal(T) 先序</strong> </font> <font color='blue'> <strong>根,左子树,右子树;</strong> </font><br><font color='black'><strong>void InOrderTraversal(T) 中序</strong> </font> <font color='blue'> <strong>左子树,根,右子树;</strong> </font><br><font color='black'><strong>void PostOrderTraversal(T) 后序</strong> </font> <font color='blue'> <strong>左子树,右子树,根;</strong> </font><br><font color='black'><strong>void LevelOrderTraversal(T) 层次遍历</strong> </font> <font color='blue'> <strong>从上至下，从左到右;</strong> </font></p><h2 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h2><h3 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h3><p>根据前面的经验，我们想到有没有可能用数组来进行表示。前面提到过一般的树用数组实现是很困难的，但二叉树不同，它的度只有2，分支相对较少<br>对于完全二叉树，由于节点是从上往下,从左到右编号,我们可以在数组中连续存放<br><img src="http://cdn.zsenhe.com/87582478c8b446ce9611e2ac4e91288b" alt="image.png"><br>对于这样的存放，他在数组中下标的映射有如下规律:</p><blockquote><p>对于节点i:<br><strong>根节点位于 i&#x2F;2</strong> ,向下取整<br><strong>左儿子 2i</strong>;<strong>右儿子2i+1</strong></p></blockquote><p>一般二叉树同样可以使用数组存放,只是要对数组空间造成浪费<br><img src="http://cdn.zsenhe.com/e7d3f26a1b4141a6996be57db3c7e5b8" alt="image.png"></p><h3 id="链表存储"><a href="#链表存储" class="headerlink" title="链表存储"></a>链表存储</h3><p>别忘记前面的<strong>儿子-兄弟表示法</strong>，使用两个指针域分别指向左右儿子就可以了<br><img src="http://cdn.zsenhe.com/d1afe0201dee4c3cb0e6256eda3da1ff" alt="image.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TreeNode</span> *BinTree;</span><br><span class="line"><span class="keyword">typedef</span> BinTree Position;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line"><span class="type">char</span> data;</span><br><span class="line">BinTree left;</span><br><span class="line">BinTree right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如图:<br><img src="http://cdn.zsenhe.com/b387ab35869346e986eae64b3451b345" alt="image.png"></p><h2 id="习题-错题整理"><a href="#习题-错题整理" class="headerlink" title="习题&amp;错题整理"></a>习题&amp;错题整理</h2><ol><li>如果一个完全二叉树最底下一层为第六层（根为第一层）且该层共有8个叶结点，那么该完全二叉树共有多少个结点？<br><strong>解: 对于深度为6的完全二叉树，1-5层构成一棵完美二叉树T，T的节点数为2^5^-1 &#x3D; 31，加上叶节点 31+8 &#x3D; 39，于是答案为39</strong></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>树与二叉树</title>
      <link href="/2023/02/01/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2023/02/01/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>::: hljs-center</p><p><font size='20' color='green'><strong>树与二叉树</strong></font></p><p>:::<br>&lt;树，二叉树结构&gt; 笔记目录</p><blockquote><p><a href='http://www.zsenhe.com/article/87'>0. 树与二叉树</a><br><a href='http://www.zsenhe.com/article/89'>1. 二叉树的定义与存储</a><br><a href='http://www.zsenhe.com/article/90'>2.二叉树的遍历</a></p></blockquote><hr><h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><p>查找指的是根据某个给定关键词K，从集合R中找出关键字与K相同的记录，查找分为两类</p><p><strong>静态查找</strong>: 集合中<font color='red'><strong>记录是固定</strong></font>的，没有插入删除操作，只有查找<br><strong>动态查找</strong>: 集合中<font color='red'><strong>记录是动态变化</strong></font>的，除查找外还可能发生插入与删除操作</p><p><em>举个例子，一本词典中可能有成万上百万的单词，当它印刷成书的时候集合是不变的，我们经常需要进行单词的查阅，这就是所谓静态查找了;而动态查找可能发生在某个百科网站上，当我们检索条目的同时可能也有一些过时的资料被清除更新</em></p><p>我们的一般表示方法是把数据放在数组里面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1001</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line"><span class="type">int</span> data[<span class="number">1001</span>];</span><br><span class="line"><span class="type">int</span> length;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> LNode * L;</span><br></pre></td></tr></table></figure><p>顺序查找这样写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findTarget</span><span class="params">(L l,<span class="type">int</span> target)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">l-&gt;data[<span class="number">0</span>] = target; <span class="comment">//建立哨兵 </span></span><br><span class="line"><span class="keyword">for</span>(i = l-&gt;length;l-&gt;data[i]!=target;i--);</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>哨兵?这是什么新术语</strong></p><p>它的存在是为了少写一些边界判断的逻辑，我们定义一个“哨兵”将它存放在数组下标为0的位置，这样当循环退出时，i为0自然就是未找到了;于是我们知道接收到0的时候，就是元素不存在于数组中，当然这样实现的话，插入元素时需注意合法下标在 <strong>[1,n)</strong><br>它的时间复杂度是 <font color='blue'> <strong>O(N)</strong> </font></p><hr><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>顺序查找的效率显然是极低的。我们可以使用二分查找（也叫折半查找）,它并不是生面孔，平常的聚会游戏也会经常用到，没有任何的改变<br>假设n个数据元素的关键字满足有序（降序 升序）并且连续存放,代码长这样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(L l,<span class="type">int</span> target)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> left,right,mid,NF = <span class="number">-1</span>;</span><br><span class="line">left = <span class="number">1</span>;<span class="comment">//初始化左边界 </span></span><br><span class="line">right = l-&gt;length; <span class="comment">//初始化右边界 </span></span><br><span class="line"><span class="keyword">while</span>(left&lt;=right)&#123; </span><br><span class="line">mid = (left+right)/<span class="number">2</span>; <span class="comment">//计算中间元素坐标 </span></span><br><span class="line"><span class="keyword">if</span>(target&lt;l-&gt;data[mid])  right=mid<span class="number">-1</span>; <span class="comment">//调整右边界 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k&gt;l-&gt;data[mid]) left = mid+; <span class="comment">//调整左边界 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> NF; <span class="comment">//未查找成功，返回-1 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次查找都缩小一半范围，实际意义即是n &#x3D; n&#x2F;2，根据公式知道除以logn次后归1，于是它的时间复杂度为 <font color='blue'> <strong>O(logn)</strong> </font><br>通过事先对数据进行排序，可以让我们的查找效率大大提高<br>对于二分查找的解题思路，这里有一篇很详细的笔记： <a href="http://www.zsenhe.com/article/8">二分查找的思想和解题步骤笔记，模板</a></p><hr>## 二分查找的启示<p>为什么二分查找就快呢？通过事先排好序，实际上我们已经构建了它的查找顺序;我们可以构造出这样的一棵树来表述<br><img src="http://cdn.zsenhe.com/b3c4e5d7754f408ca96f93263e303b2b" alt="image.png"></p><p>对于从1开始的这样11个元素，只要排好序了，那么第一次比较的一定是下标为6这个元素，根据查找的值来决定往左节点走还是右节点走，对于6这个位置，如果比较值元素比l[6]大，那么下一次将往右节点9走….以此类推</p><p>而元素的查找次数便是所在的层数,例如4这个节点是要寻找的值，它位于第三层，比较三次后就可以取出;树的总层次是logn+1,+1是为了取整;<strong>树的深度有<font color='blue'>logn+1</font>层</strong></p><p>考虑它的平均查找次数,树总共有4层</p><blockquote><p>查找4次总共有4种情况,查找3次4种情况,查找2次2种情况，查找1次只有1种情况（l[6]&#x3D;&#x3D;target）</p></blockquote><p>那么它的平均查找成功次数 <font color='blue'>ASL &#x3D; (4*4+4*3+2*3+1)&#x2F;11 &#x3D; 3</font><br>综上所述，由于我们在数组里面对查找的元素进行了有序化的组织，使得查找过程按照固定的顺序进行，而顺序形成了类似树的结构;那反过来说，我们能不能按照这一种树的结构来存储数据，能不能达到二分查找的要求?这就是<strong>查找树</strong>了，在效率上它可以和二分查找达到同样logn，同时它在插入数据时，比存储在数组中方便的多</p><p>以查找树的形式存储，可以很好的解决顺序查找的第二大类问题 <strong>动态查找问题</strong></p><hr><h2 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h2><p><font color='blue'><strong>树(Tree)</strong></font>: n (n&gt;&#x3D;0) 个节点构成的有限集合。<br>当n&#x3D;0时，称为 <font color='blue'><strong>空树</strong></font>;<br>对于任一<font color='blue'><strong>非空树</strong>(n&gt;0)</font>，它具备以下性质:</p><blockquote><p>树中有一个称为<font color='red'><strong>根(root)</strong></font>的特殊节点,用r表示<br>其余节点可分为<font color='red'><strong>m(m&gt;0)</strong></font>个互不相交的有限集T1,T2…Tm,其中每个集合本身又是一棵树，称为原来树的<font color='blue'><strong>子树(SubTree)</strong></font></p></blockquote><p><img src="http://cdn.zsenhe.com/9a4e8e7ba8b34676a107b9ad934331da" alt="image.png"><br>树的定义采用了递归的设计，例如A是由下一层的四棵子树构成，每个子树又是一棵树</p><hr><h3 id="树与非树"><a href="#树与非树" class="headerlink" title="树与非树"></a>树与非树</h3><p><img src="http://cdn.zsenhe.com/f770e16faafc43bd896645a76dd39c27" alt="image.png"><br>如图，这样的结构为什么不能称之为树呢?前面提到了树的子树之间是不相交的，如图1由于C与D之间连着线，我们无法做到把他们切割开来</p><p>现在明确一下树的更多概念</p><blockquote><p>1.子树是<strong>不相交</strong>的<br>2.除了根节点以外，每个节点<strong>有且仅有一个父节点</strong><br>3.一颗N个节点的树有<strong>N-1条边</strong><br>（因为每个节点都有一条通往父节点的线，root除外）</p></blockquote><p>树是保证节点联通的最小的一种连接方式;即边最少的一种方式</p><h3 id="树的一些基本术语"><a href="#树的一些基本术语" class="headerlink" title="树的一些基本术语"></a>树的一些基本术语</h3><ol><li><strong>节点的度(Degree)</strong>: 节点的子树个数</li><li><strong>树的度</strong>: 树的所有节点中最大的度数</li><li><strong>叶节点(Leaf)</strong>: 度为0的结点</li><li><strong>父节点(Parent)</strong>: 有子树的结点是其子树根节点的父节点</li><li><strong>子节点(Child)</strong>: 若A节点是B节点的父节点，则称B节点是A节点的子节点;子节点也称孩子节点</li><li><strong>兄弟节点(Sibling)</strong>: 两个节点具有同一父节点，即称之为兄弟节点</li><li><strong>路径和路径长度</strong>: 从节点N1到Nk的路径称之为一个节点序列(N1,N2…Nk-1,Nk),Ni是Ni+1的父节点。路径中包含的边数称为路径长度</li><li><strong>祖先节点</strong>: 沿树根到某一节点路径上的所有节点都称为这个节点的祖先节点</li><li><strong>子孙节点</strong>: 某一节点的子树中的所有节点都称之为这个节点的子孙节点</li><li><strong>节点的层次</strong>: 规定根节点在1层，其他任一节点的层数是其父节点的层数+1</li><li><strong>树的深度</strong>: 树中所有节点中的最大层次是这棵树的深度</li></ol><p>大多数概念类似家谱系中的表示，完全可以用常识去理解加深印象</p><hr><h2 id="树的表示"><a href="#树的表示" class="headerlink" title="树的表示"></a>树的表示</h2><p>考虑前面所学的知识，树能不能使用链表或者数据来实现呢？首先考虑数组，这样难度还是较大的，因为树中存在着很多形式，任何一个节点可能都有一个或多个儿子;我们很难判断一个节点的父节点是谁,儿子是谁</p><p>如果用链表来实现呢?它可能会长这样<br><img src="http://cdn.zsenhe.com/bd1b5b686c24403d88c0fb2045f78e63" alt="image.png"><br>每个节点使用一个结构来表示,好像是没问题的,完全可以用结构加指针来表示一棵树?仔细观察,这种方式也是不完美的,如A节点有三个子节点,而B有两个子节点,他们的结构是不一样的,无法做到统一;结构的形式不一样会对程序设计带来困难，毕竟我们访问一个节点时，是无法事先知道他的子节点数量的</p><p>另外一种途径呢?把所有的节点设计成一样的结构,例如图中,树的度是3,那我们统一节点的结构,让每个节点都拥有3个指针不就行了,空的就指向NULL</p><p>这样解决带来了新的问题,如果这棵树有n个节点,那代表着每个节点拥有3个指针域,这意味着整个树拥有3n个指针;而树只有n-1条边,也就是说只有n-1个指针是非0的,这意味着会有2n+1个指针指向NULL,造成空间浪费</p><hr><h3 id="儿子-兄弟表示法"><a href="#儿子-兄弟表示法" class="headerlink" title="儿子-兄弟表示法"></a>儿子-兄弟表示法</h3><p>这是一种更好的表示方法，称之为: <font color='blue'><strong>儿子-兄弟表示法</strong></font></p><p>它每个节点的结构如下:<br><img src="http://cdn.zsenhe.com/b1c416e1318b4c288bfe944018be21b8" alt="image.png"></p><p><strong>FirstChild</strong> 指向了它的下一个子节点; <strong>NextSibling</strong> 指向下一个兄弟节点。以此来把整棵树串起来</p><p><img src="http://cdn.zsenhe.com/439001000a1e4612ba80afee0776d352" alt="image.png"></p><p>这样的表示方法使得树中的每个节点结构都是统一的且不会造成空间浪费(n+1个指针是空的)</p><p>将右图旋转45°得到:<br><img src="http://cdn.zsenhe.com/ef891c74be1a4173a234f734e904cdc2" alt="image.png"><br>形成一棵“树”，可以看到每个节点都有两个指针，最多有两个儿子，这种树称之为 二叉树 ;即树的度为2<br>综上，不管怎样的树结构，我们都可以用儿子-兄弟表示法，将它用二叉树链表的形式实现</p><p>所以，当我们想研究一般树的表示与操作的实现，如果我们搞清楚了二叉树的表示与实现，便解决了大部分问题;所以<strong>二叉树是树结构研究里面最重要最主要的内容</strong></p><p>引用&amp;参考:<br><a href="https://zh.m.wikipedia.org/zh-sg/%E6%A0%91_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)">树,数据结构[维基百科]</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>队列与顺环队列</title>
      <link href="/2023/01/30/%E9%98%9F%E5%88%97%E4%B8%8E%E9%A1%BA%E7%8E%AF%E9%98%9F%E5%88%97/"/>
      <url>/2023/01/30/%E9%98%9F%E5%88%97%E4%B8%8E%E9%A1%BA%E7%8E%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>队列也是一种受操作约束的<strong>特殊线性表</strong>;进行插入和删除操作的时候 只能在<strong>一端插入</strong>，而在<strong>另一端删除</strong><br>它的插入和删除操作分别发生在表的两头，而一般化的线性表可以在任何位置进行插入和删除<br>数据的插入我们称之为 <strong>入队(AddQ)</strong> ;删除称为 <strong>出队(DeleteQ)</strong><br>这种表又被称为 先入先出表<br>抽象数据类型描述为:<br><img src="http://cdn.zsenhe.com/a1065de7650b42ce823fe972dc9cde60" alt="image.png"><br>队列的存储实现一样有两种方式,顺序存储与链式存储;顺序存储的实现如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxSize = <span class="number">1000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> &#123;</span></span><br><span class="line"><span class="type">char</span> data[MaxSize];</span><br><span class="line"><span class="type">int</span> front,rear;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">Queue</span>;</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>对比堆栈，它只在表的一端进行插入删除，只需要一个top分量;而队列需要使用两个分量 <strong>front,rear</strong> 分别表示队列的队头和队尾<br><img src="http://cdn.zsenhe.com/15c990750e184a1b9d1aa685cfc8f454" alt="image.png"><br>在一开始,front,rear指针都指向-1这个下标，队列是空的<br><img src="http://cdn.zsenhe.com/66e2a2ff8d574f418c852574f7ab58f4" alt="image.png"><br>加入一个元素，rear往后挪动指向0<br><img src="http://cdn.zsenhe.com/3d72a00da03547f0b830d97556bebeed" alt="image.png"><br>重复这个过程，此时rear指向下标2。<br>接下来，我们想要删除一个元素，依照队列的原则，先被弹出的是Job1这个元素。注意到在删除之前front仍然指向-1，实际上<strong>front是指向队列的头一个元素再前面的下标</strong><br><img src="http://cdn.zsenhe.com/f2f0d0a7faf74f52abc68c6ee466ef98" alt="image.png"><br>指向出队操作，Job1出队，<strong>front向后移; <strong>综上，</strong>入队rear+1，出队front+1</strong></p><h4 id="顺环队列"><a href="#顺环队列" class="headerlink" title="顺环队列"></a>顺环队列</h4><p><img src="http://cdn.zsenhe.com/de12cfb91b6c43389de5948197bf3b60" alt="image.png"><br>队列中时常会有这样的状态，数组尾部加满了，但前面已经有元素出队;rear无法再往后移，但数组前面还有空闲资源。那怎么办呢？重新开辟一个更大的数组势必要有元素移动等操作，我们可以用 <strong>顺环队列</strong><br><img src="http://cdn.zsenhe.com/7c08c076699f41cf8279d17f2280c07f" alt="image.png"><br>一开始的时候，front，rear两个指针都指向某个位置，front&#x3D;&#x3D;rear时队列是空的<br><img src="http://cdn.zsenhe.com/ded3ae774104430f94bae5594feedbe9" alt="image.png"></p><p>指向队列的一般操作，此时队列来到了这个状态，总共6个分量，此时已经有5个被占满了;这个时候，我们想再往里插入一个元素，加入之后rear+1&#x3D;1,front也等于1，诶，根据前面的说法，front&#x3D;rear时队列为空，但里面明明满满当当的元素啊这就矛盾了，<strong>当front&#x3D;&#x3D;rear时，队列是空的还是满的呢？</strong><br>根本原因在于，我们判别队列状态时，根据的是front和rear之间距离的相对关系来判断的，对于一个大小为n的队列，他们之间的差距有n种情况;而队列状态有几种情况呢？是n+1吧（空集也算一个)，而front和rear的差距只有n种情况，<strong>也就是说我们想使用n种的状态来区分实际上存在的n+1种情况</strong><br>就像用一个bit来区分3种情况一样不可能，这就是它的根本原因；既然原因找到了，自然也有解决的方案</p><blockquote><ol><li>使用一个额外的tag来区分标记 (当入队的时候tag++，出队的时候tag–，以tag来判断队列的状态)</li><li>仅使用n-1个数组空间（如此对于n&#x3D;3大小的数组，它的元素装载只有(0,1,2)三种情况)</li></ol></blockquote><p>最优雅的是采取第二种方案，对于入队操作，我们这样写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">addQ</span><span class="params">(Queue q,<span class="type">char</span> item)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>((q-&gt;rear+<span class="number">1</span>)%MaxSize == q-&gt;front)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;队列已满&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">q-&gt;rear = (q-&gt;rear+<span class="number">1</span>)%MaxSize;</span><br><span class="line">q-&gt;data[q-&gt;rear] = item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用求余来取得下一个存放的位置，当下一个位置与front碰上的时候，队列已经满了<br>对于出队操作:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="title function_">deleteQ</span><span class="params">(Queue q)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(q-&gt;front==q-&gt;rear)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">//队列空 </span></span><br><span class="line">&#125;</span><br><span class="line">q-&gt;front = (q-&gt;front+<span class="number">1</span>)%MaxSize; </span><br><span class="line"><span class="keyword">return</span> q-&gt;data[q-&gt;front];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>堆栈与表达式求值</title>
      <link href="/2023/01/28/%E5%A0%86%E6%A0%88%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
      <url>/2023/01/28/%E5%A0%86%E6%A0%88%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是堆栈"><a href="#什么是堆栈" class="headerlink" title="什么是堆栈?"></a>什么是堆栈?</h3><p>堆栈是一种线性结构，也是一种特殊的线性表；堆栈在计算机学科中有着广泛的应用，如函数调用,递归,表达式求值等（考虑一下游戏中ui界面的调用，打开商城选择商品会蹦出来一个“结算”的子界面，此时玩家按下esc，该关掉哪个呢？肯定是遵守先进后出的原则先关掉结算界面吧，这就是堆栈的应用了）<br>思考一下计算机表达式求值的问题，如对于以下这个式子</p><blockquote><p>5+6&#x2F;2-2*4</p></blockquote><p>正确理解是:</p><blockquote><p>5+3-2*4 &#x3D; 8-8 &#x3D; 0</p></blockquote><p>由两类对象构成的:</p><blockquote><p>运算数,如2,4,5<br>运算符号,如+,-,*,&#x2F;</p></blockquote><p>由于不同运算符号优先级不同，使得求解变得较为复杂，而归根结底原因是我们把表达式把运算符号放在运算数中间<br>反过来，如果我们在遇到运算符号时已经知道两个运算数了，那么就简单许多了吧，这种表示叫 <strong>后缀表达式</strong>，在平常我们习惯使用的名为 <strong>中缀表达式</strong><br><img src="http://cdn.zsenhe.com/610226c94973434290f3515be4a01524" alt="image.png"></p><blockquote><p>后缀表达式求值策略: <strong>从左到右扫描，逐个处理运算数和运算符号</strong></p></blockquote><p>按照这种策略，我们需要一种数据结构来有效的组织,记住运算数;当需要运算时能取得最后两个记住的运算数。<br>这样的数据结构有一个特点，先存入的后取出，后存入的先取出，这实际上就是 <strong>堆栈</strong><br>比如表达式</p><blockquote><p>6 2 &#x2F; 3 - 4 2 * +</p></blockquote><p>它的求值过程如图<br><img src="http://cdn.zsenhe.com/yz89i-168n2.gif" alt="image.png"><br>它是一个<strong>受约束的线性表</strong>，只能在一端（栈顶）进行插入与删除，插入我们称为<strong>入栈</strong>，删除数据为<strong>出栈</strong><br><img src="http://cdn.zsenhe.com/38559719ea2b42d6a01e239807059922" alt="image.png"><br>堆栈的操作流程图<br><img src="http://cdn.zsenhe.com/695b87c855c5422fb9e6b105e43155f8" alt="image.png"></p><h3 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h3><p>既然它是线性表，很自然而然的我们可以用数组来实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> *<span class="title">Stack</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SNode</span>&#123;</span></span><br><span class="line"><span class="type">char</span> data[];</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>top用于记录栈顶的位置，实际上代表了栈顶位置的数组下标</p><h4 id="插入与删除操作"><a href="#插入与删除操作" class="headerlink" title="插入与删除操作:"></a>插入与删除操作:</h4><p><strong>1.入栈</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(Stack <span class="built_in">stack</span>,<span class="type">char</span> item)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">stack</span>-&gt;top==MAXSIZE<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;堆栈满&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">stack</span>-&gt;data[++(<span class="built_in">stack</span>-&gt;top)] = item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.出栈</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="title function_">pop</span><span class="params">(Stack <span class="built_in">stack</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">stack</span>-&gt;top==<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">stack</span>-&gt;data[(<span class="built_in">stack</span>-&gt;top)--]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表实现堆栈"><a href="#链表实现堆栈" class="headerlink" title="链表实现堆栈"></a>链表实现堆栈</h3><p>线性表可以使用链表实现，堆栈作为一个特殊的线性表当然也可以；栈的链式存储结构实际上就是一个单链表，叫做链栈。插入和删除操作指南在链栈的栈顶进行。<br>那么问题来了，栈顶指针top应该定义在链表的哪一头呢？<br>答案当然是头结点，别忘记这是单链表，无法寻找到上一个节点，当我们用尾结点作为top时，删除操作是无法进行的（双链表当然可以，但要为此多写一些代码，和初衷不符）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> *<span class="title">Stack</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SNode</span>&#123;</span></span><br><span class="line"><span class="type">char</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们定义CreateStack函数来生成一个空的堆栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stack <span class="title function_">createStack</span><span class="params">()</span>&#123;</span><br><span class="line">Stack s = (Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> SNode));</span><br><span class="line">s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据代码，我们知道当头节点next指向NULL时为空栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">isEmpty</span><span class="params">(Stack s)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> s-&gt;next==<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入栈操作"><a href="#入栈操作" class="headerlink" title="入栈操作"></a>入栈操作</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="type">char</span> item,Stack <span class="built_in">stack</span>)</span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> * <span class="title">tmpCell</span> =</span> (<span class="keyword">struct</span> SNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> SNode));</span><br><span class="line">tmpCell-&gt;data = item;</span><br><span class="line">tmpCell-&gt;next = <span class="built_in">stack</span>-&gt;next;</span><br><span class="line"><span class="built_in">stack</span>-&gt;next = tmpCell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="title function_">pop</span><span class="params">(Stack <span class="built_in">stack</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty(<span class="built_in">stack</span>))<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> * <span class="title">firstCell</span> =</span> <span class="built_in">stack</span>-&gt;next;</span><br><span class="line"><span class="built_in">stack</span>-&gt;next = firstCell-&gt;next;</span><br><span class="line"><span class="type">char</span> topItem = firstCell-&gt;data;</span><br><span class="line"><span class="built_in">free</span>(firstCell);</span><br><span class="line"><span class="keyword">return</span> topItem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下是进行</p><blockquote><p>Stack stack &#x3D; createStack();<br>push(‘c’,stack);<br>push(‘a’,stack);<br>cout &lt;&lt; pop(stack);</p></blockquote><p>操作的链表状态过程<br><img src="http://cdn.zsenhe.com/00b452f4eb5c4ec9b745f4cb2d8dece8" alt="image.png"><br>输出结果为</p><blockquote><p>a</p></blockquote><h3 id="表达式问题"><a href="#表达式问题" class="headerlink" title="表达式问题"></a>表达式问题</h3><p>现在回过头来看前面的表达式问题，现在我们可以很方便的实现后缀表达式；但我们更关心的是我们更常使用的中缀表达式，既然前者的运算更加方便，那么有没有办法进行转换呢？<br>观察一个简单的例子: 2+9&#x2F;3-5 -&gt; <strong>2 9 3 &#x2F; + 5 -</strong><br>不难发现如下定义的规则:</p><blockquote><p>1.运算数相对顺序不变<br>2.运算符号顺序发生改变<br>  2.1 需要存储“等待”中的运算符号<br>  2.2 要将当前运算符号与“等待中”的最后一个运算符号比较</p></blockquote><p>模拟一下这个过程:<br>从左到右扫描这个表达式，遇到运算数时直接输出，在第二次扫描碰到了+号，能不能输出呢？显然是不行的，后面&#x2F;的优先级更高，那么+入栈，输出9，此时输出的结果:</p><blockquote><p>2 9</p></blockquote><p>栈中的元素</p><blockquote><p>+</p></blockquote><p>继续扫描，遇到了“&#x2F;“ ,能不能输出呢？此时需要和栈顶元素进行比较，&#x2F;的优先级比+高，无法保证是安全的，&#x2F;入栈，输出3;此时栈中元素为</p><blockquote><p>&#x2F;<br>+</p></blockquote><p>接下来碰到了最后一个运算符-，和栈顶元素对比，-的优先级比&#x2F;低，那么可以出栈了，此时输出结果为</p><blockquote><p>2 9  3 &#x2F;  +</p></blockquote><p>“-”入栈，扫描并输出最后一个运算数5，到尾了，将栈中元素全部输出。<br>那么中缀表达式 “2+9&#x2F;3-5”的后缀表达式为:</p><blockquote><p>2 9 3 &#x2F; + 5 -</p></blockquote><p><strong>有括号怎么办？</strong><br>比如对于表达式 *<em>a</em>(b+c)&#x2F;d **,出现了括号，该这么进行转换呢;基本策略跟无括号时一样，但要记住:<br>对于左括号”(“ 在栈外时优先级高于任意运算符，在栈内时优先级最低;扫描过程中遇到右括号”)”时,<br>取出栈内”)”以上的所有元素<br>总结一下，我们得到了这样的流程:<br><img src="http://cdn.zsenhe.com/4fe18561d5ea4db0ba2148a810140b95" alt="image.png"><br>可以看到，为了进行方便的转换，我们需要一种结构来按顺序保留运算符号，在需要的时候取出，当然就是 **堆栈 **了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>线性表的实现与多项式表示</title>
      <link href="/2023/01/28/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%A1%A8%E7%A4%BA/"/>
      <url>/2023/01/28/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%A1%A8%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<p><strong>&lt;线性结构&gt;笔记目录</strong></p><blockquote><p>线性表的实现与多项式表示 <a href="http://www.zsenhe.com/article/83">http://www.zsenhe.com/article/83</a><br>堆栈与表达式求值问题 <a href="http://www.zsenhe.com/article/84">http://www.zsenhe.com/article/84</a><br>队列，顺环队列 <a href="http://www.zsenhe.com/article/85">http://www.zsenhe.com/article/85</a></p></blockquote><h2 id="引子——多项式表示"><a href="#引子——多项式表示" class="headerlink" title="引子——多项式表示"></a>引子——多项式表示</h2><p>线性结构是数据结构里最基础，最简单的一种类型;其中最典型的便是“线性表”，什么是线性表呢?<br>考虑一下一元多项式的表示:<br><img src="http://cdn.zsenhe.com/9ec731363bc942fba6a04af8a4641e68" alt="image.png"><br>这样的多项式基本运算包括: 两个多项式相加，相乘，相减等;那么，怎么用程序设计语言来表示这样一个多项式及运算呢?在程序设计语言里面，要表示一个问题，首先要分析一下问题的关键数据和关键信息;对于多项式而言，它的关键信息主要有它的项数和最高指数。<br>其中一种最简单的方法便是 <strong>顺序存储的直接表示</strong><br>直接使用一个数组来表示多项式的有关信息，数组各分量对应多项式各项</p><blockquote><p>a[i] 项 x^i 的系数;i为对应的指数</p></blockquote><h2 id="比方对于下面这个多项式-表示为-这样用6个分量来表示该多项式-这样的表示是很简单的，且运算也方便如对于两个多项式的相加，即变成了-两个数组对应分量的相加但该表示方式也是有问题的，如果我们要存储那么需要2001长度的数组来表示，而这2001个分量，只有两项是非0的，于是便造成了巨大的空间浪费-且运算的时候会多一些没必要的操作（大量的-0）"><a href="#比方对于下面这个多项式-表示为-这样用6个分量来表示该多项式-这样的表示是很简单的，且运算也方便如对于两个多项式的相加，即变成了-两个数组对应分量的相加但该表示方式也是有问题的，如果我们要存储那么需要2001长度的数组来表示，而这2001个分量，只有两项是非0的，于是便造成了巨大的空间浪费-且运算的时候会多一些没必要的操作（大量的-0）" class="headerlink" title="比方对于下面这个多项式:表示为:这样用6个分量来表示该多项式;这样的表示是很简单的，且运算也方便如对于两个多项式的相加，即变成了 两个数组对应分量的相加但该表示方式也是有问题的，如果我们要存储那么需要2001长度的数组来表示，而这2001个分量，只有两项是非0的，于是便造成了巨大的空间浪费;且运算的时候会多一些没必要的操作（大量的+0）"></a>比方对于下面这个多项式:<br><img src="http://cdn.zsenhe.com/36d1f3426b6b49fc95c27714b6a08de2" alt="image.png"><br>表示为:<br><img src="http://cdn.zsenhe.com/bfc44aec03804d0dae820ad42fe3ba7e" alt="image.png"><br>这样用6个分量来表示该多项式;这样的表示是很简单的，且运算也方便<br>如对于两个多项式的相加，即变成了 <strong>两个数组对应分量的相加</strong><br>但该表示方式也是有问题的，如果我们要存储<br><img src="http://cdn.zsenhe.com/QQ%E5%9B%BE%E7%89%8720230129004327.jpg" alt="http://cdn.zsenhe.com/QQ%E5%9B%BE%E7%89%8720230129004327.jpg"><br>那么需要2001长度的数组来表示，而这2001个分量，只有两项是非0的，于是便造成了巨大的空间浪费;且运算的时候会多一些没必要的操作（大量的+0）</h2><p>有没有可能只表示非0项呢？我们可以将多项式看成一个由 <strong>系数和指数</strong> 组成的二元组集合，使用结构数组来表示这样的多项式<br><img src="http://cdn.zsenhe.com/d8d5a0867b14463b9230d49d140a6c00" alt="image.png"><br>对于前面的x+2x^2000,只需要使用两个分量来存储;且同样运算很方便，其中要点是每一项按指数大小降序存储<br>例如加法运算，图中的两个多项式，他们用分量表示为<br>p1:</p><blockquote><p>(9,12) (15,8) (3,2)</p></blockquote><p>p2:</p><blockquote><p>(26,19) (-4,8) (-13,6) (82,0)</p></blockquote><p>从头开始，比较两个多项式当前指数较大的那一项，例如第一项选择 (9,12) 与(26,19),前面提过我们需要按照指数大小降序排放，那么选择较大那一项输出(26,19),接下来(9,12)与(-4,8)比较，显然输出（9,12) ;接下来比较的两个分量指数相同，系数相减，输出和（11,8），接下来的比较输出(-13,6) (3,2);最后是p2的剩余项(82,0)<br>最后得到新的多项式<br><img src="http://cdn.zsenhe.com/359ed7388c784507905677e02c005bc4" alt="image.png"><br>对比一下，我们使用结构体的形式存储在数组中表示非0项，这是一种节省空间的方法<br>当然，我们也可以使用一种其他形式存储多项式 <strong>链表</strong><br>它的表示方法为: 每个节点存储多项式中的一个非0项，包括系数和指数两个数据域以及一个指针域<br><img src="http://cdn.zsenhe.com/8f30601630374b568f2d66dfd35c283d" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct PolyNode *Polynomial;</span><br><span class="line">struct PolyNode &#123;</span><br><span class="line">  int coef; //系数</span><br><span class="line">  int expon; //指数</span><br><span class="line">  Polynomial link; //指向下一项</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面的两个多项式，他们以链表的形式存储状态为：<br><img src="http://cdn.zsenhe.com/7eda2ff118144c53842f5fd16d50c231" alt="image.png"><br>运算的逻辑过程与数组表现的形式一样</p><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>由多项式的问题得知: 同一个问题可以有不同的表现方法，也就是不同的存储方法；对于多项式的表示，要么使用数组要么使用链表。实际上很多问题与多项式表示是有共性的，我们的最终目标都是：<strong>管理，组织一个有序的线性序列，归结为线性表问题</strong></p><h3 id="什么是线性表"><a href="#什么是线性表" class="headerlink" title="什么是线性表?"></a>什么是线性表?</h3><blockquote><p>由同类型数据元素构成有序序列的线性结构:<br>表中元素个数称为线性表的 <strong>长度</strong><br>线性表没有元素时称为 <strong>空表</strong><br>表起始位置称 <strong>表头</strong>，表结束位置称 <strong>表尾</strong></p></blockquote><p>对线性表来说，它的抽象数据类型描述为:<br><img src="http://cdn.zsenhe.com/5c3aac5a926346f6bc156a613f393b81" alt="image.png"></p><h3 id="线性表的存储"><a href="#线性表的存储" class="headerlink" title="线性表的存储"></a>线性表的存储</h3><p>学习数据结构时我们最关心的是它的存储，对于线性表的存储其中最简单的一种方式便是顺序存储，即使用数组的方法实现<br><img src="http://cdn.zsenhe.com/5ea7f1ca13bb43589b4b7631976076fa" alt="image.png"><br>这种方式需要关心的是线性表的 <strong>数据类型</strong> 以及 <strong>长度</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    ElementType data[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> <span class="title">L</span>;</span></span><br></pre></td></tr></table></figure><p>使用指针<strong>last</strong>代表线性表的最后一个元素,访问长度时执行 <strong>L.last+1</strong><br>这样的结构就可以抽象的实现线性表,比如说当想要访问下标为i的元素时使用 <strong>L.Data[i]</strong></p><h3 id="主要操作的实现"><a href="#主要操作的实现" class="headerlink" title="主要操作的实现"></a>主要操作的实现</h3><p>为了方便，我们使用指针来传递线性表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">  <span class="type">char</span> data[MAXSIZE];</span><br><span class="line">  <span class="type">int</span> last;</span><br><span class="line">&#125;;<span class="keyword">typedef</span> LNode *List;</span><br></pre></td></tr></table></figure><p><strong>1.初始化操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List <span class="title function_">MakeEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">  List Ptrl;</span><br><span class="line">  Ptrl = (List )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LNode));</span><br><span class="line">  Ptrl-&gt;last = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> Ptrl;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>注意初始化时表长度为-1，即表示数组长度为0<br><strong>2.查找操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Find</span><span class="params">(<span class="type">char</span> x,List Ptrl)</span>&#123;</span><br><span class="line">  <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;=Ptrl-&gt;last&amp;&amp;Ptrl-&gt;data[i]!=x) i++;</span><br><span class="line">  <span class="keyword">if</span>(i&gt;Ptrl-&gt;last) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//未寻找到</span></span><br><span class="line">  <span class="keyword">return</span> i; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从0开始遍历表，当while循环退出时，要么i&#x3D;&#x3D;ptrl-&gt;last+1要么data[i]&#x3D;x，这两种情况分别对应着 <strong>未寻找到元素</strong> 和 <strong>找到元素</strong> 它的时间复杂度显然为<strong>O(n)</strong><br><strong>3.插入</strong><br>插入的目的是在线性表的第i个位置上插入一个新的元素，传入的i指的是[1,last+1] (1即是表头，last+1表尾);所以实际上我们要把元素插入到i-1的位置上<br><img src="http://cdn.zsenhe.com/b3454f8a7bdd4197b64f5b4b4fb40a06" alt="image.png"><br>那么首先要做的就是把i-1之后的所有元素往后挪动一位，我们用一个循环来做这件事</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(<span class="type">char</span> x,<span class="type">int</span> i,List Ptrl)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(Ptrl-&gt;last==MAXSIZE<span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="comment">//表空间已满，无法插入</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;full&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;Ptrl-&gt;last+<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;位置不合法&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=Ptrl-&gt;last;j&gt;=i<span class="number">-1</span>;j--) <span class="comment">//从右开始挪动元素</span></span><br><span class="line">    Ptrl-&gt;data[j+<span class="number">1</span>] = Ptrl-&gt;data[j];</span><br><span class="line">  Ptrl-&gt;data[i<span class="number">-1</span>] = x; <span class="comment">//插入新元素x</span></span><br><span class="line">  Ptrl-&gt;last++; <span class="comment">//last仍指向最后一个元素</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>该操作的时间复杂度依然是O(n)<br><strong>4.删除元素</strong><br>我们要把第i-1个元素移出，那么实际上要做的把i及之后的元素全部往前挪，这个过程按从左往右的顺序做</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Delete</span><span class="params">(<span class="type">int</span> i,List Ptrl)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;Ptrl-&gt;last+<span class="number">1</span>) <span class="keyword">return</span>; <span class="comment">//判断位置是否合法 </span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=Ptrl-&gt;last;j++) </span><br><span class="line">    Ptrl-&gt;data[j<span class="number">-1</span>] = Ptrl-&gt;data[j];</span><br><span class="line">  Ptrl-&gt;last--; </span><br><span class="line">  <span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h3><p>线性表除了用数组实现，同样可以使用链表来组织<br>线性表使用数组实现时，两个相邻的元素不止逻辑上是相邻的，在物理上也是相邻的（数组在内存中也是连续存放的一片空间）；而我们使用链表实现时，实际上是<strong>要求两个元素只在逻辑上相邻（通过“链”建立），而不要求物理上相邻</strong><br>这样的好处是进行插入，删除操作时，只需要修改“链”的指向，而不需要像数组实现那样移动整个空间，这会节省很多时间<br><img src="http://cdn.zsenhe.com/2e646ffaa2cf488691b0d5da3d8dcb81" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">List</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line"><span class="type">char</span> data;</span><br><span class="line">List next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如图，链表中每个节点拥有两个分量，Data是节点所对应的数据，Next指向下一个节点</p><h4 id="访问序号为i的元素-求线性表的长度？"><a href="#访问序号为i的元素-求线性表的长度？" class="headerlink" title="访问序号为i的元素?求线性表的长度？"></a>访问序号为i的元素?求线性表的长度？</h4><p>上文提到链实现线性表在插入删除方面有着数组无可比拟的高效,那除此之外呢?在数组实现中访问序号为i的元素是很简单的事，直接ElelementType[i-1]即可;同样，我们也可以直接取last来知道线性表的长度.但在链表中，这两个操作比起数组实现就复杂了许多<br><strong>求表长</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">length</span><span class="params">(List ptrl)</span>&#123;</span><br><span class="line">  List p = ptrl; <span class="comment">//指向链表头结点 </span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(p)&#123; <span class="comment">//当next指向null时退出循环（代表已经走到最后一个节点  了 </span></span><br><span class="line">  p = p-&gt;next;</span><br><span class="line">  j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为需要遍历整个链表，它的时间复杂度为O(n);在数组实现中该操作是O(1)的<br><strong>按序号访问节点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List <span class="title function_">findKth</span><span class="params">(<span class="type">int</span> k,List ptrl)</span>&#123;</span><br><span class="line">List p = ptrl; <span class="comment">//指向头结点 </span></span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>;  </span><br><span class="line"><span class="keyword">while</span>(!p&amp;&amp;i&lt;k)&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==k) <span class="keyword">return</span> p; <span class="comment">//p不为null意味着找到了这个节点 </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当while循环退出时，意味着!p或者i&lt;k这两个条件之一被破坏了，当p不为null时，即找到了目标节点<br><strong>按值查找</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List <span class="title function_">findKth0</span><span class="params">(<span class="type">char</span> target,List ptrl)</span>&#123;</span><br><span class="line">List p = ptrl;</span><br><span class="line"><span class="keyword">while</span>(!p&amp;&amp;p-&gt;data!=target) p = p-&gt;next;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入与删除"><a href="#插入与删除" class="headerlink" title="插入与删除"></a>插入与删除</h4><p><strong>插入</strong><br>将数据插入到i的位置上，意味着我们要将数据插入到i-1的后面，为了完成这个操作<br>我们需要进行以下几个步骤的操作</p><blockquote><p>1.申请一片新的内存，使用s指向它<br>2.找到链表的i-1个节点，使用p指向<br>3.修改指针，插入节点<br><img src="http://cdn.zsenhe.com/483d2237a9c34fcebce096079b166d8b" alt="image.png"><br>修改指针的动作有两步，将s-&gt;next指向p-&gt;next,再将p-&gt;next指向s(注意不要搞反)</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">List <span class="title function_">insert</span><span class="params">(<span class="type">char</span> x,<span class="type">int</span> i,List ptrl)</span>&#123;</span><br><span class="line">List p,s;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">s = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LNode));</span><br><span class="line">s-&gt;data = x;</span><br><span class="line">s-&gt;next = ptrl;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">p = findKth(i<span class="number">-1</span>,ptrl);</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="comment">//第i-1个节点不存在，无法插入 </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">s = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LNode));</span><br><span class="line">s-&gt;data = x;</span><br><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = s;</span><br><span class="line"><span class="keyword">return</span> ptrl;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>删除</strong><br>删除同理是对指针的修改，同样的使用p指向i-1,申请一个新的指针s指向p-&gt;next,最后将p-&gt;next指向s-&gt;next即可；通过malloc申请的空间要记得free回去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">List <span class="title function_">Delete</span><span class="params">(<span class="type">int</span> i,List ptrl)</span> &#123;</span><br><span class="line">List p,s;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)&#123; <span class="comment">//当要删除表头节点时 </span></span><br><span class="line">s = ptrl; <span class="comment">//指向第一个节点 </span></span><br><span class="line"><span class="keyword">if</span>(ptrl!=<span class="literal">NULL</span>) ptrl = ptrl-&gt;next; <span class="comment">//从链表中删除 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">free</span>(s);</span><br><span class="line"><span class="keyword">return</span> ptrl;</span><br><span class="line">&#125;</span><br><span class="line">p = findKth(i<span class="number">-1</span>,ptrl);</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="comment">//i-1个位置不存在 </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">//第i个位置不存在 </span></span><br><span class="line">s = p-&gt;next;</span><br><span class="line">p-&gt;next = s-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(s);</span><br><span class="line"><span class="keyword">return</span> ptrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的代码存档:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">1000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line"><span class="type">char</span> data[MAXSIZE];</span><br><span class="line"><span class="type">int</span> last;</span><br><span class="line">&#125;;<span class="keyword">typedef</span> LNode *List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//建表 </span></span><br><span class="line">List <span class="title function_">MakeEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">List Ptrl;</span><br><span class="line">Ptrl = (List )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LNode));</span><br><span class="line">Ptrl-&gt;last = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> Ptrl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找 </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Find</span><span class="params">(<span class="type">char</span> x,List Ptrl)</span>&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=Ptrl-&gt;last&amp;&amp;Ptrl-&gt;data[i]!=x) i++;</span><br><span class="line"><span class="keyword">if</span>(i&gt;Ptrl-&gt;last) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//未寻找到</span></span><br><span class="line"><span class="keyword">return</span> i; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(<span class="type">char</span> x,<span class="type">int</span> i,List Ptrl)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Ptrl-&gt;last==MAXSIZE<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;Ptrl-&gt;last+<span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=Ptrl-&gt;last;j&gt;=i<span class="number">-1</span>;j--)</span><br><span class="line">Ptrl-&gt;data[j+<span class="number">1</span>] = Ptrl-&gt;data[j];</span><br><span class="line">Ptrl-&gt;data[i<span class="number">-1</span>] = x;</span><br><span class="line">Ptrl-&gt;last++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delete</span><span class="params">(<span class="type">int</span> i,List Ptrl)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;Ptrl-&gt;last+<span class="number">1</span>) <span class="keyword">return</span>; <span class="comment">//判断位置是否合法 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=Ptrl-&gt;last;j++) Ptrl-&gt;data[j<span class="number">-1</span>] = Ptrl-&gt;data[j];</span><br><span class="line">Ptrl-&gt;last--; </span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">List L = MakeEmpty();</span><br><span class="line">Insert(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>,L);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Find(<span class="string">&#x27;b&#x27;</span>,L);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">List</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line"><span class="type">char</span> data;</span><br><span class="line">List next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">length</span><span class="params">(List ptrl)</span>&#123;</span><br><span class="line">List p = ptrl; <span class="comment">//指向链表头结点 </span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p)&#123; <span class="comment">//当next指向null时退出循环（代表已经走到最后一个节点了 </span></span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;<span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找操作 （按序号 </span></span><br><span class="line">List <span class="title function_">findKth</span><span class="params">(<span class="type">int</span> k,List ptrl)</span>&#123;</span><br><span class="line">List p = ptrl; <span class="comment">//指向头结点 </span></span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>;  </span><br><span class="line"><span class="keyword">while</span>(p&amp;&amp;i&lt;k)&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==k) <span class="keyword">return</span> p; <span class="comment">//p不为null意味着找到了这个节点 </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按值查找 </span></span><br><span class="line">List <span class="title function_">findKth0</span><span class="params">(<span class="type">char</span> target,List ptrl)</span>&#123;</span><br><span class="line">List p = ptrl;</span><br><span class="line"><span class="keyword">while</span>(p&amp;&amp;p-&gt;data!=target) p = p-&gt;next;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">List <span class="title function_">insert</span><span class="params">(<span class="type">char</span> x,<span class="type">int</span> i,List ptrl)</span>&#123;</span><br><span class="line">List p,s;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">s = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LNode));</span><br><span class="line">s-&gt;data = x;</span><br><span class="line">s-&gt;next = ptrl;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">p = findKth(i<span class="number">-1</span>,ptrl);</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="comment">//第i-1个节点不存在，无法插入 </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">s = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LNode));</span><br><span class="line">s-&gt;data = x;</span><br><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = s;</span><br><span class="line"><span class="keyword">return</span> ptrl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">List <span class="title function_">Delete</span><span class="params">(<span class="type">int</span> i,List ptrl)</span> &#123;</span><br><span class="line">List p,s;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)&#123; <span class="comment">//当要删除表头节点时 </span></span><br><span class="line">s = ptrl; <span class="comment">//指向第一个节点 </span></span><br><span class="line"><span class="keyword">if</span>(ptrl!=<span class="literal">NULL</span>) ptrl = ptrl-&gt;next; <span class="comment">//从链表中删除 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">free</span>(s);</span><br><span class="line"><span class="keyword">return</span> ptrl;</span><br><span class="line">&#125;</span><br><span class="line">p = findKth(i<span class="number">-1</span>,ptrl);</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="comment">//i-1个位置不存在 </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">//第i个位置不存在 </span></span><br><span class="line">s = p-&gt;next;</span><br><span class="line">p-&gt;next = s-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(s);</span><br><span class="line"><span class="keyword">return</span> ptrl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> <span class="title">L</span>;</span></span><br><span class="line">List Ptrl;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>字节青训营2.1单元测试</title>
      <link href="/2023/01/18/%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A521%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/01/18/%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A521%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>::: hljs-center</p><p><img src="https://p4.itc.cn/q_70/images03/20210302/5f41916b1f4f43e28cf88e71b2fb7da6.gif" alt="https://p4.itc.cn/q_70/images03/20210302/5f41916b1f4f43e28cf88e71b2fb7da6.gif"></p><p>:::<br>::: hljs-center</p><p> <font size="6">单元测试</font></p><p>:::</p><p>在学习阶段练手的项目通常会直接丢到环境上去跑，有了BUG就现修;在企业开发时，一个小小的BUG可能会导致大量的损失，因此在程序上线前对程序进行测试时是必不可少的。</p><p><img src="http://cdn.zsenhe.com/9508942dafaa4d54bdb47fb5d28a9816" alt="image.png"><br>测试类型分为 <strong>回归测试，集成测试，单元测试</strong></p><p>回归测试是指在发生修改之后重新测试先前的测试以保证修改的正确性。理论上，软件产生新版本，都需要进行回归测试，验证以前发现和修复的错误是否在新软件版本上再次出现;集成测试则是使用一些自动化的工具，进行多次的回归测试操作</p><p>单元测试则是在代码维度，如开发时对函数进行测试。从上由下的的覆盖率和成本是逐步降低的，所以说单元测试的覆盖率在很高程度上决定着质量</p><p><strong><font size="4">单元测试的组成部分</font></strong></p><p><img src="http://cdn.zsenhe.com/c770fa5a060e435bac4225560098b142" alt="image.png"></p><p>单元测试的组成部分包括: <strong>输入,测试单元,输出,与期望输出的校对</strong> 测试单元的包括较为宽泛，如包含: 函数，接口，模块，聚合的一些大函数;通过输出与期望值校对来反应是否和预期的效果相符</p><p>通过多个单元测试我们可以保证代码的质量，每次对新的模块进行单元测试，一方面可以保证新模块的正确性，当整体跑通时证明新的模块并没有影响旧模块的正确性（旧的代码也做了单元测试）</p><p>此外单元测试在一定程度下会提升效率，进行单元测试可以很快速的定位到问题，进而防止上线后损失扩大化</p><p><strong><font size="4">单元测试的规则</font></strong></p><p><img src="http://cdn.zsenhe.com/9666ea5e25aa4868935fa7289344b40c" alt="image.png"></p><ol><li>所有测试文件以 <strong>_test.go</strong> 结尾，这样可以方便区分定位</li><li>测试函数以驼峰的形式Test开头，如TestTakePoint</li><li>初始化逻辑放在TestMain中</li></ol><p>以下是一个单元测试的例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package Test</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">func HelloZyy() string &#123;</span><br><span class="line">return &quot;zsh&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestHelloZyy(t *testing.T) &#123;</span><br><span class="line">output := HelloZyy()</span><br><span class="line">expectOutput := &quot;zyy&quot;</span><br><span class="line">if output != expectOutput &#123;</span><br><span class="line">t.Errorf(&quot;Expected %s do not match actual %s&quot;, expectOutput, output)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中HelloZyy是我们的<strong>测试单元</strong>，expectOutput为<strong>期望值</strong><br>output为<strong>输出</strong>，if内条件为<strong>校对</strong><br>使用go test HelloZyy_test.go 进行单元测试<br>结果是<br><img src="http://cdn.zsenhe.com/27b5fd5e93d945088115edaeed8e3527" alt="image.png"><br>显然，这次测试结果是FAIL</p><p><strong><font size="4">测试的覆盖率</font></strong><br>那么如何衡量代码是否经过了足够的测试以及如何评价项目的测试水准呢？那便是<strong>代码覆盖率</strong><br>代码覆盖率越完备对代码正确性越能有保证，直接看一个例子</p><p>judgement.go:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JudgePassLine</span><span class="params">(score <span class="type">int16</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">60</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>judgement_test.go</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package Test</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;github.com/stretchr/testify/assert&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func TestJudgePassLine(t *testing.T) &#123;</span><br><span class="line">isPass := JudgePassLine(70)</span><br><span class="line">assert.Equal(t, true, isPass)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>assert是testify库提供的“断言”功能，有了它不用再使用标准库中testing来编写各种条件判断<br>直接在控制台输入<strong>go get -u github.com&#x2F;stretchr&#x2F;testify</strong> 以安装库</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert.Equal(t, <span class="literal">true</span>, isPass)</span><br></pre></td></tr></table></figure><p>在这行代码中，true是我们的期望值<br>使用指令 <strong>go test judgement_test.go judgement.go –cover</strong>来查询覆盖率<br><img src="http://cdn.zsenhe.com/9b9bb48712d14019921df5d30448883d" alt="image.png"><br>可以看到coverage为66.7%,这个数值是怎么得出来的呢?我们往测试单元JudgePassLine函数中传入了参数70<br>它会执行 </p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">60</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这在函数所有代码中占了2&#x2F;3，覆盖率自然就是66.7%了;接下来修改一下judgement_test.go</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/assert&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestJudgePassLineTrue</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">isPass := JudgePassLine(<span class="number">70</span>)</span><br><span class="line">assert.Equal(t, <span class="literal">true</span>, isPass)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestJudgePassLineFail</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">isPass := JudgePassLine(<span class="number">59</span>)</span><br><span class="line">assert.Equal(t, <span class="literal">true</span>, isPass)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在新的逻辑中，JudgePassLine（）函数所有的代码都会执行一次，再来看看覆盖率<br><img src="http://cdn.zsenhe.com/a17d952acc99485795d90b5e1131f246" alt="image.png"><br>这下是100%了<br>实际项目开发中对覆盖率到达100%是可望不可及的，以下是一个评判覆盖率的标准</p><ol><li>一般覆盖率50~60%;较高覆盖率80%+</li><li>测试分支相互独立，全面覆盖</li><li>测试单元粒度足够小，函数单一职责</li></ol><p>当达到一般覆盖率时，在一定程度上是可以保证主流程是没有问题的，但一些异常的分支是没有覆盖到的；对于资金类的业务（如转账等）对覆盖率的要求会更高，在字节会要求达到85%以上</p><p><strong><font size="4">基准测试</font></strong><br>有时候我们需要对代码进行优化或进行性能分析，go的标准库提供了基准测试的能力<br>以下代码模拟了负载均衡的场景，在十个服务器中随机返回一个，对Select方法进行非并行和并行的基准测试</p><p><strong>randomSelectServer.go</strong>:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;math/rand&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ServerIndex [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitServerIndex</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">ServerIndex[i] = i + <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Select</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ServerIndex[rand.Intn(<span class="number">10</span>)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>randomSelectServer_test.go</strong>:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSelect</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">InitServerIndex()</span><br><span class="line">b.ResetTimer() <span class="comment">// 重置计时器（因为InitServerIndex不在测试范围内）</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">Select()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSelectParallel</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">InitServerIndex()</span><br><span class="line">b.ResetTimer()</span><br><span class="line">b.RunParallel(<span class="function"><span class="keyword">func</span><span class="params">(pb *testing.PB)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> pb.Next() &#123;</span><br><span class="line">Select()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意: 基准测试文件命名存放与单元测试一样，但在_test.go结尾文件中，测试函数需以<strong>Benchmark</strong>开头驼峰命名<br>分别启动两个测试方法:<br><img src="http://cdn.zsenhe.com/c9859774bd614e468f046449b93e53ad" alt="image.png"><br>运行，可以很清晰的看到函数性能和执行次数</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>字节青训营2Go工程进阶与依赖管理</title>
      <link href="/2023/01/17/%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A52Go%E5%B7%A5%E7%A8%8B%E8%BF%9B%E9%98%B6%E4%B8%8E%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/"/>
      <url>/2023/01/17/%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A52Go%E5%B7%A5%E7%A8%8B%E8%BF%9B%E9%98%B6%E4%B8%8E%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>::: hljs-center</p><p><img src="http://cdn.zsenhe.com/5f4357adb3f948ccbdf786942641a8f7" alt="image.png"></p><p>:::</p><p>::: hljs-center</p><p><font size="6">Go工程进阶与依赖管理</font></p><p>:::</p><p><strong><font size="5">并发编程</font></strong></p><p><strong><font size="4">并发与并行的区别</font></strong><br>在谈及这两个概念之前，要先明白他们解决的是一个什么共同的问题。我们知道在单线程环境下，任务是堵塞的，当一个任务在运行的时候，另外一个任务只能等待它完成才能继续。<strong>如果说程序本身是高速公路的收费站，那么任务就是要通行的车辆，在上一辆车检查放行之前，你只能在原地等着</strong>，这样显然是效率很低的，考虑一个web应用，在与用户a通讯的时候，b得等a完成交互才能继续。</p><p>那么怎么解决这个问题呢？我们可以在高速公路上修建多个收费站或者开括多条车道，同时让多辆车通过，这便是并发。考虑土地是物理资源，在一条道上设立多个收费站便是并发，而开括更多条车道便是并行。</p><p>显然物理资源更加昂贵，我们只能采用第一个方案了，大部分语言使用了一种内核态的由操作系统提供的解决方案——<strong>线程(thread)</strong></p><p>还有一个更恰当的比方，一个人（cpu）同时喂两个小孩吃饭，看着像两个小孩在吃饭，实际上只有一个人在喂（这即是并发，一个cpu通过调度不同的任务，当有一个线程唤醒时，其他线程必定堵塞，只是因为切换速度较快导致看起来像同时运行）。而并行当然就是有两个人同时在喂两个小孩吃饭了</p><p><strong><font size="4">协程</font></strong><br>这种解决方案就是最好的了吗？线程在计算机中也是非常昂贵的资源，单个线程栈的内存占用可能达到MB级别!因此在很多情况下，我们可以使用更加廉价的解决方案</p><p>这种看似是线程实际上不是线程的东西我们通常称它为“协程”，协程可以理解为轻量级，<strong>用户级</strong>的线程。</p><p>协程的创建和调度由go本身完成，协程的栈一般在kb级别，一个线程可以调度上万级别的协程，这也是go更加适合高并发场景的原因所在</p><p><strong><font size="4">Goroutine的使用</font></strong></p><p>接下来看看Go为我们提供的<strong>Goroutine</strong><br>下面是一个简单的使用Gouroutine的例子</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(str <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(str)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> say(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">say(<span class="string">&quot;zyy&quot;</span>)</span><br><span class="line"><span class="comment">//阻塞了一秒，为防止子协程未完成之前主线程退出</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码中定义了一个say函数，它每隔一秒打印一次传入的字符串str，重复五次。接下来在主函数中调用了两次say(),并传入两个不同的参数(“hello”和”zyy”),注意到第一个say函数之前声明了 <strong>go</strong>，这意味着一个新的Goroutine协程被运行。</p><p>看看输出的结果，就像同时有两个线程一样神奇。<br><img src="http://cdn.zsenhe.com/2222c485ff2e4abcbfa5c15e8d764faf" alt="image.png"></p><p>实际上并不是真正的并行，将say函数中的time.sleep(second)去掉。再运行一遍<br><img src="http://cdn.zsenhe.com/fdb7c2a027fd44d790ce0abea3bce52d" alt="image.png"><br>怎么又不是交替打印了？就像前文说的那样，同时执行只是一种错觉，只有在一端有空闲（sleep的时候），另一端才会去执行</p><p><strong><font size="4">有可能发生的事故：主线程提前结束</font></strong><br>注意到上面代码main函数中的</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.Sleep(time.Second * <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>了吗?将他注释掉试试。<br><img src="http://cdn.zsenhe.com/a06165f4f0c041498652b522894b5f9d" alt="image.png"><br>为什么不打印”hello”了？这是因为在协程未完成任务时主线程退出了。我们使用了一种很暴力的方式，让主线程睡上十秒钟，这样不管怎么样都会完成了。但在真正工程实践中，我们不可能每个协程都会睡上一两秒，即是说我们无法预测协程的完成时间。<br>正确的方法是使用go标准库提供的 <strong>WaitGroup</strong>，它会更加优雅</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(str <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(str)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">say(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line">say(<span class="string">&quot;zyy&quot;</span>)</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下<br><img src="http://cdn.zsenhe.com/c31da410aa2e4933b42e048279722b15" alt="image.png"><br>cool!，那么它是怎么运行的呢？回顾一下上面的代码<br>time.Sleep(time.Second)被移除，转而使用了wg.Wait()，它会堵塞主线程，什么时候释放呢？<br>看这一行代码</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wg.Add(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>我们往WaitGroup wg里传入了一个参数1，这实际上是WaitGroup内部实现的一个类似计数器的逻辑，当它归0时，Wait的堵塞会释放掉，<br>而计数器递减发生在</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">say(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>defer wg.Done() 这一行代码里<br><strong>defer</strong> 声明的代码的会在函数退出时执行，通常用于关闭io资源，数据库连接等<br>它所声明的代码 wg.Done() 会将WaitGroup的计数器-1，上面的代码中传入的初始值为1<br>即是说: <strong>这个匿名函数在退出时调用wg.Done让计数器归0，主线程也完成了堵塞释放掉</strong><br>怎么样?很优雅吧！</p><p><strong><font size="4">并发安全Lock</font></strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">var</span> count <span class="type">int64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++ &#123;</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">wg.Add(<span class="number">5</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> add()</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="built_in">print</span>(count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下这段代码，每调用一次add会让count+2000,调用了五次，显然结果是10000吧，润一下看看<br><img src="http://cdn.zsenhe.com/d0da386b08a448b78867fbcfefc65bf2" alt="image.png"><br>在多次运行后发现了不对劲，8333？怎么看都不可能吧！事实上这种事故是小概率事件，通常在工程代码中遇到了都很难排查<br>所以对并发安全的认知很重要，我们需要能提前预测出可能发生的事故。对于一个变量的修改并不是一个原子操作，原子操作意味着它是一步完成的，但+&#x3D;这个操作有拥有三个操作，它需要<strong>先取出变量，修改变量，再赋值回去</strong>;试想一下，有一个协程在进行取出变量这个操作，此时又有一个协程赋值了变量，那不是乱套了吗，结果肯定就不会每次都是正确的了。</p><p>为了解决该问题，go提供了完善的方案，我们可以使用sync下的Mutex，修改一下上面的代码</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">var</span> count <span class="type">int64</span></span><br><span class="line"><span class="keyword">var</span> lock sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++ &#123;</span><br><span class="line">lock.Lock()</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line">lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">wg.Add(<span class="number">5</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> add()</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="built_in">print</span>(count)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>锁的原理是，第一次调用Mutex.Lock的时候会打个标记，当第二次调用时会堵塞，直到它被Unlock。<br>使用锁时需格外谨慎，尽量只在有并发安全的地方使用，它会很明显的降低性能;此外，使用锁需检查好逻辑，死锁的情况很容易发生</p><p>（go应该也有类似java的AtomicInteger那样的原子操作包？）</p><p><img src="http://cdn.zsenhe.com/1275ab62b318496c8421c12b61376864" alt="image.png"><br>这下不论如何都能输出正确结果了</p><p><strong><font size="4">协程之间的同步 Channel</font></strong></p><p>那么协程之间怎么进行数据传输通信呢？直接开一个数组或者列表之类的结构，不同协程直接取用不就行了，这样是很危险的。go提倡使用 <strong>通道（Channel）</strong> 来进行内存共享</p><p>通过如下方式来声明一个通道</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">ch0 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>ch为一个不带缓冲的通道，指定了传输数据类型为int，无缓冲意味着每个数据的发送都得等待另一端接收，否则会发送方会发生堵塞。<br>而带缓冲区（ch0，声明了缓冲区大小为3）可以存在多个数据未被接收，此时发送方可继续发送而不会受到堵塞，当然未接收的数据不能超过声明的大小</p><p>这样向一个通道中传输数据</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch &lt;- i <span class="comment">//i为int类型变量</span></span><br></pre></td></tr></table></figure><p>接受数据</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">receive <span class="type">int</span> := &lt;-ch <span class="comment">//赋值给receive</span></span><br></pre></td></tr></table></figure><p>通过for range取出所有数据。（for range会一直读取一个通道，直到channel被关闭）</p><p>来看一段例子</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">ch0 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">//协程a</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(ch)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">ch &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">//协程a</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//关闭channel</span></span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(ch0)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> ch &#123;</span><br><span class="line">ch0 &lt;- i * i</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> ch0 &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该程序由三个协程组成，a协程将 0-9 传入通道ch，b协程将ch中数据取出后进行平方计算传入ch0通道。<br>最后主线程打印出ch0中的所有平方后的结果<br><img src="http://cdn.zsenhe.com/bd81c99d5b944f709262372be6495558" alt="image.png"></p><hr><p><strong><font size="5">依赖管理</font></strong></p><blockquote><p><strong><font size="4"><em>站在巨人的肩膀上</em></font></strong></p></blockquote><p>在实际开发项目中，需要学会站在巨人的肩膀上，使用他人已经封装好的，经过验证的工具库来提升开发效率<br>平常练手的玩具项目基于标准库即可完成，但在实际工程中较为复杂，不可能从0到1编码搭建<br>应把更多精力放在业务逻辑的实现上，其他依赖（如日志，框架，集合）可通过sdk的方式引入</p><p><strong><font size="4"><em>Go的依赖演变</em></font></strong><br>依赖管理并不是Golang的独创，早之前便有许多不同语言的依赖管理工具，如我们java程序员熟知的maven&#x2F;gradle,rust的cargo。<br>Go语言的依赖管理经历了 <strong>GOPATH，GoVendor，GoModule</strong> 三个阶段的演变</p><p><strong><font size="3"><em>GOPATH</em></font></strong></p><p>在初学Go配环境的时候会注意到$GOPATH这个环境变量，它指向应该目录，所有的项目都会依赖这个目录下的源码。这将导致一个问题:<br><strong>如果有不同的项目分别依赖于一个依赖库的不同版本，由于它是一个公共环境变量，并没有任何管理依赖版本的措施，将导致编译出错</strong></p><p><strong><font size="3"><em>GoVendor</em></font></strong></p><p>为了解决这个问题，演进出了GoVendor<br>在项目目录下增加vendor文件夹，将所有的依赖包副本形式存放进去。依赖寻找时会优先从vendor下获取，未寻找到再查询GOPATH</p><p><img src="http://cdn.zsenhe.com/91da94b2fd084b61824e491883c35e29" alt="image.png"></p><p>这样也不是十全十美的，这会带来一个弊端，比如上图中，项目A依赖了PackageB和PackageC，而B和C又同时依赖了D的不同版本，它们作为同一个项目的依赖被同时存放在一个Vendor中，这样很大概率会发生依赖冲突</p><p>发生这种情况归根结底是它依旧依赖着项目源码，而不能很清晰的标注依赖的版本</p><p><strong><font size="4"><em>GoModule</em></font></strong></p><p>于是，GoModule应运而生了，它解决了之前依赖管理系统周多弊端，如同一个库多个版本等问题。</p><p>它会<br>通过 <strong>go.mod</strong> 文件管理依赖包版本<br>通过 <strong>go get&#x2F;go mod</strong> 指令工具管理依赖包</p><p>它实现了依赖管理的终极目标: <strong>定义版本规则和管理项目依赖关系</strong></p><p><img src="http://cdn.zsenhe.com/62fb9de0b0f44c06886946a11348546b" alt="image.png"></p><p><font size="3"><strong>描述一个合法的go.mod</strong></font></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module example/project/app</span><br><span class="line">​</span><br><span class="line"><span class="keyword">go</span> <span class="number">1.16</span></span><br><span class="line">​</span><br><span class="line">require (</span><br><span class="line">    example/lib1 v1<span class="number">.0</span><span class="number">.2</span></span><br><span class="line">    example/lib2 v1<span class="number">.0</span><span class="number">.0</span> <span class="comment">// indirect</span></span><br><span class="line">    example/lib3 v0<span class="number">.1</span><span class="number">.0</span><span class="number">-20190725025543</span><span class="number">-5</span>a5fe074e612</span><br><span class="line">    example/lib4 <span class="number">0.0</span><span class="number">.0</span><span class="number">-20180306012644</span>-bacd9c7efldd <span class="comment">// indirect</span></span><br><span class="line">    example/lib5/v3 v3<span class="number">.0</span><span class="number">.2</span></span><br><span class="line">    example/lib6 v3<span class="number">.2</span><span class="number">.0</span>+incompatible</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这是一个基本的 go.mod 文件，它由主要的三部分组成</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module example/project/app</span><br></pre></td></tr></table></figure><p>标注了依赖管理的基本单元，它让我们知道从哪找到这个模块</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="number">1.16</span></span><br></pre></td></tr></table></figure><p>标注go原生库</p><p><strong>require</strong> 是最关键的一部分，它描述了单元依赖<br>每一个单元依赖由两个部分组成 [Module Path] [Version&#x2F;Pseudo-version]</p><p>通过依赖名称路径（ModulePath)，后面跟上所需的版本来定位一个依赖的某次提交;版本应遵守语义化版本或基于commit的伪版本<br>语义化版本: <strong>${MAJOR}.${MINOR}.${PATCH}</strong><br>如: V1.3.0,V2.3.0<br>基于commit伪版本: <strong>vX.0.0-yyyymmddhhmmss-abcdefgh1234</strong><br>第二部分为时间戳，最后一位为提交时哈希码校验码的12位前缀</p><p>间接依赖与直接依赖:<br>部分依赖会使用 <strong>&#x2F;&#x2F; indirect</strong> 标注,这代表该依赖单元并非由项目直接引入，而是通过其他依赖单元间接引入<br><img src="http://cdn.zsenhe.com/6996febdbfb943079bdb9c2a6370d89f" alt="image.png"></p><p>+incompatible 是为了兼容非语义化版本依赖</p><p><font size="3"><strong>依赖分发</strong></font><br>我们的依赖可能来自于世界各地，它们使用了不同的代码托管（github.gitlab等),它们每分钟可能要接收数以百万次的使用请求，这样会增加第三方托管平台的压力</p><p>为了解决了这个问题，出现了 GoProxy,它作为一个存储站点，会缓存原站中的内容，缓存中的版本也不会改变，实现了稳定可靠的依赖分发。</p><p><img src="http://cdn.zsenhe.com/3a44c12d1dd945339417b6b97b403e87" alt="image.png"></p><p>可以通过设置环境变量 <strong>GOPROXY</strong> 来指定proxy服务器，在中国大陆我们可以使用以下两个站点增加稳定性。寻址的时候会优先选择proxy1<br><a href="https://proxy1.cn/">https://proxy1.cn</a>,<a href="https://proxy2.cn/">https://proxy2.cn</a></p><p><font size="3"><strong>工具命令</strong></font></p><p><font size="3"><strong>go get</strong></font></p><p><img src="http://cdn.zsenhe.com/bfad3443439a41139a6aa557cb9a5652" alt="image.png"></p><p>通过go get指令可以很方便的添加&#x2F;移除依赖<br>如图example.org&#x2F;pkg 为仓库地址,后面可以追加以下的值</p><blockquote><p>@update 默认值，拉取最新的版本<br>@none 删除依赖<br>@v1.1.2 语义化版本<br>@23dfdd5 伪版本<br>@master 分支的最新提交</p></blockquote><p><font size="3"><strong>go mod</strong></font></p><p><img src="http://cdn.zsenhe.com/00c7348e70b2401caf6d17e8d779c8a7" alt="image.png"><br>在项目创建时便需要使用 go mod init 来初始化go.mod文件，这是每一个项目开始前的必要步骤<br>go tidy是一个很实用的指令，在版本迭代中项目可能堆积了很多已经用不上的依赖，在提交前可以执行一遍来清除</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>字节青训营1.2Go的简易词典实现</title>
      <link href="/2023/01/16/%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A512Go%E7%9A%84%E7%AE%80%E6%98%93%E8%AF%8D%E5%85%B8%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/01/16/%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A512Go%E7%9A%84%E7%AE%80%E6%98%93%E8%AF%8D%E5%85%B8%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>::: hljs-center</p><p><img src="http://cdn.zsenhe.com/d74d1dce1770458e94356c8202062abe" alt="a658ddf2a8dd440689d2ee9009e44084.jpg"></p><p>:::</p><p>使用http请求实现的简易词典功能，效果如图<br><img src="http://cdn.zsenhe.com/134fd6bf25da4e929492f095f2e30bb5" alt="dict.png"></p><p>代码实现:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DictRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">TransType <span class="type">string</span> <span class="string">`json:&quot;trans_type&quot;&#x27;`</span></span><br><span class="line">Source    <span class="type">string</span> <span class="string">`json:&quot;source&quot;&#x27;`</span></span><br><span class="line">UserId    <span class="type">string</span> <span class="string">`json:&quot;user_id&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DictResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Rc   <span class="type">int</span> <span class="string">`json:&quot;rc&quot;`</span></span><br><span class="line">Wiki <span class="keyword">struct</span> &#123;</span><br><span class="line">KnownInLaguages <span class="type">int</span> <span class="string">`json:&quot;known_in_laguages&quot;`</span></span><br><span class="line">Description     <span class="keyword">struct</span> &#123;</span><br><span class="line">Source <span class="type">string</span>      <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">Target <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;target&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;description&quot;`</span></span><br><span class="line">ID   <span class="type">string</span> <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Item <span class="keyword">struct</span> &#123;</span><br><span class="line">Source <span class="type">string</span> <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">Target <span class="type">string</span> <span class="string">`json:&quot;target&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;item&quot;`</span></span><br><span class="line">ImageURL  <span class="type">string</span> <span class="string">`json:&quot;image_url&quot;`</span></span><br><span class="line">IsSubject <span class="type">string</span> <span class="string">`json:&quot;is_subject&quot;`</span></span><br><span class="line">Sitelink  <span class="type">string</span> <span class="string">`json:&quot;sitelink&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;wiki&quot;`</span></span><br><span class="line">Dictionary <span class="keyword">struct</span> &#123;</span><br><span class="line">Prons <span class="keyword">struct</span> &#123;</span><br><span class="line">EnUs <span class="type">string</span> <span class="string">`json:&quot;en-us&quot;`</span></span><br><span class="line">En   <span class="type">string</span> <span class="string">`json:&quot;en&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;prons&quot;`</span></span><br><span class="line">Explanations []<span class="type">string</span>      <span class="string">`json:&quot;explanations&quot;`</span></span><br><span class="line">Synonym      []<span class="type">string</span>      <span class="string">`json:&quot;synonym&quot;`</span></span><br><span class="line">Antonym      []<span class="type">string</span>      <span class="string">`json:&quot;antonym&quot;`</span></span><br><span class="line">WqxExample   [][]<span class="type">string</span>    <span class="string">`json:&quot;wqx_example&quot;`</span></span><br><span class="line">Entry        <span class="type">string</span>        <span class="string">`json:&quot;entry&quot;`</span></span><br><span class="line">Type         <span class="type">string</span>        <span class="string">`json:&quot;type&quot;`</span></span><br><span class="line">Related      []<span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;related&quot;`</span></span><br><span class="line">Source       <span class="type">string</span>        <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;dictionary&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">query</span><span class="params">(word <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line">request := DictRequest&#123;TransType: <span class="string">&quot;en2zh&quot;</span>, Source: word&#125;</span><br><span class="line">buf, err := json.Marshal(request)</span><br><span class="line"><span class="keyword">var</span> data = bytes.NewReader(buf)</span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;https://api.interpreter.caiyunai.com/v1/dict&quot;</span>, data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">req.Header.Set(<span class="string">&quot;authority&quot;</span>, <span class="string">&quot;api.interpreter.caiyunai.com&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;application/json, text/plain, */*&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;accept-language&quot;</span>, <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;app-name&quot;</span>, <span class="string">&quot;xy&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;device-id&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;origin&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;os-type&quot;</span>, <span class="string">&quot;web&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;os-version&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;referer&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com/&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua&quot;</span>, <span class="string">`&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;`</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua-mobile&quot;</span>, <span class="string">&quot;?0&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua-platform&quot;</span>, <span class="string">`&quot;Windows&quot;`</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-fetch-dest&quot;</span>, <span class="string">&quot;empty&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-fetch-mode&quot;</span>, <span class="string">&quot;cors&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-fetch-site&quot;</span>, <span class="string">&quot;cross-site&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;x-authorization&quot;</span>, <span class="string">&quot;token:qgemv4jr1y38jyq6vhvi&quot;</span>)</span><br><span class="line"><span class="comment">//发起请求</span></span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"><span class="comment">//读取响应</span></span><br><span class="line">bodyText, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dictResponse DictResponse</span><br><span class="line">err = json.Unmarshal(bodyText, &amp;dictResponse)</span><br><span class="line">fmt.Println(<span class="string">&quot;                 &quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;查询结果:&quot;</span>)</span><br><span class="line">fmt.Println(word, <span class="string">&quot;UK:&quot;</span>, dictResponse.Dictionary.Prons.En, <span class="string">&quot;US:&quot;</span>, dictResponse.Dictionary.Prons.EnUs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> dictResponse.Dictionary.Explanations &#123;</span><br><span class="line">fmt.Println(item)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;                 &quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">reader := bufio.NewReader(os.Stdin)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;请键入翻译的单词&quot;</span>)</span><br><span class="line">readString, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">readString = strings.TrimSuffix(readString, <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">query(readString)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回的Response使用<a href="https://oktools.net/json2go">https://oktools.net/json2go</a>进行转换</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>字节青训营1Go语言基础</title>
      <link href="/2023/01/15/%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A51Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/01/15/%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A51Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>::: hljs-center</p><p><img src="http://cdn.zsenhe.com/e5433b8341264f1ea0573e7fd29d95f6" alt="image.png"></p><p>:::</p><p>::: hljs-center</p><p><font size="6">Go语言基础</font></p><p>:::</p><h3 id="Go语言的优势"><a href="#Go语言的优势" class="headerlink" title="++Go语言的优势++"></a><strong>++Go语言的优势++</strong></h3><h4 id="1-高性能，高并发"><a href="#1-高性能，高并发" class="headerlink" title="1.高性能，高并发"></a><strong>1.高性能，高并发</strong></h4><p>拥有和java，c++相媲美的性能，内嵌了对高并发的支持（不需引入第三方库）</p><h4 id="2-语法简单，学习曲线平缓"><a href="#2-语法简单，学习曲线平缓" class="headerlink" title="2.语法简单，学习曲线平缓"></a><strong>2.语法简单，学习曲线平缓</strong></h4><p>如下仅用十行代码即实现了可承载静态访问，支持高并发的服务器</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">http.Handle(<span class="string">&quot;/&quot;</span>,http.FileServer(http.Dir(<span class="string">&quot;.&quot;</span>)))</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>,<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-丰富的标准库"><a href="#3-丰富的标准库" class="headerlink" title="3.丰富的标准库"></a><strong>3.丰富的标准库</strong></h4><p>go提供大量强大的标准库，很多时候不需要使用第三方库即可实现复杂的功能，大大降低了学习成本</p><h4 id="4-完善的工具链"><a href="#4-完善的工具链" class="headerlink" title="4.完善的工具链"></a><strong>4.完善的工具链</strong></h4><p>包括包管理，ide等完善稳定的工具</p><h4 id="5-静态编译"><a href="#5-静态编译" class="headerlink" title="5.静态编译"></a><strong>5.静态编译</strong></h4><p>在go语言中，默认所有结果都是静态链接的，只需拷贝编译后的一个唯一文件即可部署运行，镜像体积可以控制的非常小，部署方便快捷。</p><h4 id="6-快速编译"><a href="#6-快速编译" class="headerlink" title="6.快速编译"></a><strong>6.快速编译</strong></h4><p>拥有静态语言中最快速的编译速度，在字节跳动大量的微服务在线上部署之前编译时间小于一分钟，在真正本地开发的时候，修改完一行代码都能在一秒钟之内增量编译完成</p><h4 id="7-跨平台"><a href="#7-跨平台" class="headerlink" title="7.跨平台"></a><strong>7.跨平台</strong></h4><h4 id="8-垃圾回收"><a href="#8-垃圾回收" class="headerlink" title="8.垃圾回收"></a><strong>8.垃圾回收</strong></h4><p>go语言带有类似java的垃圾回收能力，写代码时只需专注业务逻辑，无需考虑内存释放</p><h3 id="Go的基础语法"><a href="#Go的基础语法" class="headerlink" title="++Go的基础语法++"></a><strong>++Go的基础语法++</strong></h3><h4 id="go的hello-world"><a href="#go的hello-world" class="headerlink" title="go的hello world"></a><strong>go的hello world</strong></h4><p>go的helloworld长这样:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//程序的入口包</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入了标准库里的fmt，这个库主要用于输出格式化字符串等</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在硬盘中以main.go保存，想直接运行程序使用</p><blockquote><p>go run main.go</p></blockquote><p>go支持直接编译成二进制运行，使用</p><blockquote><p>go build main.go</p></blockquote><p>随后输入</p><blockquote><p>.&#x2F;main</p></blockquote><p>不出意外将输出</p><blockquote><p>hello world</p></blockquote><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//go的变量声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//go拥有自动推断变量类型，方式如下</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="comment">//当然也可以显式的声明变量类型</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">int</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">//还有这种更常用的方式</span></span><br><span class="line">text := <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment">//常量的声明</span></span><br><span class="line"><span class="comment">//此外go的浮点数不使用double，float区分</span></span><br><span class="line"><span class="comment">//float64代表8精度的浮点数，32代表4精度的浮点数(double)</span></span><br><span class="line"><span class="keyword">const</span> pi <span class="type">float64</span> = <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line">fmt.Println(text, a, b, pi)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a><strong>if-else</strong></h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法与大部分语言类似，不同的是if后面不需要括号</span></span><br><span class="line"><span class="comment">//（不是很习惯，写了括号保存了的时候编辑器还是会去掉括号)</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">7</span>%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="number">7</span>, <span class="string">&quot;is even&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="number">7</span>, <span class="string">&quot;is odd&quot;</span>)</span><br><span class="line">&#125; <span class="comment">//另外，大括号是必要的，只有一行的逻辑的时候也去不掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span> num := <span class="number">9</span>; num &gt;= <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;9 &gt;= 0&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> num &lt;= <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;9 &lt;=10&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a><strong>循环</strong></h4><p>go中没有while,do while等，只有for循环</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//死循环</span></span><br><span class="line">fmt.Println(<span class="string">&quot;hhh&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n:=<span class="number">0</span>;n&lt;<span class="number">5</span>;n++&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a><strong>switch</strong></h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">a := <span class="number">2</span></span><br><span class="line"><span class="keyword">switch</span> a &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;one&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;two&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;three&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>, <span class="number">5</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;four or five&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;other number&quot;</span>)</span><br><span class="line">&#125; <span class="comment">//golang中的switch不会像java，c一样不加break语句遇到符合的将继续运行下去</span></span><br><span class="line"><span class="comment">//如程序这里执行到“case 2”的逻辑便会返回</span></span><br><span class="line"></span><br><span class="line">t := time.Now()</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="comment">// switch的分支中支持使用条件判断，可以这样来取代if-else</span></span><br><span class="line"><span class="keyword">case</span> t.Hour() &lt; <span class="number">12</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;it&#x27;s before noon&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;it&#x27;s after noon&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a><strong>切片</strong></h4><p>在真正业务逻辑中很少使用数组，更多使用的是 切片<br>切片相较于数组长度不可变的局限性，你可以任意的去更改它的长度，拥有更多丰富的操作</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//使用make创建一个切片</span></span><br><span class="line">s := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">3</span>)</span><br><span class="line">s[<span class="number">0</span>] = <span class="string">&quot;a&quot;</span></span><br><span class="line">s[<span class="number">1</span>] = <span class="string">&quot;b&quot;</span></span><br><span class="line">s[<span class="number">2</span>] = <span class="string">&quot;c&quot;</span></span><br><span class="line">fmt.Println(<span class="string">&quot;get&quot;</span>, s[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">&quot;d&quot;</span>) <span class="comment">//向切片追加一个新的元素</span></span><br><span class="line">fmt.Println(s)     <span class="comment">//输出 a b c d</span></span><br><span class="line"></span><br><span class="line">c := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="built_in">len</span>(s))</span><br><span class="line"><span class="built_in">copy</span>(c, s) <span class="comment">//将s拷贝至c切片中</span></span><br><span class="line">fmt.Println(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">//拥有像python那样的切片操作</span></span><br><span class="line">fmt.Println(s[<span class="number">0</span>:<span class="number">2</span>]) <span class="comment">//输出a,b 区间为左闭右开</span></span><br><span class="line">fmt.Println(s[:<span class="number">4</span>])  <span class="comment">//输出a,b,c,d</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a><strong>map</strong></h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>) <span class="comment">//string 为key类型，int为value类型</span></span><br><span class="line">m[<span class="string">&quot;apple&quot;</span>] = <span class="number">10</span></span><br><span class="line">m[<span class="string">&quot;pen&quot;</span>] = <span class="number">20</span></span><br><span class="line">fmt.Println(m[<span class="string">&quot;pen&quot;</span>])</span><br><span class="line"></span><br><span class="line">r, contains := m[<span class="string">&quot;apple&quot;</span>]</span><br><span class="line">fmt.Println(r, contains) <span class="comment">//输出 10 true (contains 接收是否存在元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="range"><a href="#range" class="headerlink" title="range"></a><strong>range</strong></h4><p>对于切片或map，可以使用range来快速遍历。这样代码将更加简洁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var arry [5]int</span><br><span class="line">arry[0] = 1</span><br><span class="line">arry[1] = 2</span><br><span class="line">arry[2] = 3</span><br><span class="line">arry[3] = 4</span><br><span class="line">arry[4] = 5</span><br><span class="line">//输出结果:</span><br><span class="line">//idx= 0  value= 1</span><br><span class="line">//idx= 1  value= 2</span><br><span class="line">//idx= 2  value= 3</span><br><span class="line">//idx= 3  value= 4</span><br><span class="line">//idx= 4  value= 5</span><br><span class="line">for idx, value := range arry &#123;</span><br><span class="line">fmt.Println(&quot;idx=&quot;, idx, &quot; value=&quot;, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m := make(map[string]int)</span><br><span class="line">m[&quot;apple&quot;] = 10</span><br><span class="line">m[&quot;pen&quot;] = 5</span><br><span class="line">for k, v := range m &#123;</span><br><span class="line">fmt.Println(&quot;item=&quot;, k, &quot; price=&quot;, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a><strong>函数</strong></h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回a+b的结果</span></span><br><span class="line"><span class="comment">// 注意声明方式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add0</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// go中原生支持返回多个值</span></span><br><span class="line"><span class="comment">// 该函数返回指定key对应的值以及是否存在该键值对</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exists</span><span class="params">(m <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, k <span class="type">string</span>)</span></span> (value <span class="type">string</span>, contains <span class="type">bool</span>) &#123;</span><br><span class="line">v, ok := m[k]</span><br><span class="line"><span class="keyword">return</span> v, ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">res := add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fmt.Println(res) <span class="comment">//out: 3</span></span><br><span class="line"></span><br><span class="line">value, contains := exists(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>: <span class="string">&quot;A&quot;</span>&#125;, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">fmt.Println(value, contains) <span class="comment">//out:A true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a><strong>指针</strong></h4><p>go也初步支持指针，但远没有c那样强大，以下是一个例子</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图将n+2,但实际上是无效的</span></span><br><span class="line"><span class="comment">// 传过来的n参数仅为一个拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add2</span><span class="params">(n <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">n += <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有效的写法（将指针作为参数参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add2ptr</span><span class="params">(n *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">*n += <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := <span class="number">2</span></span><br><span class="line">add2(n)</span><br><span class="line">fmt.Println(n) <span class="comment">//2</span></span><br><span class="line">add2ptr(&amp;n)</span><br><span class="line">fmt.Println(n) <span class="comment">//4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a><strong>结构体</strong></h4><p>类似java中的类对象</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">name     <span class="type">string</span></span><br><span class="line">password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span></span> resetPassword(newpassword <span class="type">string</span>) &#123;</span><br><span class="line">u.password = newpassword</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := user&#123;name: <span class="string">&quot;zsh&quot;</span>, password: <span class="string">&quot;1024&quot;</span>&#125;</span><br><span class="line">b := user&#123;name: <span class="string">&quot;zyy&quot;</span>&#125;</span><br><span class="line">b.password = <span class="string">&quot;1024&quot;</span></span><br><span class="line">fmt.Println(a.name, <span class="string">&quot;password: &quot;</span>, a.password) <span class="comment">//out: zsh password: 1024</span></span><br><span class="line">a.resetPassword(<span class="string">&quot;zyy i love u&quot;</span>)</span><br><span class="line">fmt.Println(a.password) <span class="comment">//out: zyy i love u</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a><strong>异常处理</strong></h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">name     <span class="type">string</span></span><br><span class="line">password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// error表示可能出现的错误</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findUser</span><span class="params">(users []user, name <span class="type">string</span>)</span></span> (v *user, err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> _, u := <span class="keyword">range</span> users &#123;</span><br><span class="line"><span class="keyword">if</span> u.name == name &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;u, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//未寻找到用户，new一个errors作为第二个参数返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;not found&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">u, err := findUser([]user&#123;&#123;<span class="string">&quot;zsh&quot;</span>, <span class="string">&quot;1024&quot;</span>&#125;&#125;, <span class="string">&quot;zsh&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(u.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a><strong>字符串操作</strong></h4><p>strings下包含了许多对字符串的处理</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">text := <span class="string">&quot;zsh&quot;</span></span><br><span class="line">fmt.Println(strings.Contains(text, <span class="string">&quot;zs&quot;</span>))  <span class="comment">//out: true</span></span><br><span class="line">fmt.Println(strings.Contains(text, <span class="string">&quot;zyy&quot;</span>)) <span class="comment">//out: false</span></span><br><span class="line">fmt.Println(strings.Count(text, <span class="string">&quot;z&quot;</span>))      <span class="comment">//out: 1 (统计字符出现次数</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(text))                     <span class="comment">//out: 3 （统计长度</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(text))                     <span class="comment">//out: 3 （统计长度</span></span><br><span class="line">fmt.Println(strings.Split(text, <span class="string">&quot;-&quot;</span>))      <span class="comment">//out [z,s,h] (切割字符串，返回数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="JSON处理"><a href="#JSON处理" class="headerlink" title="JSON处理"></a><strong>JSON处理</strong></h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//如果key需要小写的话，在后面追加`json: key&quot;</span></span><br><span class="line">idx      <span class="type">int</span> <span class="string">`json:&quot;idx&quot;`</span></span><br><span class="line">Name     <span class="type">string</span></span><br><span class="line">Password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">zsh := user&#123;idx: <span class="number">1</span>, Name: <span class="string">&quot;zsh&quot;</span>, Password: <span class="string">&quot;1024&quot;</span>&#125;</span><br><span class="line"><span class="comment">//将结构体序列化为json文本</span></span><br><span class="line">buf, err := json.Marshal(zsh)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(buf)         <span class="comment">// [12334....]</span></span><br><span class="line">fmt.Println(<span class="type">string</span>(buf)) <span class="comment">// &#123;&quot;Name&quot;:&quot;zsh&quot;,&quot;Password&quot;:&quot;1024&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line"><span class="keyword">var</span> zshCpy user</span><br><span class="line">json.Unmarshal(buf, &amp;zshCpy)</span><br><span class="line">fmt.Println(zshCpy.Name) <span class="comment">//zsh</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="时间处理"><a href="#时间处理" class="headerlink" title="时间处理"></a><strong>时间处理</strong></h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//获取当前时间</span></span><br><span class="line">now := time.Now()</span><br><span class="line">fmt.Println(now) <span class="comment">//out: 2023-01-16 05:51:18.9810204 +0800 CST m=+0.002828701</span></span><br><span class="line"><span class="comment">//构造一个时间</span></span><br><span class="line">t := time.Date(<span class="number">2022</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">0</span>, time.UTC)</span><br><span class="line">fmt.Println(t.Year()) <span class="comment">//out: 2022</span></span><br><span class="line"><span class="comment">//减去时间段</span></span><br><span class="line">diff := now.Sub(t)</span><br><span class="line">fmt.Println(diff) <span class="comment">//9097h33m1.4173081s</span></span><br><span class="line"><span class="comment">//获取时间毫秒数</span></span><br><span class="line">fmt.Println(now.Unix())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="字符串与数字的转换"><a href="#字符串与数字的转换" class="headerlink" title="字符串与数字的转换"></a><strong>字符串与数字的转换</strong></h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//参数为: 字符串，精度</span></span><br><span class="line">f, _ := strconv.ParseFloat(<span class="string">&quot;1.234&quot;</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Println(f) <span class="comment">//1.234</span></span><br><span class="line"><span class="comment">//参数为: 字符串，进制（0为自动推测),精度</span></span><br><span class="line">n, _ := strconv.ParseInt(<span class="string">&quot;10&quot;</span>, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Println(n) <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line">n2, _ := strconv.Atoi(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">fmt.Println(n2) <span class="comment">//123</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a><strong>进程信息</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">//使用命令 go run main.go a b c d</span><br><span class="line">//输出:</span><br><span class="line">//[C:\Users\hasee\AppData\Local\Temp\go-build580179449\b001\exe\main.exe a b c d]</span><br><span class="line">//第一个参数为二进制文件地址 接下来是args</span><br><span class="line">fmt.Println(os.Args)</span><br><span class="line">//获取环境变量</span><br><span class="line">fmt.Println(os.Getenv(&quot;PATH&quot;))</span><br><span class="line">//写入环境变量</span><br><span class="line">fmt.Println(os.Setenv(&quot;zsh&quot;, &quot;1024&quot;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="++小结++"></a><strong>++小结++</strong></h3><h4 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a><strong>标准库</strong></h4><blockquote><p><strong>fmt</strong> 提供格式化输入输出<br><strong>os</strong> 提供与操作系统交互的函数<br><strong>string</strong> 提供字符串操作的函数<br><strong>net</strong> 提供网络编程的函数<br><strong>strconv</strong> 提供数字与字符之间的转换操作<br><strong>time</strong> 时间处理<br><strong>encoding&#x2F;json</strong> json的相关操作</p></blockquote><p>一个练习的小项目，二分查找猜谜游戏</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//使用当前时间戳初始化随机种子</span></span><br><span class="line"><span class="comment">//否则会输出同一个数</span></span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">maxNum := <span class="number">100</span></span><br><span class="line">rNumber := rand.Intn(maxNum)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Please input your anser&quot;</span>)</span><br><span class="line"><span class="comment">//转换为一个只读的流</span></span><br><span class="line">reader := bufio.NewReader(os.Stdin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">input, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理换行符</span></span><br><span class="line">input = strings.TrimSuffix(input, <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">guess, err := strconv.Atoi(input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;error input,it not is number&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;your guess is&quot;</span>, guess)</span><br><span class="line"><span class="keyword">if</span> guess &gt; rNumber &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;你输入的数字大于答案，请再次输入&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> guess &lt; rNumber &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;你输入的数字小于答案，请再次输入&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Accept!&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>系统会预生成一个[0,100)的随机数<br>用户通过连续的输入将得到<br>“输入的数大于答案” or “输入的数小于答案”<br>直到猜测正确完成游戏<br><img src="http://cdn.zsenhe.com/b8035b48030f4500a2770b91fdd9f7be" alt="Riddle.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux下寻找正在运行的sh脚本</title>
      <link href="/2023/01/07/linux%E4%B8%8B%E5%AF%BB%E6%89%BE%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84sh%E8%84%9A%E6%9C%AC/"/>
      <url>/2023/01/07/linux%E4%B8%8B%E5%AF%BB%E6%89%BE%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84sh%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>业务挂了很多sh脚本，用的screen来把他们维护起来，今天莫名其妙两个视窗叠一块了。<br>因为端口已经确定了，不得不杀死进程，那么问题来了，我怎么知道sh脚本在哪呢？<br>谷歌了好一阵，记录一下以备用</p><p>首先输入</p><blockquote><p>ps -ef|grep sh</p></blockquote><p>来寻找所有正在运行的sh脚本进程<br><img src="http://cdn.zsenhe.com/d3309c2294664d0eae8937aa1f063d05" alt="QQ图片20230108052852.png"><br>红框所示即是它的进程号，有的时候没法通过给出的信息来辨认</p><p>进入 &#x2F;&#x2F;proc&#x2F;进程号 这个目录，键入</p><blockquote><p>ll -a</p></blockquote><p><img src="http://cdn.zsenhe.com/36b8edf9adbd4955a600053e6e93b525" alt="QQ图片20230108053118.png"></p><p>以此来确定是否为要找的进程</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spigot使用spark查看峰值卡顿</title>
      <link href="/2023/01/07/spigot%E4%BD%BF%E7%94%A8spark%E6%9F%A5%E7%9C%8B%E5%B3%B0%E5%80%BC%E5%8D%A1%E9%A1%BF/"/>
      <url>/2023/01/07/spigot%E4%BD%BF%E7%94%A8spark%E6%9F%A5%E7%9C%8B%E5%B3%B0%E5%80%BC%E5%8D%A1%E9%A1%BF/</url>
      
        <content type="html"><![CDATA[<p>在这之前先科普一下什么是tick循环</p><p>几乎所有的游戏（包括minecraft) 都有一个“大循环”驱动，游戏服务器和玩家发生的事件被切片成一个个小循环，也就是”tick”<br>对于minecraft，每次tick发生时，游戏服务器会做以下事</p><blockquote><p>处理玩家事件（如移动，放置&#x2F;破坏 方块，攻击实体）<br>更新玩家和其他实体之间的位置<br>将服务器发生的事件更新至客户端(如方块状态改变，实体移动操作)<br>…..还有很多</p></blockquote><p>总之，每个tick中都包含了大量逻辑处理<br>在minecraft中，每50毫秒会运行一个tick，即一秒钟会运行20个tick<br><img src="https://spark.lucko.me/docs/assets/images/ticks-linear-719b3df9e469b960429fa91e007e4a5b.png" alt="https://spark.lucko.me/docs/assets/images/ticks-linear-719b3df9e469b960429fa91e007e4a5b.png"><br>当然，每个tick的工作量并不相同，这取决于游戏里发生了什么事，事实上永远不会如此规律</p><p>对于spigot服务器，服务器正常运行时执行一个tick的完整时间应当小于等于50ms，如果一个花费时间小于50毫秒，服务器会让它休眠直至下一个tick运行。为什么要这么做？如果服务器不将tick隔开，那么一切都会发生的很“快”<br><img src="http://cdn.zsenhe.com/79efd92426f84da8889b0b4f0be3d556" alt="image.png"><br>如图，这是spark生成的分析报告，其中在主线程上，有81%的时间用于等待下一个tick发生。数据分析是平均而言的，这意味着服务器运行良好，每一个tick都在不到50ms内被处理完，完全不会体验到卡顿的感觉</p><p>注意，前面提到数据分析是平均的，假设服务器大多数时间都能良好的运行tick，但偶尔有一个tick处理了1000ms，因为数据是平均而言的，极值被抹掉了，对着数据报告完全无从下手，这也是为什么性能分析不需要太长时间的原因;那么会有什么后果?在游戏中会是不定时的造成卡顿，可能是几分钟来一次，严重的话主线程挂起太久直接就蹦了</p><p>综上所述，当少量tick（或一个tick）需要很长时间才能执行的时候就会发生“卡顿峰值”，通过正常生成的分析数据是很难找出问题的，幸运的是spark有工具能很快定位到这些烦人的峰值</p><ol><li><p>使用 &#x2F;spark tickmonitor 来实时检测滞后</p><blockquote><p>为了确定峰值卡顿的原因，我们需要先将峰值卡顿与其他滞后区分开。后面可以跟一个参数，这是服务器初始必须赶上的值。<br><img src="http://cdn.zsenhe.com/be0c1b3dc2824162b2ecef005d92ee9f" alt="image.png"><br>接下来，只需要等待，将游戏中的卡顿与输出信息对齐，会很明显的看到“卡顿峰值”<br>（手动制造了一个卡顿峰值hh）<br><img src="http://cdn.zsenhe.com/56c11996b3ac4d619e16f74bc79b95c7" alt="image.png"></p></blockquote></li><li><p>使用 &#x2F;spark profiler –only-ticks-over 查找原因</p><blockquote><p>加上 –only-ticks-over选项后spark只会分析持续时间超过给定阈值的tick。这意味着过滤掉了大部分正常tick，只留下了造成峰值卡顿的tick。如上，这个tick超过了3000ms，执行&#x2F;spark profiler –only-ticks-over 2000<br>注意，后面跟着的值必须小于卡顿操作运行的毫秒数，这里使用2000确定能将该操作的tick加入进来</p></blockquote></li></ol><p>最后，运行&#x2F;spark profiler –stop<br><img src="http://cdn.zsenhe.com/ff38ee6427b24662a0fe2de0e4667df3" alt="ZXWSFKAG`0MRXHB`_P.png"><br>造成卡顿的原因非常明显了，是com.blank038.spring.RewardData这个类下，接下来范围就缩小了，只需要注重修改插件的错误就好了。搭配上这个加上合理利用timings和spark分析报告，就能准确的处理每一次卡顿不至于束手无策</p><p>参考<a href="https://spark.lucko.me/docs">https://spark.lucko.me/docs</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计科导论笔记——(2)数字系统</title>
      <link href="/2022/12/14/%E8%AE%A1%E7%A7%91%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94(2)%E6%95%B0%E5%AD%97%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/12/14/%E8%AE%A1%E7%A7%91%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94(2)%E6%95%B0%E5%AD%97%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>数字系统定义了如何用独特的符号来表示一个数字。在不同的系统中，一个数字有不同的表示方法。例如，两个数字 <strong>（2A）<del>16</del></strong><br>和 <strong>（52）<del>8</del></strong> 都是指同样的数量 <strong>（42）<del>10</del></strong> ,但是它们的表示截然不同。<br>正如我们再语言中使用符号（字符）来创建单词一样，我们使用符号（数码）来表示数字。但是，我们知道任何语言中的符号数量都是有限的。我们需要重复并组合它们来创建单词。数字也是一样：我们使用有限的数字符号（数码）来表示数字，这意味着数码需要重复使用。<br>一些数字系统以及在过去广为使用，并可以分为两类: <strong>位置化系统</strong>和<strong>非位置化系统</strong>，着重讨论前者</p><hr><h3 id="位置化数字系统"><a href="#位置化数字系统" class="headerlink" title="位置化数字系统"></a><strong>位置化数字系统</strong></h3><p>在位置化数字系统中，数字中符号所占据的位置决定了表示的值。在该系统，数字这样表示:</p><blockquote><p>+-(S<del>k-1</del>……..S<del>1</del>S<del>1</del>S<del>0</del>.S<del>-2</del>…S<del>-L</del>)<del>b</del></p></blockquote><p>它的值是:</p><blockquote><p>n &#x3D; +-S<del>k-1</del>*b^k-1^+…+S<del>1</del>*b^1^+S<del>0</del>*b^0^+S<del>-1</del>*b^-1^+S<del>-2</del>*b^-2^+….S<del>-L</del>*b^-L^</p></blockquote><p>其中，S是一套符号集;b是底（或者基数）,它等于S符号集中的符号（数码）总数，其中S<del>k</del>和S<del>L</del>分别代表整个数字或者小数部分的符号。注意我们使用的表达式可以从右边或者左边扩展。也就是说，b的幂可以从一个方向由0到K-1，也可以从0一个方向由-1到-L。b的非负数幂与该数字的整数部分有关，而负数幂与该数字的小数部分有关。+-符号表示该数字可正可负</p><h4 id="十进制系统"><a href="#十进制系统" class="headerlink" title="十进制系统:"></a><strong>十进制系统:</strong></h4><p>首先讨论的位置化系统是 <strong>十进制系统</strong> 。在该系统中，底b&#x3D;10 并且我们用10个符号来表示一个数。符号集是 <strong>{0,1,2,3,4,5,6,7,8,9}</strong><br>正如上文所说，该系统的符号常被称为“十进制数码”或者仅称为<strong>数码</strong>。暂时我们使用+-来表示一个数符号，但这些符号并不存储于计算机中——计算机处理该符号的方式不同，以后再提</p><p>在十进制系统中，数字写为:</p><blockquote><p>+-(S<del>k-1</del>….S<del>2</del>S<del>1</del>S<del>0</del>.S<del>-1</del>S<del>-2</del>S<del>-L</del>)<del>10</del></p></blockquote><p>为了简便，通常省略括号，底和正号。例如将+(552.23)表示为552.23,底和+是隐式存在的。</p><h5 id="1-整数"><a href="#1-整数" class="headerlink" title="1.整数:"></a><strong>1.整数:</strong></h5><p>在十进制系统中，<strong>整数</strong>（没有小数部分的数字）是我们所熟悉的，在日常生活中使用整数。使用它我们已习以为常。我们把整数表示为 **+-(S<del>k-1</del>…S<del>1</del>S<del>0</del>)<del>10</del>**，其值计算为:</p><blockquote><p>N&#x3D;+-S<del>k-1</del>*10^k-1^+S<del>k-2</del>*10^k-2^…+S<del>0</del>*10^0^</p></blockquote><p>其中,S<del>i</del>是一个数码，b&#x3D;10为底，K是数码的数量。</p><h5 id="最大值"><a href="#最大值" class="headerlink" title="最大值:"></a><strong>最大值:</strong></h5><p>有时我们需要知道可以用数码K表示的十进制数整数的最大值。答案是<strong>N<del>max</del>&#x3D;10^K^-1</strong></p><h4 id="二进制系统"><a href="#二进制系统" class="headerlink" title="二进制系统:"></a><strong>二进制系统:</strong></h4><p>讨论的第二种位置化数字系统是<strong>二进制系统</strong>。在该系统中，底b&#x3D;2, 并且用两个符号来表示一个数，即S&#x3D;{0,1}。数据与程序都是以二进制模式（即位串）存储于计算机中的。这是因为计算机由电子开关制成，它们仅有开和关两种状态。位1表示这两状态之一，位0表示另一种状态。</p><h5 id="1-整数-1"><a href="#1-整数-1" class="headerlink" title="1.整数:"></a><strong>1.整数:</strong></h5><p>可以把整数表示为 **+-(S<del>k-1</del>…S<del>1</del>S<del>0</del>)<del>2</del>**，其值计算为:</p><blockquote><p>N&#x3D;+-S<del>k-1</del>*2^k-1^+S<del>k-2</del>*2^k-2^…+S<del>0</del>*2^0^</p></blockquote><p>其中,S<del>i</del>是一个数码，b&#x3D;2为底，K是数码的数量</p><h5 id="2-实数"><a href="#2-实数" class="headerlink" title="2.实数:"></a><strong>2.实数:</strong></h5><p>在二进制系统中，一个实数（可带有小数部分的数字）可以由左边的K位和右边的L位组成，即 <strong>+-(S<del>k-1</del>…S<del>1</del>S<del>0</del>.S<del>-1</del>S<del>-L</del>)<del>2</del></strong><br>其值计算为:</p><blockquote><p>N&#x3D;+-S<del>k-1</del>*2^k-1^+S<del>k-2</del>*2^k-2^…+S<del>0</del>*2^0^+S<del>-1</del>*2^-1^….+S<del>-L</del>*2^-L^</p></blockquote><p>其中,S<del>i</del>是一个数码，b&#x3D;2为底，K是小数点左边位的数量，L是小数点右边位的数量。注意: K从0开始，L从-1开始。最高的幂是K-1且最低的幂是-L。<img src="http://cdn.zsenhe.com/5ed25276f6d2466b8a5cbdfb962220e1" alt="小数部分转换.jpg"></p><p>例:</p><blockquote><p>以下显示了与十进制数5.75等值的二进制数(101.11)<del>2</del>。<br>B &#x3D; 1 0 1 · 1 1<br>R &#x3D; 1x2^2^ + 0x2^1^  + 1x2^0^ + 1x2^-1^ + 1x2^-2^</p></blockquote><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a><strong>转换</strong></h3><p>我们需要知道如何将一个系统中的数字转换到另一个系统中等价的数字。因为我们有十根手指，于是我们在日常中使用十进制数，通常看一个位置系统中的数字，我们大概率也是想要知道他在十进制中是什么数，那么先看看怎么从其他进制转到十进制吧。</p><h4 id="从其他进制到十进制的转换"><a href="#从其他进制到十进制的转换" class="headerlink" title="从其他进制到十进制的转换"></a><strong>从其他进制到十进制的转换</strong></h4><p>这种转换是简便而迅速。我们将数码乘以其的位置量并求和来得到在十进制中的数，如图:</p><p><img src="http://cdn.zsenhe.com/aa7bb03921dd48208b398a94bbbaa3b8" alt="其他进制到十进制的转换.jpg"></p><h4 id="十进制到其他进制的转换"><a href="#十进制到其他进制的转换" class="headerlink" title="十进制到其他进制的转换"></a><strong>十进制到其他进制的转换</strong></h4><p>我们能将十进制数转换到与其等价的其他进制需要两个过程。一个用于整数部分，一个用于小数部分。<br>转换整数部分:<br>整数部分的转换可使用连除<br><img src="http://cdn.zsenhe.com/faab8266eb0d487bb5e18de9d929e7a4" alt="十进制转换为其他进制整数部分.jpg"><br>一些例子：<br><img src="http://cdn.zsenhe.com/a616ca28301d450ca0f39a13ee675201" alt="十进制转换其他进制例.jpg"></p><p>转换小数部分:<br>小数部分的转换使用连乘法<br>如图，将十进制数0.625转换为二进制数<br><img src="http://cdn.zsenhe.com/76d7997886d24988a6a08986b229e0ba" alt="小数部分转换.jpg"><br>因为0.625没有整数部分，该例子很好的表现了连乘法的过程。左边是十进制数，连续乘2，并记录结果的整数部分和小数部分。小数部分移到右边作为新的源，整数部分写在每次运算的下面，当小数部分为0或达到足够的位数时停止。结果是（0.101）<del>2</del></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql连接报错Causedbycom.mysql.cj.exceptions.CJCommunicationsException:Communicationslink failure</title>
      <link href="/2022/11/28/mysql%E8%BF%9E%E6%8E%A5%E6%8A%A5%E9%94%99Causedbycom.mysql.cj.exceptions.CJCommunicationsEx/"/>
      <url>/2022/11/28/mysql%E8%BF%9E%E6%8E%A5%E6%8A%A5%E9%94%99Causedbycom.mysql.cj.exceptions.CJCommunicationsEx/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: Caused by: com.mysql.cj.exceptions.CJCommunicationsException: Communications link failure</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: </span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: The last packet sent successfully to the server was <span class="number">0</span> milliseconds ago. The driver has not received any packets from the server.</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">77</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:<span class="number">499</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">480</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:<span class="number">61</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:<span class="number">105</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:<span class="number">151</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:<span class="number">167</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at com.mysql.cj.protocol.a.NativeProtocol.negotiateSSLConnection(NativeProtocol.java:<span class="number">317</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at com.mysql.cj.protocol.a.NativeAuthenticationProvider.connect(NativeAuthenticationProvider.java:<span class="number">203</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at com.mysql.cj.protocol.a.NativeProtocol.connect(NativeProtocol.java:<span class="number">1369</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at com.mysql.cj.NativeSession.connect(NativeSession.java:<span class="number">133</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:<span class="number">948</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:<span class="number">818</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: ... <span class="number">25</span> more</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: Caused by: javax.net.ssl.SSLHandshakeException: No appropriate <span class="title function_">protocol</span> <span class="params">(protocol is disabled or cipher suites are inappropriate)</span></span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at java.base/sun.security.ssl.HandshakeContext.&lt;init&gt;(HandshakeContext.java:<span class="number">172</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at java.base/sun.security.ssl.ClientHandshakeContext.&lt;init&gt;(ClientHandshakeContext.java:<span class="number">103</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at java.base/sun.security.ssl.TransportContext.kickstart(TransportContext.java:<span class="number">240</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:<span class="number">448</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:<span class="number">426</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at com.mysql.cj.protocol.ExportControlled.performTlsHandshake(ExportControlled.java:<span class="number">335</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at com.mysql.cj.protocol.StandardSocketFactory.performTlsHandshake(StandardSocketFactory.java:<span class="number">194</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at com.mysql.cj.protocol.a.NativeSocketConnection.performTlsHandshake(NativeSocketConnection.java:<span class="number">101</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: at com.mysql.cj.protocol.a.NativeProtocol.negotiateSSLConnection(NativeProtocol.java:<span class="number">308</span>)</span><br><span class="line">[<span class="number">19</span>:<span class="number">16</span>:<span class="number">40</span>] [Server thread/WARN]: ... <span class="number">30</span> more</span><br></pre></td></tr></table></figure><p>听网上说的更改mysql wait-time未生效，也不是驱动版本的问题<br>什么方法都试过了，折腾了半天快绝望了突然灵机一动，会不会是params配置那块的问题?<br>找了半天，才发现配置文件里把“params”打成“parm”了，弄到最后还是最开始尝试的方法<br>只要加上useSSL&#x3D;false就好了….<br>最可怕的是，这个问题一直丢业务上跑了一年多没发现，我就说以前写的东西，怎么这么多黄黄的mysql wrong<br>不过之前用的数据库是老版本，直到今天换了新的不设置ssl协议不给连接了才揪出来，真勾八可怕</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>单调队列——二维滑动窗口模型</title>
      <link href="/2022/11/05/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E4%BA%8C%E7%BB%B4%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/11/05/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E4%BA%8C%E7%BB%B4%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2216">P2216 理想的正方形</a></p><p><img src="http://cdn.zsenhe.com/99870f7fbfc84b32a52c1681ad553a32" alt="QQ截图20221105181039.png"></p><p>Ac的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> a,b,n;</span><br><span class="line"><span class="type">int</span> s[N][N],q[N],hh=<span class="number">0</span>,tt=<span class="number">-1</span>,d;</span><br><span class="line"><span class="type">int</span> anserA[N],anserB[N],anserC[N],anserD[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> rsMin[N][N],rsMax[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_max</span><span class="params">(<span class="type">int</span> * p,<span class="type">int</span> * f,<span class="type">int</span> col)</span></span>&#123;</span><br><span class="line">  hh=<span class="number">0</span>,tt=<span class="number">-1</span>,d=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;col;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i-n<span class="number">+1</span>&gt;q[hh]) hh++;</span><br><span class="line">    <span class="keyword">while</span>(hh&lt;=tt&amp;&amp;p[q[tt]]&lt;=p[i]) tt--;</span><br><span class="line">    q[++tt] = i;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;=n<span class="number">-1</span>) f[d++] = p[q[hh]];</span><br><span class="line">  &#125;</span><br><span class="line">  f[N<span class="number">-1</span>] = d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_min</span><span class="params">(<span class="type">int</span> * p,<span class="type">int</span> * f,<span class="type">int</span> col)</span></span>&#123;</span><br><span class="line">  hh=<span class="number">0</span>,tt=<span class="number">-1</span>,d=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;col;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i-n<span class="number">+1</span>&gt;q[hh]) hh++;</span><br><span class="line">    <span class="keyword">while</span>(hh&lt;=tt&amp;&amp;p[q[tt]]&gt;=p[i]) tt--;</span><br><span class="line">    q[++tt] = i;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;=n<span class="number">-1</span>) f[d++] = p[q[hh]];</span><br><span class="line">  &#125;</span><br><span class="line">  f[N<span class="number">-1</span>] = d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cin&gt;&gt;a&gt;&gt;b&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;b;j++) cin&gt;&gt;s[i][j];</span><br><span class="line">  <span class="comment">//这一步之后，rsMax[i]存储每个正方形尝试的一条边的最大值，rsMin同理</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a;i++)&#123;</span><br><span class="line">    <span class="built_in">get_max</span>(s[i],rsMax[i],b);</span><br><span class="line">    <span class="built_in">get_min</span>(s[i],rsMin[i],b);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> anser = <span class="number">1e10</span>; <span class="comment">//取到最大</span></span><br><span class="line"><span class="comment">//二维区间求最值问题，从列开始考虑。即max&#123;a,b,c,d&#125; = max&#123;max&#123;a,b&#125;,max&#123;c,d&#125;&#125;</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;rsMax[<span class="number">0</span>][N<span class="number">-1</span>];i++)&#123;</span><br><span class="line">    <span class="comment">//将一列的值存入临时数组anserA,anserB(最小值)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;a;j++)&#123;</span><br><span class="line">      anserA[j] = rsMax[j][i];</span><br><span class="line">      anserB[j] = rsMin[j][i];</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//将列的值也进行一次滑动窗口操作，这一步后anserC[i] 代表第i个正方形尝试的最大值,anserD也一样</span></span><br><span class="line">    <span class="built_in">get_max</span>(anserA,anserC,a);</span><br><span class="line">    <span class="built_in">get_min</span>(anserB,anserD,a);</span><br><span class="line">    <span class="comment">// cout &lt;&lt; anserC[N-1] &lt;&lt; endl;</span></span><br><span class="line">  <span class="comment">//到这里，我们已经将一个子矩阵一维化了，接下来套模板就完了</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;anserC[N<span class="number">-1</span>];k++) &#123;</span><br><span class="line">      anser = <span class="built_in">min</span>(anser,anserC[k]-anserD[k]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; anser;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>折腾了一天才过（菜麻了)。acwing周赛开打了，等明天再整理下图文笔记8<br><img src="http://cdn.zsenhe.com/657cc85c431f4b029ceb42c3409adda5" alt="p22167.png"></p><p><img src="http://cdn.zsenhe.com/39fa7acb677445cdab7608496464624d" alt="微信图片_20221105180907.jpg"><br>超水的笔记（逃</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构笔记归档</title>
      <link href="/2022/11/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%E5%BD%92%E6%A1%A3/"/>
      <url>/2022/11/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%E5%BD%92%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>因为学算法主要是为了做题打打力扣周赛，为了效率高多数数据结构使用数组模拟。</p><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><ol><li><strong>单链表</strong> <a href="http://zsenhe.com/article/19">http://zsenhe.com/article/19</a></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+50</span>;</span><br><span class="line"><span class="type">int</span> e[N],ne[N],idx,head;</span><br><span class="line"><span class="comment">//初始化单链表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">  head = <span class="number">-1</span>;</span><br><span class="line">  idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入头节点x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inser_head</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">  e[idx] = x,ne[idx] = head;head = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在k节点后插入x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">  e[idx] = x,ne[idx] = ne[k],ne[k] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除k节点后的一个元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">  ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>双链表</strong><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+50</span>;</span><br><span class="line"><span class="type">int</span> l[N],r[N],e[N],idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//0左端点，1右端点</span></span><br><span class="line">  r[<span class="number">0</span>] = <span class="number">1</span>,l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在节点k后插入x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inset</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">  e[idx] = x;</span><br><span class="line">  l[idx] = k;</span><br><span class="line">  r[idx] = r[k];</span><br><span class="line">  l[r[k]] = idx,r[k] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除节点k</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">  l[r[k]] = l[k];</span><br><span class="line">  r[l[k]] = r[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>tip: 当需在k左边插入元素时，调用insert(l[k],x)即可</strong></li></ol><h4 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h4><ol><li><p><strong>栈:</strong> <a href="http://zsenhe.com/article/25">http://zsenhe.com/article/25</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> stk[N],tt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将x压入栈</span></span><br><span class="line">stk[++tt] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出栈顶元素</span></span><br><span class="line"><span class="type">int</span> tt = stk[tt--];</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈不为空</span></span><br><span class="line"><span class="keyword">return</span> tt&gt;<span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>队列</strong> <a href="http://zsenhe.com/article/27">http://zsenhe.com/article/27</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"><span class="comment">//队头索引</span></span><br><span class="line"><span class="type">int</span> hh;</span><br><span class="line"><span class="comment">//队尾索引</span></span><br><span class="line"><span class="type">int</span> tt = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//加入队列</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">  q[++tt] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> q[hh++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="keyword">return</span> hh &gt; tt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>..整理中</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大部分人都是自恋，寻找一个能与自己交配的自己</title>
      <link href="/2022/10/28/%E5%A4%A7%E9%83%A8%E5%88%86%E4%BA%BA%E9%83%BD%E6%98%AF%E8%87%AA%E6%81%8B%EF%BC%8C%E5%AF%BB%E6%89%BE%E4%B8%80%E4%B8%AA%E8%83%BD%E4%B8%8E%E8%87%AA%E5%B7%B1%E4%BA%A4%E9%85%8D%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
      <url>/2022/10/28/%E5%A4%A7%E9%83%A8%E5%88%86%E4%BA%BA%E9%83%BD%E6%98%AF%E8%87%AA%E6%81%8B%EF%BC%8C%E5%AF%BB%E6%89%BE%E4%B8%80%E4%B8%AA%E8%83%BD%E4%B8%8E%E8%87%AA%E5%B7%B1%E4%BA%A4%E9%85%8D%E7%9A%84%E8%87%AA%E5%B7%B1/</url>
      
        <content type="html"><![CDATA[<p>资本用软色情降低了所谓爱情的边界感，现代的爱情变成了性欲，性欲变成了色情。裸露的越多，神秘感越少，性欲越不容易产生</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《图书管理员》记忆c++ string类 (快排+字符串高精度模拟)</title>
      <link href="/2022/10/28/%E3%80%8A%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E5%91%98%E3%80%8B%E8%AE%B0%E5%BF%86c++%20string%E7%B1%BB%20(%E5%BF%AB%E6%8E%92+%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%AB%98%E7%B2%BE%E5%BA%A6%E6%A8%A1%E6%8B%9F)/"/>
      <url>/2022/10/28/%E3%80%8A%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E5%91%98%E3%80%8B%E8%AE%B0%E5%BF%86c++%20string%E7%B1%BB%20(%E5%BF%AB%E6%8E%92+%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%AB%98%E7%B2%BE%E5%BA%A6%E6%A8%A1%E6%8B%9F)/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.zsenhe.com/4258d247b5824680bb0fc6624b0b3a5b" alt="捕获.PNG"><img src="http://cdn.zsenhe.com/d996122b69c5449d95d252316c4440a2" alt="捕获2.PNG"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000</span><span class="number">+50</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;string&gt; bookCode;</span><br><span class="line">vector&lt;string&gt; userCode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//return true s1比s2大</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(string s1,string s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s<span class="number">1.</span><span class="built_in">size</span>()==s<span class="number">2.</span><span class="built_in">size</span>()&amp;&amp;s<span class="number">1.f</span>ind(s2)!=string::npos) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(s<span class="number">1.</span><span class="built_in">size</span>()==s<span class="number">2.</span><span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> m = s<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;<span class="built_in">i</span>&lt;m;i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>((s1[i]-<span class="string">&#x27;0&#x27;</span>)&gt;(s2[i]-<span class="string">&#x27;0&#x27;</span>)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>((s1[i]-<span class="string">&#x27;0&#x27;</span>)&lt;(s2[i]-<span class="string">&#x27;0&#x27;</span>)) <span class="keyword">return</span> <span class="number">0</span>;            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s<span class="number">1.</span><span class="built_in">size</span>()&gt;s<span class="number">2.</span><span class="built_in">size</span>()?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(vector&lt;string&gt; &amp;bookCode,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">  string x = bookCode[(l+r)&gt;&gt;<span class="number">1</span>];</span><br><span class="line">  <span class="type">int</span> xl = x.<span class="built_in">size</span>(),i=l<span class="number">-1</span>,j=r<span class="number">+1</span>;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">    <span class="keyword">do</span> i++;<span class="keyword">while</span>(<span class="built_in">check</span>(bookCode[i],x)==<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">do</span> j--;<span class="keyword">while</span>(<span class="built_in">check</span>(bookCode[j],x)==<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(i&lt;j) &#123;</span><br><span class="line">      string tmp = bookCode[i];</span><br><span class="line">      bookCode[i] = bookCode[j];</span><br><span class="line">      bookCode[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">quick_sort</span>(bookCode,l,j);</span><br><span class="line">  <span class="built_in">quick_sort</span>(bookCode,j<span class="number">+1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">getUserCode</span><span class="params">(string userCode)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;bookCode.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">      string sub = bookCode[i].<span class="built_in">size</span>()&gt;userCode.<span class="built_in">size</span>()?bookCode[i].<span class="built_in">substr</span>(bookCode[i].<span class="built_in">size</span>()-userCode.<span class="built_in">size</span>()):bookCode[i];</span><br><span class="line">    <span class="keyword">if</span>(sub.<span class="built_in">find</span>(userCode)!=string::npos) <span class="keyword">return</span> bookCode[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n,q;</span><br><span class="line">  cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">  string s;</span><br><span class="line">  <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    bookCode.<span class="built_in">push_back</span>(s);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">quick_sort</span>(bookCode,<span class="number">0</span>,bookCode.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;q;i++)&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    string y;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    userCode.<span class="built_in">push_back</span>(y);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;userCode.<span class="built_in">size</span>();i++) cout &lt;&lt; <span class="built_in">getUserCode</span>(userCode[i]) &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（其实数据范围就1e7，用不上快排+字符串高精度，直接暴力也能ac。纯当熟悉下c++的string类了）<br>以上代码就是单纯的模拟，记录一下string下的常用库函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span> <span class="comment">//头文件</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常用函数</span></span><br><span class="line">str.<span class="built_in">size</span>():<span class="type">int</span> <span class="comment">//返回str的长度</span></span><br><span class="line">str.<span class="built_in">find</span>(string v):string <span class="comment">//返回v在str中出现的第一个位置，未出现过则返回 string::npos (这是一个非常大的数)</span></span><br><span class="line">str.<span class="built_in">substr</span>(<span class="type">int</span> start,<span class="type">int</span> end):string <span class="comment">//截取子串</span></span><br><span class="line">str.<span class="built_in">substr</span>(<span class="type">int</span> idx):string <span class="comment">//同上，从idx截取到尾</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯真题——分巧克力（二分）</title>
      <link href="/2022/10/27/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98%E2%80%94%E2%80%94%E5%88%86%E5%B7%A7%E5%85%8B%E5%8A%9B%EF%BC%88%E4%BA%8C%E5%88%86%EF%BC%89/"/>
      <url>/2022/10/27/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98%E2%80%94%E2%80%94%E5%88%86%E5%B7%A7%E5%85%8B%E5%8A%9B%EF%BC%88%E4%BA%8C%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.zsenhe.com/6e043934d49d4169bf8daa3635b322d8" alt="捕获.PNG"><img src="http://cdn.zsenhe.com/91883ce2014e4db1aa1748558dbdb577" alt="捕获2.PNG"></p><p>思路: </p><p>使用二分查找[1,1e5]，每次取中值作为正方形边长x，统计在所有巧克力中能分割出多少块边长为x的正方形<br>当正方形数量小于k时，我们知道边长越大能分割的数量越少，此时将区间更新为 [l,mid-1] 继续查找。<br>当正方形数量大于等于k时，猜测x可以更大且能满足&gt;&#x3D;k，将区间更新为[mid,r]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N  = <span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储每块巧克力的长宽</span></span><br><span class="line"><span class="type">int</span> qkl[N][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//统计所有巧克力能切割出多少块边长为x的正方形</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    sum+= (qkl[i][<span class="number">0</span>]/x)*(qkl[i][<span class="number">1</span>]/x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    cin&gt;&gt;qkl[i][<span class="number">0</span>]&gt;&gt;qkl[i][<span class="number">1</span>];</span><br><span class="line">  <span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">1e5</span>;</span><br><span class="line">  <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">    <span class="type">int</span> mid = l+r<span class="number">+1</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">count</span>(mid)&lt;k) r=mid<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> l = mid;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; l;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>POJ1135 奇怪的电梯 DFS深搜</title>
      <link href="/2022/10/21/POJ1135%20%E5%A5%87%E6%80%AA%E7%9A%84%E7%94%B5%E6%A2%AF%20DFS%E6%B7%B1%E6%90%9C/"/>
      <url>/2022/10/21/POJ1135%20%E5%A5%87%E6%80%AA%E7%9A%84%E7%94%B5%E6%A2%AF%20DFS%E6%B7%B1%E6%90%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原题链接： <a href="https://www.luogu.com.cn/problem/P1135">https://www.luogu.com.cn/problem/P1135</a></p></blockquote><p><img src="http://cdn.zsenhe.com/b6c55b1d5253465c9d9212177e25c20f" alt="微信截图_20221021201154.png"></p><p>考虑用dfs来做的话，单纯的深搜会超时，而且不一定搜出来的就是最小的(bfs: ?)<br>我们需要一边判断当前搜到的按按钮数，取最小的存下来，同时存下状态进行记忆化搜索。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">220</span>;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="type">int</span> n,x,y;</span><br><span class="line"><span class="type">int</span> ox[] = &#123;<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> count = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dst[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="comment">//当按按钮的次数已超过上次取的最小值，进行剪枝</span></span><br><span class="line">    <span class="keyword">if</span>(u&gt;count) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//走到目的地了，判断上次存下来的次数，取min</span></span><br><span class="line">    <span class="keyword">if</span>(x==y)&#123;</span><br><span class="line">    count = u&lt;count?u:count;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//每次回溯前的搜索，每个点都只能被走一次</span></span><br><span class="line">    dst[x] = <span class="number">1</span>;</span><br><span class="line">   <span class="comment">//往深处搜</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">    <span class="type">int</span> nx = x+(ox[i]*p[x]);</span><br><span class="line">        <span class="comment">//判断边界</span></span><br><span class="line">    <span class="keyword">if</span>(nx&gt;=<span class="number">1</span>&amp;&amp;nx&lt;=y&amp;&amp;nx!=x&amp;&amp;!dst[nx])&#123;</span><br><span class="line">    <span class="built_in">dfs</span>(nx,y,u<span class="number">+1</span>);</span><br><span class="line">                <span class="comment">//回溯(回到这里的时候,nx会被标记为不可用,为了让i接着走,需要恢复现场)</span></span><br><span class="line">    dst[nx]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;p[i];</span><br><span class="line">    <span class="built_in">dfs</span>(x,y,<span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; (count==<span class="number">1e5</span>?<span class="number">-1</span>:count) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/dfdec702ab344d7b84e855e27564d2ab" alt="微信图片_20221021201212.png"></p><p>当然，并不是一帆风顺…<br><img src="http://cdn.zsenhe.com/d90e99c720e14ecbbade35755ecd402e" alt="微信截图_20221021202122.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯真题——路径之谜，DFS深搜</title>
      <link href="/2022/10/21/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84%E4%B9%8B%E8%B0%9C%EF%BC%8CDFS%E6%B7%B1%E6%90%9C/"/>
      <url>/2022/10/21/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84%E4%B9%8B%E8%B0%9C%EF%BC%8CDFS%E6%B7%B1%E6%90%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目链接: <a href="https://www.lanqiao.cn/problems/89/learning/">https://www.lanqiao.cn/problems/89/learning/</a></p></blockquote><p><img src="http://cdn.zsenhe.com/0ec1a184854645ac951161ca0ed5298d" alt="1666344976897.png"><img src="http://cdn.zsenhe.com/a7be9ec5d20346d8ac06ad76bcc82463" alt="1666345003061.png"></p><p>AC代码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//colP北墙，rowP西墙靶子数</span></span><br><span class="line"><span class="type">int</span> colP[N],rowP[N];</span><br><span class="line"><span class="comment">//state数组，存储状态（哪个格子已经被走过了）</span></span><br><span class="line"><span class="type">int</span> dst[N][N];</span><br><span class="line"><span class="comment">//x,y四个方向的偏移量</span></span><br><span class="line"><span class="type">int</span> ox[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;,oy[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//双端队列</span></span><br><span class="line">deque&lt;<span class="type">int</span>&gt; path;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//检查靶子是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkComp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(colP[i]!=<span class="number">0</span>||rowP[i]!=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查是否越界</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;=<span class="number">0</span>&amp;&amp;x&lt;n&amp;&amp;y&gt;=<span class="number">0</span>&amp;&amp;y&lt;n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="comment">//看下方解释</span></span><br><span class="line">   <span class="comment">//    if(rowP[x]==0||colP[y]==0) &#123;</span></span><br><span class="line">    <span class="comment">//    return;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//扣除靶子上的箭矢</span></span><br><span class="line">    rowP[x] --,colP[y]--;</span><br><span class="line">    <span class="comment">//将当前格子标记为已走过</span></span><br><span class="line">    dst[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//在队尾存储当前格子 （输出的格子编号为n*x+y）</span></span><br><span class="line">    path.<span class="built_in">push_back</span>(n*x+y);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果已经走到了终点格，判断靶子数是否为空</span></span><br><span class="line">    <span class="comment">//为空则输出正确路径</span></span><br><span class="line">    <span class="keyword">if</span>(x==n<span class="number">-1</span>&amp;&amp;y==n<span class="number">-1</span>&amp;&amp;<span class="built_in">checkComp</span>())&#123;</span><br><span class="line">        <span class="keyword">while</span> (!path.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, path.<span class="built_in">front</span>());</span><br><span class="line">            path.<span class="built_in">pop_front</span>();</span><br><span class="line">            <span class="built_in">printf</span>(path.<span class="built_in">empty</span>() ? <span class="string">&quot;\n&quot;</span> : <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只取一条路径即可，直接exit进程</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//枚举上下左右四个偏移量，依次走过去</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> nx = x+ox[i],ny=y+oy[i];</span><br><span class="line">        <span class="comment">//检查边界，靶子箭矢数是否已空</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(nx,ny)&amp;&amp;!dst[nx][ny]&amp;&amp;</span><br><span class="line">rowP[nx]&gt;<span class="number">0</span>&amp;&amp;colP[ny]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//走过去</span></span><br><span class="line">            <span class="built_in">dfs</span>(nx,ny);</span><br><span class="line">            <span class="comment">//如果上面的dfs没有走到头，则需要回溯状态，从i+1开始继续尝试</span></span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">            dst[nx][ny] = <span class="number">0</span>;</span><br><span class="line">            ++rowP[nx],++colP[ny];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;colP[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;rowP[i];</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我以为做DFS题时最该优先考虑的是递归的顺序，如果没有经过重复思考边界条件就开始动手，debug的过程中会因为理不清递归层得抑郁症。为了防止这种情况，考虑的时候任何一个细节都不应该放过，像上面这道题<br>如果我们将这段判断靶子箭矢是否为空的代码放在函数入口处</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(rowP[x]==<span class="number">0</span>||colP[y]==<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而不在枚举四个方向时判断靶子数量再进行dfs，那么回溯回来时，我们进行了一次不必要的</p><blockquote><p>++rowP,++colP</p></blockquote><p>这会影响最后的结果，回溯的时候每个状态都很重要，稍加不慎会做到缺漏或影响正确结果</p><p><img src="http://cdn.zsenhe.com/1129f0c7d5924ef18656a7fb7d45c03c" alt="微信截图_20221021175336.png"></p><p>这周打算多刷点DFS题，周日会整理到网站上</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>转载的一篇有关学习的文章</title>
      <link href="/2022/10/21/%E8%BD%AC%E8%BD%BD%E7%9A%84%E4%B8%80%E7%AF%87%E6%9C%89%E5%85%B3%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%96%87%E7%AB%A0/"/>
      <url>/2022/10/21/%E8%BD%AC%E8%BD%BD%E7%9A%84%E4%B8%80%E7%AF%87%E6%9C%89%E5%85%B3%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址: <a href="https://www.zhangxinxu.com/life/2019/03/study/">https://www.zhangxinxu.com/life/2019/03/study/</a><br>张鑫旭老师真是吾辈前进的灯塔</p></blockquote><p>招聘高峰季，最近面试了一些人，聊到关于学习话题的时候，发现很多人有学不进去，没时间学的问题，加上之前断断续续有很多人咨询我关于如何学习的问题，我觉得可以好好讲讲我对于学习这件事的一些经验和看法。</p><p>这些经验与看法不局限于IT技术的学习。</p><h3 id="一、学不进去"><a href="#一、学不进去" class="headerlink" title="一、学不进去"></a>一、学不进去</h3><ol><li>为什么你学不进去？<br>我认为“学不进去”分两种情况，一种是真学不进去，还有一种是专业技术学不进去。</li></ol><p>“真学不进去”主要出现在抑郁症患者上，对什么都不感兴趣，看剧，游戏，娱乐都提不起兴趣，整个人充满无力与忧伤，建议专业治疗，很多时候是生理原因导致。</p><p>还有一种是“专业技术学不进去”，这类人是大多数。具体表现为看电视剧看综艺可以乐此不疲，熬夜没问题，付费观看没问题；又或者游戏玩得不亦乐乎，杀杀杀，奶奶奶，耶耶耶，中午休息也会来两盘。这种学不进去是有希望快速改进的。</p><p>一个人，如果能够专注几个小时看电视，看小说，或者玩游戏，说明这个人很有潜力，成为技术高手是有可能的呀。你想啊，只要他也能持续专注学习专业技术，成为技术高手那可是指日可待啊。</p><p>关键问题是，这些人一拿起书，一看到那些学习资料 —— 哎呀，我怎么好像有些饿了；哎呀，天气这么好，是不是应该出去走走；哎呀，都这么晚了，该洗洗睡了，明天再说吧。</p><p>表面原因好像是外部干扰，客观环境不好，本质上是因为专业学习这件事情缺少短期激励，无法及时带来满足感和愉悦感。</p><p>看剧看小说情绪跟着动，或悲伤或欢笑；玩游戏有互动，有反馈，紧张刺激，要是赢了还有巨大的胜利的喜悦。这些事情都能快速带来精神上的奖励和反馈。但是，学习专业技术这件事情，唉……就像硬着头皮喝了一碗白开水，回头一看，麻鸭，还有一缸白开水要喝，而且是司马光砸缸救人那么大的一口缸。这白开水淡而无味，量又大，而且喝了几碗啥效果也看不到，想了想，还是去看剧玩游戏有意思，最终表现为有心想学，无力学习。</p><ol start="2"><li>如何学得进去？<br>我总结为下面3个方面：</li></ol><blockquote><p>方法<br>自身<br>内容</p></blockquote><p>各类权威指南，还有MDN文档是非常好的学习资料，可以很好地扎实基础。但是，这些学习资料如白开水一般枯燥，也没有标注哪些是精华务必掌握哪些是糟粕可以不用学习。如果你学不进去，不要勉强，果断放弃之，没必要让自己痛苦，去寻找那些二次封装的比较系统的学习资料。所谓二次封装，就是指明了精华和糟粕，与开发实践走得很近的学习资料。这种类型的书籍包括《JavaScript语言精粹》，还有我的《CSS世界》以及后续一些著作。</p><p>去寻找那种“游戏式”的学习课程，闯关那种，关键要系统，这样的课程其实不少，多国外开发者开发的，大家可以自行寻找。因为我没有这方面需求，所以我也平时没记录，但我之前有见过。</p><p>去寻找那种所见所得的学习课程，10分钟以内短小精悍那种，一定要视觉可见，及时反馈，否则你们肯定坚持不下去，我了解你们的。khanacademy.org有一些这种免费课程，其它类似学习课程大家自行寻找，我接下来也会尝试写技术文章同时配套对应的语音视觉化课程。</p><p><strong>方法</strong><br>每学一个阶段，都要给自己一些奖励，例如，每看完一篇文章，或者看完一个短视频教程我就奖励自己玩一盘游戏。不过这种奖励是自己设定的，很容易不遵守，此时可以求助别人，例如女朋友：“哈尼，如果我今天写完这篇5000字的技术文章，你就奖励我晚上嘿嘿嘿……”是不是动力十足。</p><p>项目驱动，实例入手。文档是枯燥的，实例是鲜活的，可以及时反馈的。因此，专业学习，尤其在初期，其实是比较推荐从实例入手学习的，因为可以立马看到效果，有成就感，容易产生兴趣。等熟练后再去熟悉各类API细节和文档，就比较容易了。没必要一开始就去看文档啥的。</p><p>学会任务分解，也就是把一缸白开水放在一个一个的小碗里，每天喝一碗，也不是不可以，对吧。但是，如果直接对着个大缸就开始喝，喝了一个月，结果缸里的水好像就没少，如蚍蜉撼树，很容易望而生怯的。</p><p>学会放纵自己。有时候心情不好，不想学习，不要勉强自己，硬着头皮去学，既学不到东西，又浪费了时间。这个时候你应该痛快去玩，玩游戏玩到昏天暗地，追剧追到天荒地老，直到负罪满满再去学习。这样既玩得开心，又学得进去，很奈斯！</p><p><strong>自身</strong><br>这个才是最根本的解决之道，首先要目光长远，其次就是想办法锻炼自己延迟满足的能力。</p><p>可能大家听过著名的“糖果实验”，1960年由美国心理学家瓦特·米伽尔给一些三四岁的孩子每人发一颗非常好吃的软糖，同时告诉他们可以吃糖，如果马上吃，只能吃1颗；如果等20分钟，则能吃2颗。有些孩子急不可待，马上把糖吃掉了。另一些孩子却能等待对他们来说是无尽的20分钟。为了使自己耐住性子，他们闭上眼睛不看糖，或头枕双臂，自言自语，唱歌，有的甚至睡着了，最终他们吃到了2颗糖。</p><p>通过对糖果实验后期的追踪研究，科学家发现，十几年后，两种孩子在情绪与社会性方面的差异非常显著。克制型的孩子，显得社会适应力较强，较为自信，能够积极迎接挑战，不轻言放弃。在追求目标时，也能和小时候一样压抑即时得到满足的冲动。冲动型的孩子，约有1&#x2F;3缺乏这种特质，容易因挫折而丧失斗志，遇到压力容易退缩或者彷徨失措。</p><p>专业学习就是一个典型的需要克制才能有明显收益的事情，也就是你延迟满足能力越强，你日后的收益反而越高。</p><p>你一两天的冲动学习是看不到效果的，你需要持续学习，系统且深入，久而久之才能看到明显的技术的成长。而且，技术的成长带来的收益也是悄无声息，比较漫长的。</p><p>大多数的人的技术学习全部来源自工作中的项目开发，因为这些付出可以有立竿见影的回报，工资和奖金。但是，工作之余的学习带来的收益却像是个黑洞，你看不见摸不着，无法即时反馈，没有物质奖励，即使你知道以后会有用，但是一想到漫长付出的艰辛，以及万一学的东西没用的心态，导致工作之余的学习坚持不下去，放弃了，着实可惜。</p><p>请记住这句话：技术比人情更可靠，你所学习的技术知识，积累的那些细节和经验，百分之一百日后可以给你带来令你欣喜的价值，而且这个价值连绵不绝，持续不断，越筑越高。因为技术不像人，技术不会欺骗你，而且越基础的技术越忠诚。</p><p>你拼命学习了1年，技术明显优于其它同事，有点数的公司肯定会给你涨工资，不涨，你技术在手，走人便是，一定有地方可以提供给你技能匹配的薪资的。你的技术学习付出一定会有收益，一定要坚信这一点。</p><p>我就是很好的例子，我从什么都没有的屌丝，通过持续不断的专业学习，你看，现在物质与精神都富足，现在还有心情给你们煲鸡汤。</p><p>有了信心，剩下的就是锻炼自己延时满足的能力。很多人，我就算告诉他，你只要每天系统学习一个小时，1年后工资必增加20%，他还是做不到，就像股市，总有一天会有历史新高，指数翻翻是必然，但他就是放不到那一天。</p><p>这个时候，需要换一种思维方式，1年后工资必增加20%，原来1万一个月，现在每年多2.4万，工作10年就是24万，算下来，也就是你只要每天辛苦学习1小时，每天账户里至少可以增加收入674元，你是不是很乐意去学。那就对啦！专业技术的学习的收益只不过是在日后一起支付给你，为什么不去学习呢？只是收益晚几年到你账上而已。养老保险是60岁之后到账你都愿意交，这个比养老保险划算1万倍的终身受益的专业学习付出为什么不愿意做呢？</p><h3 id="二、没时间学"><a href="#二、没时间学" class="headerlink" title="二、没时间学"></a>二、没时间学</h3><p>鲁迅曾经说过：“时间就像海绵里的水，只要你愿意挤，总还是有的。”</p><ol><li>大家是不是对“没时间”有什么误解<br>面试的时候问道：“业余时间为什么不学点其它东西呢？”</li></ol><p>“平时上班很辛苦，经常加班，没时间。”</p><p>我想到了年轻的时候，都是加班到凌晨，对于现在的小朋友，要是也这么晚，还让他们去学点什么，确实有些为难，于是弱弱地问了一句：“那你平时都什么时候下班啊？”</p><p>“要七八点……”</p><p>我脑袋上方立马出现了点点点，继续问道：“那周末呢？”</p><p>支支吾吾又答不上来。</p><p>我就很奇怪了，难道下班回家到睡觉其中有2，3个小时的自由时间不是时间吗？难道周末两天还有那么多节假日不是时间吗？怎么会说没时间学呢？是不是大家对“没时间”有什么误解？</p><p>后来一番思考，我明白了，是心理账户在作祟。</p><p>如果今天晚上你打算去听一场音乐会，票价是200元，在你马上要出发的时候，你发现你把最近买的价值200元的电话卡弄丢了。你是否还会去听这场音乐会？实验表明，大部分的回答者仍旧去听。可是如果情况变一下，假设你昨天花了200元钱买了一张今天晚上音乐会门票。在你马上要出发的时候，突然发现你把门票弄丢了。如果你想要听音乐会，就必须再花200元钱买张门票，你是否还会去听？结果却是，大部分人回答说不去了。</p><p>可仔细想一想，上面这两个回答其实是自相矛盾的。不管丢的是电话卡还是音乐会门票，总之是丢失了价值200元的东西，从损失的金钱上看，并没有区别。之所以出现上面两种不同的结果，其原因就是大多数人的心理账户的问题。</p><p>人们在脑海中，把电话卡和音乐会门票归到了不同的账户中，所以丢失了电话卡不会影响音乐会所在的账户的预算和支出，大部分人仍旧选择去听音乐会。但是丢了的音乐会门票和后来需要再买的门票都被归入了同一个账户，所以看上去就好像要花400元听一场音乐会了。人们当然觉得这样不划算了。</p><p>说没时间学习其实也是这么回事。有一部分人，把工作和生活区分得很开，心里面有一个工作时间账户，还有一个生活时间账户，其中工作时间账户是每周40小时，如果经常加班，每天在公司待10个小时，显然，工作账户中的时间不仅用光，而且是严重透支，而专业学习也是工作范畴，相当于要从生活账户里面再划时间到工作账户，心理上会觉得不划算，就不愿理去学习，问其原因，答曰“没时间”，其实指的是我计划用来工作的时间已经用完了。</p><p>实际上，钱就是钱，只要金额一样就是一样的，千万不要房子98折你觉得开发商没诚意，白菜3折觉得赚大发了。假设200万的房子前者可以节省4万块，够你买一辈子的白菜的啦！肯定是前者赚大发呀！</p><p>时间就是时间，只要跨度一样她就一样，没有区别。你每天路上通勤1~2个小时不以为然，偶尔下班晚一个小时却暴跳如雷！不是很奇怪吗？</p><p>大家可以用来学习的业余时间是如此充裕，根本就轮不到通过“挤海绵”来预留。</p><p>虽然说了这么多，但我知道的，没用的，没时间就是没时间，如果随便讲两句话就能提高，人类早就遍布银河系了。</p><p>所以有必要从另外一个角度讲讲为什么要从生活时间账户里划一部分时间到工作时间账户。</p><ol start="2"><li>为了有更好的生活<br>问问自己，我工作是为了什么？</li></ol><p>有人是为了成就人生价值，这样的人自驱能力都很强，不需要看本文；有人是为了打发时间，毕竟家里有矿，请出门左转不送；更多的人是为了钱，为了养家糊口，为了更好的生活。</p><p>没有任何问题，这么想挺好，有欲望就能有动力。</p><p>现在再问问问自己，我现在的生活好吗？过得开心吗？</p><p>如果你觉得不错，无忧无虑，那继续保持就好了。但是如果你现在生活不好，占用糟糕的生活时间用来学习，改变现在不好的生活状态，不是理所当然的事情吗？</p><p>牺牲一点生活娱乐时间，用来学习，提高自己，投资自己，以后赚更多的钱，不就有更好的生活了？什么车厘子，买买买，什么香椿，买买买，岂不爽哉！互联网行业相对公平，专业成长的付出必有回报，想要摆脱现在不如意的生活，持续学习吧，生活一定会越来越好。</p><p>什么我需要时间陪女朋友啦，陪家人啦，别自我感动啦。相信我，你女朋友最需要的不是陪伴，你家人最需要的也不是陪伴，不要被屌丝编剧写的电视剧给误导了。你女朋友更希望看到你不断学习上进有事业心能赚钱，女朋友来大姨妈了你发100条在吗干嘛多喝热水有毛线用，直接转个5000块钱，来，宝贝，去买点热水喝才是你女朋友需要的。你家人也不需要你陪伴，你每个月转他们5000块钱，他们不要过的太开心哦！</p><p>贫贱夫妻百事哀。所有家庭矛盾的本源都是钱。请记住这两句话，为了更好的生活，想要摆脱现在的困境，少点娱乐，多点学习，一点也不过分，况且本身就是个稳赚不赔的买卖啊。</p><p>不过如果你希望躺在家里就能升职加薪，出门右转，起点爽文圆你美梦。</p><ol start="3"><li>金钱换时间换更多的金钱<br>如果你还是不愿意牺牲生活时间用来学习，那还是有办法的，那就是通过金钱换时间换更多的金钱。</li></ol><p>上下班的通勤时间就可以用金钱购买，很多年轻人租房子住，为了省房租，住得离公司比较远，上下班通勤加起来甚至快2个小时。在我看来，巨亏的买卖，说愚蠢也不为过。</p><p>我建议刚毕业的年轻人一定要住在公司附近，最好步行10分钟以内就能上班。不要说为了省千把块钱房租住在很远的地方。</p><p>没错，对于刚就业的小年轻多1000块钱的房租是不小的成本，但这1000块钱用来买30个小时（每个工作日节约1.5小时），那是绝对划算的，30块钱买一个小时，妈呀，做梦都要笑醒，想想看你的时薪是多少，这个时间用来工作产出，或者自我学习成长，绝对是赚的呀，而且还是相比当下收益，考虑到你工作表现和升职加薪带来的日后收益，10倍收益不止，目标要长远，要学会看到隐性收益。</p><p>时间是没有心理账户的，年轻时候的时间和年长时候的时间是等同的，年轻时候你1000块钱买30个小时你觉得贵，等你中年时候再看就不贵了，等你年老濒死时候想要再花1000块钱买30个小时，抱歉，虽然你觉得比白菜还便宜，但是已经买不到了。年轻时候的时间和年老时候一样值钱，花钱买时间，稳赚不赔。而且这是个良性循环，买来的时间可以换成更多的金钱，更多的金钱可以买更多的时间，例如买个小车上下班更方便更省时间；医院挂号都是挂几百块钱的特需少排队；有资本不需要应付无聊的应酬；请阿姨帮忙打扫卫生做饭等。</p><p>我现在就很庆幸年轻时候的决定，我就住在公司附近，走路5分多钟，为了节约时间，衣服全部都给干洗店干洗。按照当时几千块钱的工资看，是笔不小的开销，但是现在回过头在看，这些年自己的成长、产出与收获，之前购买时间的花费的那点成本可以忽略不计。</p><p>你的一生中，最宝贵的就是时间，什么时候你能学会花钱买时间，你就走在了快速上升的阶梯上了。</p><ol start="4"><li>我是如何节约与管理时间的？<br>也有部分人确实时间比较紧，比方说家里有小朋友，老人又不方便带，不可能全部都交给老婆，此时就很难有大段的空余时间。</li></ol><p>这里我介绍一点自己的经验，希望可以有所帮助。</p><p>节约时间<br>我工作头几年节约时间的做法：</p><p>不玩游戏不看剧；<br>不社交；<br>不线下购物。购物不聊天不砍价直接买，买到不合适从不退货，将就或再买一个；<br>不打扮；<br>住公司附近；<br>不自己做饭做菜，外面吃；<br>不自己洗衣服，洗衣店；<br>大小号使用离门最近的坑位；<br>上大号必带笔看书；<br>大瓶装水，可以减少去饮水机次数；<br>决不排队买东西；<br>甚至老婆都是从对面屋子的找的。<br>省下来时间用来学习与创作，提高自己同时不断创造价值。</p><p>人生如此宝贵，不要在无意义的事情上浪费。</p><p>管理时间<br>主要讲下业余时间的管理，现在家里有2位小朋友，我是如何抽出时间学习的。</p><p>有时间学习的主要原因是丈母娘，在家帮忙带孩子，洗衣和做饭，哈哈哈，老婆大人也帮了很多忙。</p><p>当然，这只是表象，背后深层次原因在于，一方面我人还不错，对老婆很上心；另一方面是充分利用家人帮我省下的时间成长提高创造价值给家庭带来收益，家里人愿意支持。</p><p>这是一个良性循环，努力上进，家人支持，有更多的时间努力上进，带来更大的家庭受益，得到更多支持。</p><p>要是一个整天就知道玩游戏的女婿，啧啧啧，肯定会让你帮忙带孩子的，每个人对家庭的贡献要均等，否则容易出矛盾。</p><p>有些家庭有小舅子，丈母娘过不来，婆媳关系是隐患，只能夫妻两人自己带小孩，这个时候，我建议，暂时苦一点，把洗衣做饭这种家务外包出去，剩下时间用来成长与提高，虽然暂时可能入不敷出，但是长远来看，是绝对划算的买卖。</p><p>业余学习<br>我平时9<del>10点才到家，一定会开电脑忙点东西，当然不是一开电脑就鸡血满满，会先追新番，日漫还有阅文自家做的国漫攒攒精神力，然后开始忙东西。研究新特性，研究基础细节，或技术创作，或写写小说，或网站维护等。现在上年纪了，凌晨1点就要睡了，偶尔发文章的时候会拖到2</del>3点，然后被老婆批评，哈哈。有时候加班到晚上零点才到家，反而睡得早，因为这点时间忙不了什么，就直接洗洗睡了。</p><p>周末两天是重要的学习时间，因为有难得的大段时间，可以深入学习与创作。不过偶尔也会去钓几个小时鱼，和老婆一起看看电影，吃个大餐啥的。其余时间就是在学习。我很喜欢放假，不是因为可以玩，而是因为放假可以有大段连续的时间写代码，哈哈。</p><p>原本以为大家都是这样的，后来才发现原来就我是这样的，同事说我不是一般人。</p><p>也有人会觉得我生活没有乐趣，人生没有了精彩，笑而不语。</p><p>三、学习秘笈<br>非本文重点，简单提两句，日后可以专门探讨。</p><p>我认为学习的秘笈就是要抓住学习的本质，了解你要学习内容的本性和特质，了解自己学习的优势和潜力，了解人为什么能够记住知识，记忆本质是什么，认知本质是什么等。</p><p>这些统称为学习的能力，而所谓的学习方法，因人而异，但是这个学习能力是通用的。</p><p>我觉得要想有超强的学习能力，关键是要多看书，各个方面的优秀书籍，有利于你明白事物的运行规律，抓住事物的本质，看清最终的发展方向。</p><p>别听那些什么“读书无用论”的狗屁说法，多读书，有时候你学习不得劲，不是你不够努力，而是其它知识积累不足，认知不清晰导致。</p><p>最后，告诉大家一个学习最大的秘笈，那就是“坚持”！</p><p>你不必像我平均每天都学好几个小时，我不是一般人，你们学不来的，这是天赋。</p><p>你们可以频次降低，只要我的1&#x2F;10学习时间就可以了，每周2小时，每周都坚持，你已经可以比90%的人优秀了，因为90%的人都坚持不下去。</p><p>就这么简单。</p><p>（完）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法中一些关于质数的概念以及模板整理</title>
      <link href="/2022/10/14/%E7%AE%97%E6%B3%95%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%85%B3%E4%BA%8E%E8%B4%A8%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF%E6%95%B4%E7%90%86/"/>
      <url>/2022/10/14/%E7%AE%97%E6%B3%95%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%85%B3%E4%BA%8E%E8%B4%A8%E6%95%B0%E7%9A%84%E6%A6%82%E5%BF%B5%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%9D%BF%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="首先质数的概念为"><a href="#首先质数的概念为" class="headerlink" title="首先质数的概念为:"></a>首先质数的概念为:</h1><blockquote><p>质数（Prime number，又称素数），[1] 指在大于1的自然数中，除了1和该数自身外，无法被其他自然数整除的数</p></blockquote><h4 id="1-怎么高效判断数n是否为质数？"><a href="#1-怎么高效判断数n是否为质数？" class="headerlink" title="1. 怎么高效判断数n是否为质数？"></a>1. 怎么高效判断数n是否为质数？</h4><p>最为暴力的方法便是从2~n-1中逐个遍历得i，判断n%i&#x3D;&#x3D;0是否成立，如果成立说明n不为质数（如下代码）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;x<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(x%i)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该代码时间复杂度为O(n),我们可以将他优化一下，将遍历区间从 $[2,n-1]$ 优化到 $[2,√n]$，这是一个质的飞跃！<br>为什么可以这样做呢？我们想象一下在区间[2,n-1]之间遍历，约数是成对出现的，假如取到i可以整除n 即 $n%i&#x3D;&#x3D;0$<br>那么 也会满足 $n%(n%i)&#x3D;&#x3D;0$，由此看来我们只需枚举约数对中较小的那个即可，即循环继续条件改为 $i&lt;&#x3D;n&#x2F;i$，<br>我们整理一下，有</p><p>(举个例子,例如n为12，i为4，12可以被4整除，也可以被12&#x2F;4(3)整除。）</p><blockquote><p>$$i&lt;&#x3D;n&#x2F;i i^{2}^&lt;&#x3D;n,i&lt;&#x3D;√n$$</p></blockquote><p>问题得证，我们将背下以下这个模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-分解质因数"><a href="#2-分解质因数" class="headerlink" title="2.分解质因数"></a>2.分解质因数</h4><p>先补充一下质因数的概念</p><blockquote><p>每个合数都可以写成几个质数相乘的形式，其中每个质数都是这个合数的因数，把一个合数用质因数相乘的形式表示出来，叫做分解质因数。如30&#x3D;2×3×5 。分解质因数只针对合数。</p></blockquote><p>再回忆一下初中的数学知识，我们是怎么手动分解出质因数的<br><img src="http://cdn.zsenhe.com/13c80c83eb5d4c628a34625f57656569" alt="342ac65c103853437c8a621e9813b07eca80884c.png"></p><p>先从定义出发使用最暴力的方法来求出所有质因数,代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;=x; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) <span class="comment">//下面注释的分析成立，那么i一定是质数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> s = <span class="number">0</span>; <span class="comment">//s为质因子的次数</span></span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>) x /= i, s ++ ; <span class="comment">//注意这里的/=操作，进入i判断时，n中是不再有2~i-1的因数了。</span></span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，我们也可以像判断质数那样，把时间复杂度优化到O（√n）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=x/i;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((x%i)==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (x%i==<span class="number">0</span>) x/=i,s++;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么可以这么做呢？原因是n中只会包含一个大于√n的质因子，这也是很好证明的</p><blockquote><p>因为 √n x √n &#x3D; n，如果有2个以上的质因子大于√n，那么结果就矛盾了。</p></blockquote><p><strong>当然，最后需要特判一下x是否大于1，如果大于1，那么x便是唯一的大于根号n的质因子</strong></p><h3 id="埃氏筛法"><a href="#埃氏筛法" class="headerlink" title="埃氏筛法:"></a>埃氏筛法:</h3><p>当需要求2~n中所有质数时，使用埃氏筛法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span><span class="number">+10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> st[N],cnt,as[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            as[cnt++] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n;j+=i) st[j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NOI2001 食物链（带权并查集）</title>
      <link href="/2022/10/08/NOI2001%20%E9%A3%9F%E7%89%A9%E9%93%BE%EF%BC%88%E5%B8%A6%E6%9D%83%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%89/"/>
      <url>/2022/10/08/NOI2001%20%E9%A3%9F%E7%89%A9%E9%93%BE%EF%BC%88%E5%B8%A6%E6%9D%83%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.zsenhe.com/dda61582ce57447b87aa58714d6ca7c2" alt="http://cdn.zsenhe.com/dda61582ce57447b87aa58714d6ca7c2"><br>先整理一下思路:<br>A吃B,B吃C,C吃A，由此形成以下的环形关系<br><img src="http://cdn.zsenhe.com/3bd0c93e747e4135ba0d917ca398addf" alt="http://cdn.zsenhe.com/3bd0c93e747e4135ba0d917ca398addf"><br>因为会一直循环（即对3取余做条件），我们可以用一个并查集来维护查询他们的身份<br><img src="http://cdn.zsenhe.com/e4bd9bad00a24ef4ad146c3f0d93a468" alt="http://cdn.zsenhe.com/e4bd9bad00a24ef4ad146c3f0d93a468"></p><blockquote><p>想象一个食人族家庭来说明他们之间的关系<br>第1代吃掉第0代，第2代吃掉第1代，第3代吃第2代，第0代会吃掉第3代<br>那么如果有吃掉第3代的第4代，那么他必定与第0代是同一代</p></blockquote><p>采用并查集，维护多一个数组d来表示当前节点到根节点的距离，初始化为0（自身到自身的距离为0）<br>这个距离对3取模后只能有三种情况</p><blockquote><p>0 1 2</p></blockquote><p>路径压缩:<br>假设当前并查集状态如下：<br><img src="https://cdn.acwing.com/media/article/image/2019/11/10/2388_7853096e03-iShot-----2019-11-10-16.45.24.jpg" alt="https://cdn.acwing.com/media/article/image/2019/11/10/2388_7853096e03-iShot-----2019-11-10-16.45.24.jpg"><br>压缩后:<br><img src="https://cdn.acwing.com/media/article/image/2019/11/10/2388_fe8fcda003-iShot-----2019-11-10-16.49.04.jpg" alt="https://cdn.acwing.com/media/article/image/2019/11/10/2388_fe8fcda003-iShot-----2019-11-10-16.49.04.jpg"><br>路径压缩的代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">if</span> (p[x] != x)</span><br><span class="line">   &#123;</span><br><span class="line"><span class="comment">//寻找p[x]的根节点 (会更新d[])</span></span><br><span class="line">       <span class="type">int</span> t = <span class="built_in">find</span>(p[x]);</span><br><span class="line"><span class="comment">//x到p[x]的距离加上p[x]到根节点root的距离 = x到root的距离</span></span><br><span class="line">       d[x] += d[p[x]];</span><br><span class="line"><span class="comment">//将p[x]指向根节点root</span></span><br><span class="line">       p[x] = t;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>询问类型 1 x和y是同类:<br>首先判断 x 和 y是否 “在一颗树上”</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果在x和y的父节点root相同的话，说明已经在先前的询问中处理过关系距离了</span></span><br><span class="line"><span class="comment">//那么判断 d[x]%3==d[y]%3 是否成立，如果不成立的话，谎言次数+1</span></span><br><span class="line"><span class="keyword">if</span>(o==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="type">int</span> px = <span class="built_in">find</span>(x),py= <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(px==py&amp;&amp;((d[x]%<span class="number">3</span>)!=(d[y]%<span class="number">3</span>))) res++;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">//如果根节点不相同的话，进行合并</span></span><br><span class="line">     p[px] = py;</span><br><span class="line">     d[px] = d[y]-d[x];</span><br><span class="line">    <span class="comment">//合并的时候需要计算从 px接到py 这条边的长度</span></span><br><span class="line">    <span class="comment">// d[px]+d[x] = d[y] -&gt; d[px] = d[y]-d[x]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>询问类型 2 x可以吃掉y<br>根据以上的分析,x既然可以吃掉y，x与根节点的距离必定比y与根节点的距离大1（对3取模之后)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (d[x]%3-d[y]%3)=1 -&gt; (d[x]-d[y]-1)%3==0 （条件满足时为谎言)</span></span><br><span class="line"><span class="keyword">if</span>(px==py&amp;&amp; (d[x]-d[y]<span class="number">-1</span>)%<span class="number">3</span>) res++;</span><br><span class="line"><span class="comment">// 否则执行合并操作</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(px!=py)&#123;</span><br><span class="line">     p[px] = py;</span><br><span class="line">     d[px] = d[y] + <span class="number">1</span> - d[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50000</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> p[N],d[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询父节点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x]!=x)&#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        d[x]+=d[p[x]];</span><br><span class="line">        p[x] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p[i] = i;</span><br><span class="line">    <span class="comment">//(((d[x]%3)-(d[y]%3))!=1)</span></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        <span class="type">int</span> o,x,y;</span><br><span class="line">        cin&gt;&gt;o&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;n||y&gt;n) res++;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> px = <span class="built_in">find</span>(x),py= <span class="built_in">find</span>(y);</span><br><span class="line">            <span class="keyword">if</span>(o==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(px==py&amp;&amp;(d[x] - d[y]) % <span class="number">3</span>) res++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(px!=py)&#123;</span><br><span class="line">                    p[px] = py;</span><br><span class="line">                    d[px] = d[y]-d[x];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(px==py&amp;&amp; (d[x]-d[y]<span class="number">-1</span>)%<span class="number">3</span>) res++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(px!=py)&#123;</span><br><span class="line">                    p[px] = py;</span><br><span class="line">                    d[px] = d[y] + <span class="number">1</span> - d[x];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer II 067. 最大的异或 （使用Trie树求解）</title>
      <link href="/2022/10/05/%E5%89%91%E6%8C%87%20Offer%20II%20067.%20%E6%9C%80%E5%A4%A7%E7%9A%84%E5%BC%82%E6%88%96%20%EF%BC%88%E4%BD%BF%E7%94%A8Trie%E6%A0%91%E6%B1%82%E8%A7%A3%EF%BC%89/"/>
      <url>/2022/10/05/%E5%89%91%E6%8C%87%20Offer%20II%20067.%20%E6%9C%80%E5%A4%A7%E7%9A%84%E5%BC%82%E6%88%96%20%EF%BC%88%E4%BD%BF%E7%94%A8Trie%E6%A0%91%E6%B1%82%E8%A7%A3%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/ms70jA/">剑指 Offer II 067. 最大的异或</a></p><p>题目如下：</p><p><img src="http://cdn.zsenhe.com/daf3837bfd4c4c50a87d2178da34421b" alt="QQ截图20221005221031.png"></p><p>首先考虑使用朴素算法完成,数据的长度为10^5^,O(n^2^)的复杂度直接爆了,肯定会TL<br>回顾一下Trie树的结构，我们可以将数组里的所有数二进制形式预处理出来一颗字典树</p><p>如对于 [3,2,1] 这个序列:</p><p><img src="http://cdn.zsenhe.com/c0ae8456a69242ef8c40ac03add9763e" alt="QQ截图20221005221621.png"></p><p>在第一层遍历中，我们首先选择 3 这个数 ，那么序列中什么数与3异或后最大呢? 观察3的二进制形式</p><blockquote><p> …. 1 0 1</p></blockquote><p>最大数为全1，我们要尽量往这个值靠拢，也就是说，每个bit异或之后的结果是1会是最优解<br>我们将从左到右遍历所有位的bit，在字典树中找到!bit的子节点（如果找不到的话当然只能继续走了)<br>走到尾之后的值便是对于当前数异或之后的最大结果。</p><p>如对于3这个值，我们会选择 0-&gt;1-&gt;0 (即十进制数2) </p><p>ac的代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 100010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 3000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(a, b) (((a) &gt; (b)) ? (a) : (b))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//son存储字典树 idx为当前可用下标(每一层)</span></span><br><span class="line"><span class="type">int</span> son[M][<span class="number">2</span>],idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入字典树操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;~i;i--)&#123;</span><br><span class="line">        <span class="type">int</span> bit = x&gt;&gt;i&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!son[p][bit]) son[p][bit] = ++idx;</span><br><span class="line">        p = son[p][bit];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找最大数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>,res=p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;~i;i--)&#123;</span><br><span class="line">        <span class="type">int</span> bit = x&gt;&gt;i&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(son[p][!bit])&#123;</span><br><span class="line">            res += <span class="number">1</span>&lt;&lt;i;</span><br><span class="line">            p = son[p][!bit];</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            p = son[p][bit];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findMaximumXOR</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(son, <span class="number">0</span>, <span class="built_in">sizeof</span>(son));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        <span class="built_in">insert</span>(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i ++ ) res = <span class="built_in">max</span>(res, <span class="built_in">search</span>(nums[i]));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/5e7d18e2d1104833b95afc80fb6bec20" alt="QQ截图20221005222322.png"></p><p>(一开始不知道为什么力扣的提交结果和调试结果不一样，琢磨了好久才知道要memset…)</p><p>补一下trie树的模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//idx为当前可用的内存地址,cnt作为结尾标记</span></span><br><span class="line"><span class="type">int</span> son[N][N],idx,cnt[N];</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> * str)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;str[i];i++)&#123;</span><br><span class="line">    <span class="type">int</span> u = mapper<span class="comment">//映射;</span></span><br><span class="line">    <span class="keyword">if</span>(!son[p][u]) son[p][u]=++idx;</span><br><span class="line">    p = son[p][u]</span><br><span class="line">  &#125;</span><br><span class="line">  cnt[p]++;<span class="comment">//记录单词次数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找单词次数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> * word)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;word[i];i++)&#123;</span><br><span class="line">    <span class="type">int</span> u = mapper;</span><br><span class="line">    <span class="keyword">if</span>(!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    p = son[p][u]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数组模拟队列与单调队列</title>
      <link href="/2022/10/04/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E9%98%9F%E5%88%97%E4%B8%8E%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
      <url>/2022/10/04/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E9%98%9F%E5%88%97%E4%B8%8E%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>队列即是一个特殊的数组，这个数组最前面的元素称为 <strong>队头</strong> 尾部元素称为 <strong>队尾</strong></p><p><img src="https://cdn.acwing.com/media/article/image/2022/07/15/55289_e51b136403-1.png" alt="队列"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//[hh, tt] 之间为队列（左闭右闭）</span></span><br><span class="line"><span class="type">int</span> hh = <span class="number">0</span>;<span class="comment">//队头位置</span></span><br><span class="line"><span class="type">int</span> tt = <span class="number">-1</span>;<span class="comment">//队尾位置</span></span><br><span class="line"><span class="comment">//操作次数</span></span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line"><span class="comment">//操作方式</span></span><br><span class="line">string s;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队：队尾先往后移动一格，再放入要插入的数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    q[++tt] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队：队头往后移动一格</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    hh++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[hh, tt]表示队列区间，当tt &gt;= hh时，区间为空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tt &gt;= hh) cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//hh指向队头，q[hh]代表队头元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; q[hh] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以及一道和单调栈类似的模板题<br><img src="http://cdn.zsenhe.com/32015f25c3b04a68a628e6fc41fd5483" alt="QQ截图20221004211239.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span><span class="number">+10</span>;</span><br><span class="line"><span class="comment">//q[]作为双端队列(滑动窗口)</span></span><br><span class="line"><span class="type">int</span> p[N],q[N],n,k,hh,tt=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="comment">//判断队头是否已滑出窗口 (注意p[]存储的是下标)</span></span><br><span class="line">        <span class="keyword">if</span>(hh&lt;=tt&amp;&amp;q[hh]&lt;i-k<span class="number">+1</span>) hh++;</span><br><span class="line"><span class="comment">//判断队尾是否大于当前元素,如果大于,说明p[i]比p[tt]更合适,将队尾弹出</span></span><br><span class="line">        <span class="keyword">while</span>(hh&lt;=tt&amp;&amp;p[q[tt]]&gt;=p[i]) tt--;</span><br><span class="line"><span class="comment">//将当前元素加入窗口</span></span><br><span class="line">        q[++tt] = i;</span><br><span class="line"><span class="comment">//处理完之后队列为单调递增,队头即是当前窗口的最小元素</span></span><br><span class="line">        <span class="keyword">if</span>(i&gt;=k<span class="number">-1</span>) cout &lt;&lt; p[q[hh]] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    hh=<span class="number">0</span>,tt=<span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//窗口内最大元素只需对齐做</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(hh&lt;=tt&amp;&amp;q[hh]&lt;i-k<span class="number">+1</span>) hh++;</span><br><span class="line">        <span class="keyword">while</span>(hh&lt;=tt&amp;&amp;p[q[tt]]&lt;=p[i]) tt--;</span><br><span class="line">        q[++tt] = i;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=k<span class="number">-1</span>) cout &lt;&lt; p[q[hh]] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最近工作有点忙，有时间再来补充详细吧hh</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>栈的应用——单调栈</title>
      <link href="/2022/10/03/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8%E2%80%94%E2%80%94%E5%8D%95%E8%B0%83%E6%A0%88/"/>
      <url>/2022/10/03/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8%E2%80%94%E2%80%94%E5%8D%95%E8%B0%83%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.zsenhe.com/43a691a544784aa5b575a75bef180d0a" alt="QQ截图20221004001300.png"><br>我们先考虑暴力做法:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> arry[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">cin</span> &gt;&gt; arry[i];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-1 &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> j=i;</span><br><span class="line">        <span class="keyword">do</span> j--;<span class="keyword">while</span>(arry[j]&gt;=arry[i]);</span><br><span class="line">        <span class="keyword">if</span>(j&lt;<span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-1 &quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; arry[j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">指针i从左到右遍历元素,指针j从i<span class="number">-1</span>的位置开始往左扫描，遇到最近一个&lt;i的元素便输出;</span><br></pre></td></tr></table></figure><p>结果当然是愉快的超时咯<br><img src="http://cdn.zsenhe.com/72c68f26dc0b46949fcf26537dd5d094" alt="QQ截图20221004003536.png"></p><p>单调栈的考虑思路类似双指针<br>假设从左到右扫描，每处理一个元素a<del>n</del>时，在它入栈前，栈stk[]中维护的是 [a<del>1</del>…a<del>n-1</del>]<br>我们可以发现，当stk中拥有元素a<del>x</del> a<del>y</del>且满足 </p><blockquote><p><strong>a<del>x</del>&gt;a<del>y</del>; x&lt;y</strong></p></blockquote><p>这样的话，不论后续的元素是什么，a<del>y</del>都会是更优的选择，题目要求的是 <strong>“靠右且更小的元素”</strong><br><img src="http://cdn.zsenhe.com/57914e10ed9244f7b1432ef75f238db7" alt="QQ截图20221004004646.png"><br>如图，将满足条件的红色逆序对全部删除后，我们可以得到一个单调上升的区间<br>对于随后每次扫描的a<del>n</del>,从栈顶开始遍历，当栈顶的值&gt;&#x3D;a<del>n</del>，便满足了上文所说的性质，a<del>n</del>比a<del>tt</del><strong>更小且更靠右</strong><br>此时栈顶弹出，即代码中的这一段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(tt&amp;&amp;stk[tt]&gt;=x) tt--;</span><br></pre></td></tr></table></figure><p>这一步进行完，如果栈中还有元素，那必定是满足性质的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">       <span class="keyword">if</span>(tt) <span class="built_in">cout</span> &lt;&lt; stk[tt] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">       <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-1 &quot;</span>;</span><br><span class="line"><span class="comment">//否则输出-1</span></span><br></pre></td></tr></table></figure><p>做完别忘了把新的值压入栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stk[++tt] = x;</span><br></pre></td></tr></table></figure><p><strong>完整的ac代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> stk[N],tt;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; tt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        <span class="keyword">while</span>(tt&amp;&amp;stk[tt]&gt;=x) tt--;</span><br><span class="line">        <span class="keyword">if</span>(tt) <span class="built_in">cout</span> &lt;&lt; stk[tt] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-1 &quot;</span>;</span><br><span class="line">        stk[++tt] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及从社区偷的一张dalao画的流程图<br><img src="https://img-blog.csdnimg.cn/20201211221031165.gif#pic_center" alt="lc"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数组模拟栈</title>
      <link href="/2022/10/03/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E6%A0%88/"/>
      <url>/2022/10/03/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<p>数组模拟栈</p><p><img src="https://img-blog.csdnimg.cn/20210218204524571.png#pic_center" alt="栈"></p><blockquote><p>stk[N] 栈; tt表示栈顶所在索引下标（初始时tt&#x3D;0,表示栈为空）</p></blockquote><ol><li>入栈: ++tt，存入x。 stk[++tt] &#x3D; x;</li><li>出栈: tt–</li><li>empty: tt&lt;&#x3D;0时栈为空.top &lt;&#x3D; 0 ? “empty” : “not empty”;</li><li>query: 返回栈顶元素 stk[tt]</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> stk[N],tt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    stk[++tt] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">   tt --;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tt&lt;=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看栈顶元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">query</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stk[tt];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">string</span> user;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;user;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="string">&quot;push&quot;</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">            push(x);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(user==<span class="string">&quot;pop&quot;</span>)&#123;</span><br><span class="line">            pop();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(user==<span class="string">&quot;empty&quot;</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; (isEmpty()?<span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(user==<span class="string">&quot;query&quot;</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; query() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入为:</p><blockquote><p>10<br>push 5<br>query<br>push 6<br>pop<br>query<br>pop<br>empty<br>push 4<br>query<br>empty</p></blockquote><p>输出:</p><blockquote><p>5<br>5<br>YES<br>4<br>NO</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用数组模拟单链表结构</title>
      <link href="/2022/09/30/%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E5%8D%95%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84/"/>
      <url>/2022/09/30/%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E5%8D%95%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>使用数组模拟链表相对于使用结构指针,拥有更高的效率（省去了动态分配内存的环节)</p><blockquote><p>c++代码</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span><span class="number">+10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头指针</span></span><br><span class="line"><span class="type">int</span> head;</span><br><span class="line"><span class="comment">//下一个可用的位置</span></span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储链表值</span></span><br><span class="line"><span class="type">int</span> e[N];</span><br><span class="line"><span class="comment">//存储next指针</span></span><br><span class="line"><span class="type">int</span> ne[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入头节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert_head</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = head;</span><br><span class="line">    head = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向k节点后面追加一个新的节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = ne[k];</span><br><span class="line">    ne[k] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除k节点后面的一个元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head;i!=<span class="number">-1</span>;i=ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> value = e[i];</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是图解各个操作的执行流程</p><blockquote><p>初始化链表<br><img src="http://cdn.zsenhe.com/abc936b953e44dd798b931bbe2836904" alt="初始化.PNG"><br>(打错字了，不是“执行”，是指向)</p></blockquote><blockquote><p>插入头节点<br><img src="http://cdn.zsenhe.com/99c07c73b13a4b0380fc25eb4f4966ec" alt="插入头节点.PNG"></p></blockquote><blockquote><p>在k后方插入一个新的节点<br><img src="http://cdn.zsenhe.com/1459e11868f344dc9a19ee6708965774" alt="插入新节点.PNG"></p></blockquote><blockquote><p>删除k的下一个节点<br><img src="http://cdn.zsenhe.com/6191f255fa3d49f9940cc589c2bf701b" alt="删除节点.PNG"></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>归并排序笔记,代码模板</title>
      <link href="/2022/09/29/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%AC%94%E8%AE%B0,%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/09/29/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%AC%94%E8%AE%B0,%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="归并排序模板"><a href="#归并排序模板" class="headerlink" title="归并排序模板"></a>归并排序模板</h3><p>归并和 <a href="http://127.0.0.1:8080/article/17">快排</a> 同样属于分治算法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_sort</span><span class="params">(<span class="type">int</span> * p,<span class="type">int</span> l,<span class="type">int</span> r)</span>&#123;</span><br><span class="line">    <span class="comment">//递归的终止条件</span></span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//1.确定子问题分界点</span></span><br><span class="line">    <span class="type">int</span> mid = l+r&gt;&gt;<span class="number">1</span>,i=l,j=mid+<span class="number">1</span>,k=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//2.递归处理子问题</span></span><br><span class="line">    merge_sort(p,l,mid);</span><br><span class="line">    merge_sort(p,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="comment">//3.子问题合并</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i]&lt;=p[j]) tmp[k++] = p[i++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k++] = p[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid) tmp[k++] = p[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r) tmp[k++] = p[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l,j=<span class="number">0</span>;i&lt;=r;i++) p[i] = tmp[j++];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在合并子问题时,<strong>[l…mid] [mid+1…r]</strong> 分别都是有序区间。<br>为什么递归处理之后会是有序的呢，来模拟一下以下这个序列</p><blockquote><p>1 4 3 6 8 7 5 </p></blockquote><p>进入函数时,mid取到 6<del>3</del>,于是递归的两个区间被分为</p><blockquote><p>[0…3] [4…6]</p></blockquote><p>进入第一个区间的递归,过程如图</p><p><img src="http://cdn.zsenhe.com/547a2ebd1b0c44aeb9b37007a2d48764" alt="ht.png"></p><p>右边的 [4…6]区间也是这样处理，回到 mid为 6<del>3</del>这里，当两轮递归结束，左右区间已经是有序的了。<br>此时再执行与子区间相同的归并操作，当整个区间处理完(l&gt;&#x3D;r时)，问题也就解决了。</p><h3 id="排序的时间复杂度分析"><a href="#排序的时间复杂度分析" class="headerlink" title="排序的时间复杂度分析:"></a>排序的时间复杂度分析:</h3><p>每层递归我们会将序列一分为二，即第一层分为2段 n&#x2F;2 第三层分为4段 n&#x2F;4 的区间 ….<br>每层我们的元素都至少会被扫描一次，即每层递归的时间复杂度都为On<br> <img src="http://cdn.zsenhe.com/e122fe15f3cb46b688b44664d582c25b" alt="ht2.png"></p><p>n除以2要除多少次会得到1呢，答案自然是log2n,每层都是On的时间.所以归并排序的时间复杂度为 <strong>nlogn</strong><br>与快排的区别是快排在数据较烂，最坏的情况下会达到 <strong>n^2^</strong> 的时间复杂度，而归并排序是稳定的算法，时间复杂度永远都是nlogn</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>快排笔记,代码模板</title>
      <link href="/2022/09/27/%E5%BF%AB%E6%8E%92%E7%AC%94%E8%AE%B0,%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/09/27/%E5%BF%AB%E6%8E%92%E7%AC%94%E8%AE%B0,%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.zsenhe.com/39fa3f0dbe3e4554b73a8641866e607e" alt="QQ截图20210516105844.png"><br>快排属于分治算法，分治算法都有以下几个步骤。</p><p><strong>1.分成子问题 -&gt; 2.递归处理子问题 -&gt; 3.合并子问题</strong></p><p>快排的步骤分为:</p><blockquote><p>1.确定基准值 <strong>x</strong> ,可取随机一个元素<br>2.调整区间,使得 <strong>[l,x]&lt;&#x3D;x** , **[x,r]&gt;&#x3D;x</strong><br>3.递归处理左右区间</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//递归的终止情况(合法情况l==r时终止递归,即区间内只有一个数)</span></span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//第一步：分成子问题</span></span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) swap(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二步：递归处理子问题</span></span><br><span class="line">    quick_sort(q, l, j), quick_sort(q, j + <span class="number">1</span>, r);</span><br><span class="line">    <span class="comment">//第三步：子问题合并.快排这一步不需要操作，但归并排序的核心在这一步骤</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来尝试证明在while循环结束后 <strong>[l,j]&lt;&#x3D;x,[j+1,r]&gt;x</strong><br>循环不变式: </p><blockquote><p>q[l..i] &lt;&#x3D; x q[j..r] &gt;&#x3D; x</p></blockquote><p>1.在循环开始之前,i&#x3D;l-1,j&#x3D;r+1<br>则q[l..i],q[j..r]为空,循环不变式成立</p><p>2.某轮循环开始前(循环不变式成立) 执行代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i]&lt;x);</span><br><span class="line">使得q[l..i<span class="number">-1</span>] &lt;=x,q[i]&gt;=x</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j]&lt;x);</span><br><span class="line">使得q[j+<span class="number">1.</span>.r] &gt;=x,q[j]&lt;=x</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i&lt;j) swap(q[i],q[j]);</span><br><span class="line">使得q[l..i]&lt;=x,q[j..r] &gt;= x</span><br></pre></td></tr></table></figure><p>照上面的逻辑，下一次循环开始之前，不变式依然成立</p><p>3.循环终止</p><p>循环结束时, <strong>i&gt;&#x3D;j,q[l..i]&lt;&#x3D;x,q[j..r]&gt;&#x3D;x</strong><br>按照j来划分, 可以得到 <strong>q[l..j] &lt;&#x3D;x,q[j+1..r]&gt;&#x3D;x</strong></p><p>如何证明这个结论是正确的呢,关键在于最后一轮循环<br>因为i&gt;&#x3D;j,所以swap操作并不会进行,即我们只能保证<br><strong>p[l,i-1]&lt;&#x3D;x,p[i]&gt;&#x3D;x,p[j+1,r]&gt;&#x3D;x,p[j]&lt;&#x3D;x**<br>因为 **p[l,i-1]&lt;&#x3D;x,i&gt;&#x3D;j(i-1&gt;&#x3D;j-1)</strong> 以及 <strong>p[j]&lt;&#x3D;x** 可以得到 **p[l,j]&lt;&#x3D;x**<br>又因为 **p[j+1,r]&gt;&#x3D;x (上面的证明)</strong> ，所以问题得证 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode209长度最小的子数组使用二分查找求解</title>
      <link href="/2022/09/25/leetcode209%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E4%BD%BF%E7%94%A8%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B1%82%E8%A7%A3/"/>
      <url>/2022/09/25/leetcode209%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E4%BD%BF%E7%94%A8%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B1%82%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.zsenhe.com/fce0973c2cc54228ad2083bfdc7d4b41" alt="leetcode209.jpg"></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h3><p>题目标签是二分查找，但给出数组是无序的，使用二分查找的方法需新建一个<br><strong>sum[numberSize]</strong> 数组，<strong>sum[i]</strong> 存储 <strong>nums[0]</strong>- <strong>nums[i]</strong> 的和<br>因为题目给出的是正整数，这样可以确认<strong>sum</strong> 数组是单调递增的。我们只需要找到 <strong>sum[k]-sum[j]&gt;&#x3D;target</strong> ,那么<strong>k-j</strong> 便是和大于等于target且连续的子数组，当然不一定是最小的，我们需要一直查找比较。</br><br>再使用一层for循环来遍历<strong>k</strong>吗?这样效率不会比暴力算高很多，前面提过<strong>sum[]</strong> 数组是单调递增的，我们只需要将等式两边变换一下，改为 <strong>sum[k] &gt;&#x3D; sum[j]+target</strong>,这样我们每次都将target和前k项和相加作为参数传入二分查找，来取得 <strong>k</strong> (sum[j]+target的上界)。</br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取得target的上界 </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">upperBound</span><span class="params">(<span class="type">int</span>* nums,<span class="type">int</span> target,<span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> r = numsSize;</span><br><span class="line"><span class="type">int</span> rnIndex = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid = l+(r-l)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(nums[mid]==target)&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">rnIndex = mid;</span><br><span class="line">r = mid<span class="number">-1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">l = mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rnIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line"><span class="type">int</span> sum[numsSize+<span class="number">1</span>];</span><br><span class="line">sum[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//前缀和 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=numsSize;++i)&#123;</span><br><span class="line">sum[i] = sum[i<span class="number">-1</span>]+nums[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> len = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=numsSize;++i)&#123;</span><br><span class="line"><span class="type">int</span> s = sum[i]+target;</span><br><span class="line"><span class="type">int</span> index = upperBound(sum,s,numsSize);</span><br><span class="line"><span class="keyword">if</span>(index!=<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>((index-i)&lt;len)&#123;</span><br><span class="line">len = (index-i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(len==<span class="number">2147483647</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></br>折磨了一晚上,最后的提交结果<p><img src="http://cdn.zsenhe.com/ac67f1ac6c5247f0ab68d5a3b6294d46" alt="leetcode209ac.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从失败中累积经验，让自己前进的步伐更快，这便是KMP！&#39;</title>
      <link href="/2022/07/25/%E4%BB%8E%E5%A4%B1%E8%B4%A5%E4%B8%AD%E7%B4%AF%E7%A7%AF%E7%BB%8F%E9%AA%8C%EF%BC%8C%E8%AE%A9%E8%87%AA%E5%B7%B1%E5%89%8D%E8%BF%9B%E7%9A%84%E6%AD%A5%E4%BC%90%E6%9B%B4%E5%BF%AB%EF%BC%8C%E8%BF%99%E4%BE%BF%E6%98%AFKMP%EF%BC%81&#39;/"/>
      <url>/2022/07/25/%E4%BB%8E%E5%A4%B1%E8%B4%A5%E4%B8%AD%E7%B4%AF%E7%A7%AF%E7%BB%8F%E9%AA%8C%EF%BC%8C%E8%AE%A9%E8%87%AA%E5%B7%B1%E5%89%8D%E8%BF%9B%E7%9A%84%E6%AD%A5%E4%BC%90%E6%9B%B4%E5%BF%AB%EF%BC%8C%E8%BF%99%E4%BE%BF%E6%98%AFKMP%EF%BC%81&#39;/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/833/">AcWing831.KMP字符串 题目链接</a></p><p>题目如下:</p><p><img src="http://cdn.zsenhe.com/49b515c09ce5449c8ed6ccbd01c04850" alt="ac831.jpg"></p><p>KMP是真勾八难，折腾了一晚上才勉强整明白，特别是推导next数组的步骤，看了好几篇博客代码都不一样，在纸上跟着推了一遍才看明白。</br></p><p><img src="https://cdn.acwing.com/media/article/image/2020/10/03/42785_c47d341805-730C14E2D23214EBA8C23FCD4855C40C.jpg"><br>(偷一波社区dalao的推导，<a href="https://www.acwing.com/solution/content/23907/">链接在这</a>)<br>最后AC的代码和注释</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> ne[N];</span><br><span class="line"><span class="type">char</span> s[M], p[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//为了方便从1开始索引</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p + <span class="number">1</span> &gt;&gt; m &gt;&gt; s + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    该循环推导next数组</span></span><br><span class="line"><span class="comment">        next[]数组含义:</span></span><br><span class="line"><span class="comment">            next[i]中存储的值为 [0,i]的最长公共前后缀大小 (即前缀的尾部索引)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意 j 从 0 开始，因为判断时取p[j+1]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        如果当前p[i]!=p[j+1]的话,此时j为上一步(或为0),将next[j]赋给j</span></span><br><span class="line"><span class="comment">        该while循环在p[i]==p[j+1]或j==0(即退无可退，上一步只能从1开始匹配)时退出</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;p[i]!=p[j+<span class="number">1</span>]) j = ne[j];</span><br><span class="line">        <span class="comment">//代码执行到这，j+1有可能等于j的公共前后缀未索引，也有可能j=0</span></span><br><span class="line">        <span class="comment">//判断一下当当前字符p[i]等于ne[j]公共前后缀+1字符的话，ne[i]的公共前后缀长度+1</span></span><br><span class="line">        <span class="keyword">if</span>(p[i]==p[j+<span class="number">1</span>]) j++;</span><br><span class="line">        <span class="comment">//当然也有可能是0</span></span><br><span class="line">        ne[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    该循环在S串中寻找子串P，返回首索引</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= m; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//与求next数组相同，如果当前s[i]!=p[j+1]的话，寻找[1,j]的公共前后缀长度赋给j</span></span><br><span class="line">        <span class="comment">//如果退无可退的话，j这一步之后会等于0，即下一次循环子串从头开始匹配</span></span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">        <span class="comment">//如果字符相同的话，子串的j指针继续往后走</span></span><br><span class="line">        <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">        <span class="comment">//j会一直回溯或前进，当j和p的字符数相等时，说明已经匹配完成</span></span><br><span class="line">        <span class="keyword">if</span> (j == n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i - n);</span><br><span class="line">            j = ne[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二维前缀和与差分笔记</title>
      <link href="/2022/06/14/%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/06/14/%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><p>什么是前缀和？</br><br>给出数组 <strong>a[]</strong> (a[1],a[2],….a[n])<br>设数组 <strong>b[]</strong> 为数组 <strong>a[]</strong> 的前缀和数组，即</br></p><p><strong><em>b[i] &#x3D; a[1] + a[2] + a[3] + …. + a[i]</em></strong></p><p>前缀和的下标一定要从1开始，避免无必要的对下标进行转换</p><p>前缀和的作用主要是用于快速筛选出一段区间的和。如对于 <strong>a[]</strong> 数组想要得出 <strong>[l,r]</strong> 区间内的和，最容易想到的便是暴力遍历的方式。但对于多次询问，我们可以牺牲一点空间构造出前缀和数组 <strong>sum[]</strong> ，之后对于每次询问我们都可以用 <strong>O(1)</strong> 的时间复杂度很方便的得出答案</br></p><h3 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h3><p><strong><em>具体处理</em></strong>:<br>做一个预处理，定义一个 <strong>sum[]</strong> 数组，<strong>sum[i]</strong> 代表 a 数组中前 <strong>i</strong> 项的和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const int N=1e5+10;</span><br><span class="line">int sum[N],a[N]; //sum[i]=a[1]+a[2]+a[3].....a[i];</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123; </span><br><span class="line">    sum[i]=sum[i-1]+a[i];   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>查询操作</em></strong>:<br>对于每次查询，只需返回 <strong>sum[r]-sum[l-1]</strong> ，时间复杂度为 <strong><em>O(1)</em></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scanf(&quot;%d%d&quot;,&amp;l,&amp;r);</span><br><span class="line">printf(&quot;%d\n&quot;, sum[r]-sum[l-1]);</span><br></pre></td></tr></table></figure><h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><p><img src="http://cdn.zsenhe.com/4a2032f066b64f619bebc7138f159251" alt="lk013.jpg"></p><p>我们可以用前缀和的思想来做这道题，首先构建一个新的二维数组（矩阵） <strong>sum[][]</strong> 来存储前缀和</p><p><img src="http://cdn.zsenhe.com/db910879b21d41908369834c01fa9b7b" alt="sum.png"><br>我们需要做一个预处理让 <strong>sum[i][j]</strong> 为 <strong>(i,j)</strong> 左上角所有下标元素的和。</br><br>结合图片得出二维前缀和预处理公式</br><br><strong>sum[i][j] &#x3D; sum[i][j-1]+sum[i-1][j]-sum[i-1][j-1]+a[i][j]</strong><br>(sum[i][j-1]+sum[i-1][j]时sum[i-1][j-1]被加了两次，需要减掉一次)<br>代码这么写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 1; i &lt;= n; i++)</span><br><span class="line">    for (int j = 1; j &lt;= m; j++) &#123;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;a[i][j]);</span><br><span class="line">        s[i][j] = s[i][j - 1] + s[i - 1][j] - s[i - 1][j - 1] + a[i][j]; // 求前缀和</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/45a827e668c34de1b32b2de491de7c80" alt="sum2.png"><br>回到题目上，给出子矩阵左上角 <strong>(x1,y1)</strong> 及右下角 <strong>(x2,y2)</strong> ，求该矩阵内所有元素的和。<br>有了前面前缀和后的处理，我们只需要把面积推导一下就好了，这个过程的时间复杂度依然是 <strong><em>O(1)</em></strong> ，是不是比遍历一遍快多了？</br></p><p>得出(x1,y1),(x2,y2)子矩阵的和为:</br></p><p><strong>sum[x2][y2]-sum[x1-1][y2]-sum[x2][y1-1]+sum[x1-1][y1-1]</strong></p><p>该题完整代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N=1010;</span><br><span class="line">int n,m,q;</span><br><span class="line">int a[N][N],s[N][N];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    scanf(&quot;%d %d %d&quot;,&amp;n,&amp;m,&amp;q);</span><br><span class="line">    for(int i=1;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j=1;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=1;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j=1;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            s[i][j]=s[i-1][j]+s[i][j-1]+a[i][j]-s[i-1][j-1];  //求前缀和</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    while(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        int x1,y1,x2,y2;</span><br><span class="line">        scanf(&quot;%d%d%d%d&quot;,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">        printf(&quot;%d\n&quot;,s[x2][y2]-s[x2][y1-1]-s[x1-1][y2]+s[x1-1][y1-1]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前做过一道标签是二分前缀和的题目:</br><br><a href="http://zsenhe.com/posts/225216/">leetcode209 长度最小的子数组使用二分查找求解</a></p><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><p>给定一个原定数组 <strong>a[]</strong> , 构造一个 <strong>b[]</strong> 数组，使得<br><strong>a[i] &#x3D; b[1]+b[2]+…..+b[i]</strong><br>也就是说 <strong>a[]</strong> 是 <strong>b[]</strong> 的前缀和数组，反过来 <strong>b[]</strong> 是 <strong>a[]</strong> 的差分数组</br><br>我们考虑怎么构建差分数组 <strong>b[]</strong> ，如下</br><br><strong>b[1] &#x3D; a[1]-a[0],</strong><br><strong>b[2] &#x3D; a[2]-a[1],</strong><br><strong>……..</strong><br><strong>b[n] &#x3D; a[n]-a[n-1]</strong><br></br></p><p>我们只要有了 <strong>b[]</strong> 数组，就可以通过前缀和运算 在 <strong><em>O(1)</em></strong> 的时间复杂度内得到原数组 <strong>a[]</strong> ，由此我们可以将差分理解为前缀和的逆运算</br></p><p><strong>那么差分有什么用呢？</strong> 让我们看这么一个问题</br></p><blockquote><p>给定区间 <strong>[l,r]</strong> ,让我们为数组 <strong>a[]</strong> 中的这段区间每个元素都加上<strong>c</strong></p></blockquote><p>最容易想到暴力的做法，我们遍历一遍该区间，分别为每个元素加上c。如果我们要进行m次操作，那么时间复杂度就是 <strong><em>O(N*M)</em></strong> 。有更高效的做法吗？我们可以使用差分来操作</p><p>设 <strong>b[]</strong> 为 <strong>a[]</strong> 的差分数组，考虑通过 <strong>b[]</strong> 来求得 <strong>a[]</strong> 数组，任一个 <strong>b[i]</strong> 的改变会影响 <strong>a[i]</strong> 及之后的元素求值，所以我们只需进行以下两步操作即可完成对某段区间+c</br></p><p><strong><em>b[l]+&#x3D;c,b[r+1]-&#x3D;c</em></strong></p><p>画一个图来解释该公式</br></p><p><img src="http://cdn.zsenhe.com/36ce226a8f51464a8e55e47443849def" alt="di.png"></p><p><strong>b[l]+&#x3D;c</strong> 使得 <strong>a[]</strong> 中 l及后面的元素都加上 <strong>c</strong> (红色部分)。但我们所要求的只是[l,r]之间加上c，于是还需要打一个补丁，让 <strong>b[r+1]-&#x3D;c</strong> 即 <strong>r后面的部分减去前面加的c</strong> （绿色部分），这样r后面的区间不会有任何变化</br></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二分查找的思想和解题步骤笔记，模板</title>
      <link href="/2022/05/30/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9A%84%E6%80%9D%E6%83%B3%E5%92%8C%E8%A7%A3%E9%A2%98%E6%AD%A5%E9%AA%A4%E7%AC%94%E8%AE%B0%EF%BC%8C%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/05/30/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9A%84%E6%80%9D%E6%83%B3%E5%92%8C%E8%A7%A3%E9%A2%98%E6%AD%A5%E9%AA%A4%E7%AC%94%E8%AE%B0%EF%BC%8C%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>二分虽然思想简单，做了两天的题下来发现实际应用到题目中并没有想象中那么轻松,在此记录下笔记和归纳总结一下几道题目的ac过程以备以后复习时使用。</br><br></br><br>二分的思想很简单，以下给出定义。<br></br></p><blockquote><p>给定一个升序排列的数组 <strong>nums</strong> ，在其中寻找某个值<strong>target</strong>，设两个指针 <strong><em>l</em></strong> <strong><em>r</em></strong> 分别指向&gt; 数组左右边界，每次取区间的中点 l+r&gt;&gt;1 为 <strong>mid</strong> ，当 <strong>nums[mid]&gt;targer</strong> 的时候说明元素在 <strong>[l, mid-1]</strong> 之间，反之则在 <strong>[mid+1,r]</strong> ，当两种情况都不满足，则 <strong>nums[mid]</strong> 必定为要寻找的 <strong>target</strong><br></br></p></blockquote><p>如果光知道定义是不足以应用到题目之中的，在连续做了几天的二分题看了一堆题解后，我发觉要二分的不是某个值，而是满足某个性质的区间的边界，当数组可以依照<strong>某种性质</strong>一分为二，即一边 <strong>满足性质</strong> ，另一边 <strong>不满足性质</strong> ，我们就有可能把满足或不满足性质的边界给二分出来，而往往这个边界就是需要返回的答案。这么说多少有点抽象，下面是给出的示例</br><br>如leetcode上这道模板题</br><br><img src="http://cdn.zsenhe.com/1fed011529aa48eb911aca19680610de" alt="ef1.jpg"><br></br><br><img src="http://cdn.zsenhe.com/3759b08937e448e6ab5f327b75a9f960" alt="ef2.jpg"></p><p>如这题，我们将数组一分为二，蓝色是满足性质( <strong>&lt;&#x3D;target</strong> 的区间)，紫色是不满足性质(<strong>&gt;target</strong>)的区间</p></br><p>我们需要做的就是寻找这个蓝色区间的右边界，每次二分一个中值 <strong>nums[mid]</strong> ，<br>当 <strong>nums[mid]&lt;&#x3D;target</strong> 的时候，我们的边界必定在 <strong>[mid,r]</strong> 之间(注意mid是有可能取到答案的),<strong>nums[mid]&gt;target</strong> 的时候，边界必定在 <strong>[l,mid-1]</strong> 这个区间，每次都缩小范围。</br><br>当使用边界的思想，面对一些无单调性但要求在**<em>logn</em>**时间复杂度内做出的题目时，也不至于手足无措，至少可以尝试寻找是否有一个性质能将区间一分为多(菜鸡落泪)进而寻找到边界</br><br>实现代码如下</br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int search(int* nums, int numsSize, int target)&#123;</span><br><span class="line">    int l=0,r=numsSize-1;</span><br><span class="line">    while(l&lt;r)&#123;</span><br><span class="line">        int mid = l + r + 1 &gt;&gt; 1;</span><br><span class="line">        if(nums[mid]&lt;=target) l = mid;</span><br><span class="line">         else r = mid - 1;</span><br><span class="line">    &#125;</span><br><span class="line">    if(nums[l]!=target) return -1;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></br><p>疑惑的一点是取中值的时候为什么是 <strong><em>l+r+1&gt;&gt;1</em></strong> 而不是 <strong>l+r&gt;&gt;1</strong> ，这是因为在c中除法是向下取整的，这<br>样会导致当查找区间为 <strong>[r-1,r]</strong> 的时候，如果是<strong>l+r&#x2F;2</strong>，那么区间会更新为**_[l,r]_<strong>，下次查找还是 <strong>[l,r]</strong> 导致死循环，当</strong><em>mid</em>**落在右区间时，即我们需要寻找的是蓝色区域的边界（满足性质）需要补上+1</br><br>记一下千锤百炼的模板</br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">int bsearch_1(int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    while (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid = l + r &gt;&gt; 1;</span><br><span class="line">        if (check(mid)) r = mid;    // check()判断mid是否满足性质</span><br><span class="line">        else l = mid + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br><span class="line">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span><br><span class="line">int bsearch_2(int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    while (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid = l + r + 1 &gt;&gt; 1;</span><br><span class="line">        if (check(mid)) l = mid;</span><br><span class="line">        else r = mid - 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></br>由以上总结出</br><p><strong><em>具有单调性的题一定可以二分，不具有单调性但可以将区间一分为二的题有可能可以二分</em></strong><br></br><br>在将做二分题的步骤抽象了之后，尝试做了一道题加深印象</br><br><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">leetcode34 数的范围</a></br><br>题目要求: </br><br><img src="http://cdn.zsenhe.com/a00dfe3704ca45d1aaa807169497d471" alt="ef3.jpg"><br></br></p><p>按上面的思路将题目翻译一下，我们要寻找的是 第一个和最后一个 <strong>&gt;&#x3D;targert</strong> 的数，即求上下界的索引位置</br><br>以 <strong>[5,7,7,8,8,10]</strong> 为例,首先我们需要寻找一个性质，能将数组一分为二，不难发现我们可以分为以下两个区间</br><br><img src="http://cdn.zsenhe.com/34c1486f814b4468897815165502e1b4" alt="ef4.jpg"><br></br></p><p>即 <strong>&lt;target</strong> 的数分为蓝色区间， <strong>&gt;&#x3D;target</strong> 的数分为紫色区间<br></br><br>可以看到，我们要取的元素是紫色区间的左边界。设 <strong><em>mid</em></strong> 为数组的中值，之后判断是否满足 <strong>nums[mid]&gt;&#x3D;target</strong>，</br></p><p>如果是的话，那么要查找的元素肯定在 <strong>[l,mid]</strong> 之间(_因为nums[mid]如果大于target，后面的元素就不可能是target，如果<strong>nums[mid]&#x3D;&#x3D;target</strong>，也有可能是最后一个<strong>target</strong>，我们需要在前半段继续查找)_，当 <strong>l&#x3D;r</strong> 时区间里只有一个元素，也就找到了第一个<strong>target</strong></p></br>这里的二分这么写<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line">int l=0,r=numsSize-1;</span><br><span class="line">//我们需要判断一下数组是否为空，为空的话直接返回[-1,-1](在前面略过代码处已定义)</span><br><span class="line">if(r==-1)</span><br><span class="line">    return ret;</span><br><span class="line">while(l&lt;r)&#123;</span><br><span class="line">    int mid = l+r&gt;&gt;1;</span><br><span class="line">    if(nums[mid]&gt;=target)</span><br><span class="line">        r = mid;</span><br><span class="line">    else l = mid+1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来的查找最后一个 <strong>&gt;&#x3D;target</strong> 的元素就并不那么容易了，同样我们依照上面的性质将区间一分为二</br><br><img src="http://cdn.zsenhe.com/a553ce075d7a44bd919d76d5f07a5bb5" alt="ef5.jpg"><br></br></p><p>蓝色区间满足 <strong>&lt;&#x3D;target</strong> 紫色区间满足 <strong>&gt;target</strong></br><br>我们需要查找的元素，实际上是蓝色区间的 右边界 ，现在我们要把它二分出来</br><br>同样取中值 <strong><em>mid</em><strong>，判断 <strong>nums[mid]&gt;target</strong> 是否成立，如果成立的话，答案一定在 <strong>[l,mid-1]</strong> 这个区间里，如果不成立（即小于等于target），我们将区间缩小为 <strong>[mid,r]</strong> (_分两种情况讨论，如果</strong>nums[mid]&#x3D;&#x3D;target</strong>的话，不一定是最后一个元素，我们需要继续往右边查找，将区间设置为 <strong>[mid,r]</strong>_)<br></br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">while(l&lt;r)&#123;</span><br><span class="line">   //上面已经记过为什么要+1了</span><br><span class="line">int mid = l+r+1&gt;&gt;1;</span><br><span class="line">if(nums[mid]&gt;target)&#123;</span><br><span class="line">r = mid;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">l = mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></br>完整代码如下:</br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">int* searchRange(int* nums, int numsSize, int target,int* returnSize)&#123;</span><br><span class="line">    *returnSize = 2;</span><br><span class="line">int * ret = (int *)malloc(sizeof(int) * 2);</span><br><span class="line">    ret[0] = -1;</span><br><span class="line">    ret[1] = -1;</span><br><span class="line"></span><br><span class="line">    int l=0,r=numsSize-1;</span><br><span class="line">    if(r==-1)</span><br><span class="line">        return ret;</span><br><span class="line">    while(l&lt;r)&#123;</span><br><span class="line">        int mid = l+r&gt;&gt;1;</span><br><span class="line">        if(nums[mid]&gt;=target)</span><br><span class="line">            r = mid;</span><br><span class="line">        else l = mid+1;</span><br><span class="line">    &#125;</span><br><span class="line">    if(nums[l]==target) ret[0] = l;</span><br><span class="line">    l=0,r=numsSize-1;</span><br><span class="line">    while(l&lt;r)&#123;</span><br><span class="line">        int mid = l+r+1&gt;&gt;1;</span><br><span class="line">        if(nums[mid]&gt;target) r = mid-1;</span><br><span class="line">        else l=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    if(nums[l]==target) ret[1] = r;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.zsenhe.com/e2f081d159eb49e08ec37cc30afd77ca" alt="ef6.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库报错 144</title>
      <link href="/2022/04/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99144/"/>
      <url>/2022/04/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99144/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.zsenhe.com/712ae9652b754ea2b9f087fde52dbf0e" alt="mysql144.png"><br>早上突然连不进玩家跨服同步背包的数据库了，查询了一下文档</br><br>大致原因是意外断电导致的表损坏,尝试了一下navict自带的修复未成功</br><br>进入mysql根目录下使用</br></p><blockquote><p>myisamchk -r ..&#x2F;playerdatasql.MYI</p></blockquote><p>执行后报如下错误</br><br><img src="http://cdn.zsenhe.com/66e3659ae2c04779a740f300bcee2823" alt="mysql1442.png"><br>原因是数据记录数太长，内存不足,将原先指令增加参数–max-record-length&#x3D;1667331167</p><blockquote><p>myisamchk –max-record-length&#x3D;1667331167 -r ..&#x2F;playerdatasql.MYI</p></blockquote><p><img src="http://cdn.zsenhe.com/36e16e7ad2a5430bb4bad2fd98183a76" alt="mysql1443.png"><br></br>这样就完成表修复的工作了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>指定时间区间内计算不同间隔周期的小实现</title>
      <link href="/2022/02/23/%E6%8C%87%E5%AE%9A%E6%97%B6%E9%97%B4%E5%8C%BA%E9%97%B4%E5%86%85%E8%AE%A1%E7%AE%97%E4%B8%8D%E5%90%8C%E9%97%B4%E9%9A%94%E5%91%A8%E6%9C%9F%E7%9A%84%E5%B0%8F%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/02/23/%E6%8C%87%E5%AE%9A%E6%97%B6%E9%97%B4%E5%8C%BA%E9%97%B4%E5%86%85%E8%AE%A1%E7%AE%97%E4%B8%8D%E5%90%8C%E9%97%B4%E9%9A%94%E5%91%A8%E6%9C%9F%E7%9A%84%E5%B0%8F%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>接到一个小需求，需要在指定时间段里每隔x分钟跑一段逻辑（如9:0:0-3:0:0 每隔90分钟执行一次)<br>原先打算用Quartz实现，翻阅了一下文档，似乎无法做到59分钟之外的增量。而且为了这么小一个需求硬塞一个库进去感觉有点不妥<br>折腾了一下午，在此把代码记录一下，有空加进自己的类库整理成工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrSchedule</span>&#123;</span><br><span class="line">    <span class="comment">//起始时间 24小时制</span></span><br><span class="line">    LocalDateTime startDate;</span><br><span class="line">    <span class="comment">//结束时间</span></span><br><span class="line">    LocalDateTime endDate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//间隔分钟</span></span><br><span class="line">    <span class="type">long</span> delay;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TrSchedule</span><span class="params">(String text)</span>&#123;</span><br><span class="line">        String[] split = text.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        String[] startDateSplit = split[<span class="number">0</span>].split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">        startDate = LocalDateTime.now();</span><br><span class="line">        startDate = startDate.withHour(Integer.valueOf(startDateSplit[<span class="number">0</span>]))</span><br><span class="line">                .withMinute(Integer.valueOf(startDateSplit[<span class="number">1</span>])).withSecond(Integer.valueOf(startDateSplit[<span class="number">2</span>]));</span><br><span class="line">        String[] endDateSplit = split[<span class="number">1</span>].split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">        endDate = LocalDateTime.now();</span><br><span class="line">        endDate = endDate.withHour(Integer.valueOf(endDateSplit[<span class="number">0</span>]))</span><br><span class="line">                .withMinute(Integer.valueOf(endDateSplit[<span class="number">1</span>])).withSecond(Integer.valueOf(endDateSplit[<span class="number">2</span>]));</span><br><span class="line">        delay = Long.parseLong(split[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LocalDateTime <span class="title function_">getStartDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LocalDateTime <span class="title function_">getEndDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> endDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getDelay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> delay;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试用，存储时间</span></span><br><span class="line">    <span class="keyword">static</span> LocalDateTime nextTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储执行时间</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span> time;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">DateFormat</span> <span class="variable">dateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">        time = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出当前时间</span></span><br><span class="line">        nextTime = LocalDateTime.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间:&quot;</span>+nextTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//表达式 (早上</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cron</span> <span class="operator">=</span> <span class="string">&quot;9:0:0,3:0:0,90&quot;</span>;</span><br><span class="line">        <span class="type">TrSchedule</span> <span class="variable">trSchedule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrSchedule</span>(cron);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="type">long</span> <span class="variable">m</span> <span class="operator">=</span> getLastNextTimeM(nextTime,trSchedule);</span><br><span class="line">            time = (time==<span class="number">0L</span>)?System.currentTimeMillis()+(m*<span class="number">60</span>*<span class="number">1000</span>):time+(m*<span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;开始第&quot;</span>+i+<span class="string">&quot;周期任务还需&quot;</span>+m+<span class="string">&quot;分钟(执行时间:&quot;</span>+dateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>(time))+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getLastNextTimeM</span><span class="params">(LocalDateTime currentDate,TrSchedule trSchedule)</span>&#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">startDate</span> <span class="operator">=</span> trSchedule.getStartDate().withDayOfMonth(currentDate.getDayOfMonth()).withDayOfYear(currentDate.getDayOfYear());</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">endDate</span> <span class="operator">=</span> trSchedule.getEndDate().withDayOfMonth(currentDate.getDayOfMonth()).withDayOfYear(currentDate.getDayOfYear());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果区间结束时间在开始时间之前(如8:00:0-3:0:0)</span></span><br><span class="line">        <span class="keyword">if</span>(endDate.isBefore(startDate))</span><br><span class="line">            <span class="comment">//将结束时间调整为下一天</span></span><br><span class="line">            endDate = endDate.plusDays(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当前时间在区间结束时间之后时</span></span><br><span class="line">        <span class="keyword">if</span>(currentDate.isAfter(endDate))&#123;</span><br><span class="line">            nextTime = startDate.plusDays(<span class="number">1</span>).plusMinutes(trSchedule.getDelay());</span><br><span class="line">            <span class="keyword">return</span> getLast(currentDate,startDate.getHour(),startDate.getMinute(),startDate.getSecond())+trSchedule.getDelay();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当前时间在开始时间之前</span></span><br><span class="line">        <span class="keyword">if</span>(currentDate.isBefore(startDate))&#123;</span><br><span class="line">            <span class="comment">// 计算距离开始时间还有多久，再加上间隔时间返回</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">rm</span> <span class="operator">=</span> getLast(currentDate,startDate.getHour(),startDate.getMinute(),startDate.getSecond())+trSchedule.getDelay();</span><br><span class="line">            nextTime = currentDate.plusMinutes(rm);</span><br><span class="line">            <span class="keyword">return</span> rm;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(currentDate.isAfter(startDate))&#123;</span><br><span class="line">            <span class="comment">//返回的时间超出区间时</span></span><br><span class="line">            <span class="keyword">if</span>(currentDate.plusMinutes(trSchedule.getDelay()).isAfter(endDate))&#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">rm</span> <span class="operator">=</span> getLast(currentDate,startDate.getHour(),startDate.getMinute(),startDate.getSecond())+trSchedule.getDelay();</span><br><span class="line">                nextTime = currentDate.plusMinutes(rm);</span><br><span class="line">                <span class="keyword">return</span> rm;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//返回的时间未超出区间</span></span><br><span class="line">            nextTime = currentDate.plusMinutes(trSchedule.getDelay());</span><br><span class="line">            <span class="keyword">return</span> trSchedule.getDelay();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算 currentTime 与 传入 时分秒 还间隔多少分钟</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getLast</span><span class="params">(LocalDateTime currentTime,<span class="type">int</span> hour, <span class="type">int</span> minute,<span class="type">int</span> s)</span> &#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        time = time.withHour(hour);</span><br><span class="line">        time = time.withMinute(minute);</span><br><span class="line">        time = time.withSecond(<span class="number">0</span>);</span><br><span class="line">        time = time.withDayOfMonth(currentTime.getDayOfMonth());</span><br><span class="line">        time = time.withDayOfYear(currentTime.getDayOfYear());</span><br><span class="line">        <span class="keyword">if</span> (time.isBefore(currentTime))</span><br><span class="line">            time = time.plusDays(<span class="number">1L</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">re</span> <span class="operator">=</span> time.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();</span><br><span class="line">        <span class="keyword">return</span> (re - currentTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli()) / <span class="number">1000L</span>/<span class="number">60L</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>print测试一下吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">当前时间:2022-02-23T01:16:55.351</span><br><span class="line">开始第0周期任务还需553分钟(执行时间:2022-02-23 10:29:55)</span><br><span class="line">开始第1周期任务还需90分钟(执行时间:2022-02-23 11:59:55)</span><br><span class="line">开始第2周期任务还需90分钟(执行时间:2022-02-23 13:29:55)</span><br><span class="line">开始第3周期任务还需90分钟(执行时间:2022-02-23 14:59:55)</span><br><span class="line">开始第4周期任务还需90分钟(执行时间:2022-02-23 16:29:55)</span><br><span class="line">开始第5周期任务还需90分钟(执行时间:2022-02-23 17:59:55)</span><br><span class="line">开始第6周期任务还需90分钟(执行时间:2022-02-23 19:29:55)</span><br><span class="line">开始第7周期任务还需90分钟(执行时间:2022-02-23 20:59:55)</span><br><span class="line">开始第8周期任务还需90分钟(执行时间:2022-02-23 22:29:55)</span><br><span class="line">开始第9周期任务还需90分钟(执行时间:2022-02-23 23:59:55)</span><br><span class="line">开始第10周期任务还需90分钟(执行时间:2022-02-24 01:29:55)</span><br><span class="line">开始第11周期任务还需540分钟(执行时间:2022-02-24 10:29:55)</span><br><span class="line">开始第12周期任务还需90分钟(执行时间:2022-02-24 11:59:55)</span><br><span class="line">开始第13周期任务还需90分钟(执行时间:2022-02-24 13:29:55)</span><br><span class="line">开始第14周期任务还需90分钟(执行时间:2022-02-24 14:59:55)</span><br><span class="line">开始第15周期任务还需90分钟(执行时间:2022-02-24 16:29:55)</span><br><span class="line">开始第16周期任务还需90分钟(执行时间:2022-02-24 17:59:55)</span><br><span class="line">开始第17周期任务还需90分钟(执行时间:2022-02-24 19:29:55)</span><br><span class="line">开始第18周期任务还需90分钟(执行时间:2022-02-24 20:59:55)</span><br><span class="line">开始第19周期任务还需90分钟(执行时间:2022-02-24 22:29:55)</span><br><span class="line">开始第20周期任务还需90分钟(执行时间:2022-02-24 23:59:55)</span><br><span class="line">开始第21周期任务还需90分钟(执行时间:2022-02-25 01:29:55)</span><br><span class="line">开始第22周期任务还需540分钟(执行时间:2022-02-25 10:29:55)</span><br><span class="line">开始第23周期任务还需90分钟(执行时间:2022-02-25 11:59:55)</span><br><span class="line">开始第24周期任务还需90分钟(执行时间:2022-02-25 13:29:55)</span><br><span class="line">开始第25周期任务还需90分钟(执行时间:2022-02-25 14:59:55)</span><br><span class="line">开始第26周期任务还需90分钟(执行时间:2022-02-25 16:29:55)</span><br><span class="line">开始第27周期任务还需90分钟(执行时间:2022-02-25 17:59:55)</span><br><span class="line">开始第28周期任务还需90分钟(执行时间:2022-02-25 19:29:55)</span><br><span class="line">开始第29周期任务还需90分钟(执行时间:2022-02-25 20:59:55)</span><br></pre></td></tr></table></figure><p>丢生产环境上跑，根据不同时间分配不同的表达式，算是完成了任务，有时间再想办法优化代码8<br><img src="http://cdn.zsenhe.com/54d45468deb347639f9581cba57d905c" alt="cron.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux下多用户管理及权限的描述</title>
      <link href="/2022/02/14/linux%E4%B8%8B%E5%A4%9A%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E5%8F%8A%E6%9D%83%E9%99%90%E7%9A%84%E6%8F%8F%E8%BF%B0/"/>
      <url>/2022/02/14/linux%E4%B8%8B%E5%A4%9A%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E5%8F%8A%E6%9D%83%E9%99%90%E7%9A%84%E6%8F%8F%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>最近将hexo博客迁移到了腾讯云的linux(centos)服务器上,在这里记录linux下多用户管理组的一些知识点,方便用的时候查阅</p><h2 id="组的概念"><a href="#组的概念" class="headerlink" title="组的概念"></a>组的概念</h2><blockquote><p>Linux作为多用户操作系统，使用组的概念来更方便的管理权限。在linux中每个用户都必须属于一个组，不能独立于组之外。我们使用以下指令来管理组</p></blockquote><p>groupadd [group] 创建组<br>groupdel [group] 删除组<br>创建用户时，可以追加-g来指定组。如不指定组，将自动创建用户同名组来关联用户。<br>useradd -g [group] [user]</p><h3 id="对于文件"><a href="#对于文件" class="headerlink" title="对于文件"></a>对于文件</h3><p>对于文件有以下几个概念:<br><img src="http://cdn.zsenhe.com/4cb3c5c98db94b628000bbdeabc3f206" alt="filegroup.png"><br>如图所示,文件可以分配以三个层次不同的权限</p><blockquote><p>所有者(一般为文件的创建者)、所在组(默认为创建文件用户所在组)、其他组(非所有者,所在组以外的所有用户)</p></blockquote><h2 id="Linux中权限的表示"><a href="#Linux中权限的表示" class="headerlink" title="Linux中权限的表示"></a>Linux中权限的表示</h2><p>在了解了组的概念后，我们通过一个示例来引出权限的表示。以下是ls -l命令打印出的文件信息</p><blockquote><p>-rwxr–rw-. 1 root root 13 2月  14 09:18 example.txt</p></blockquote><p><strong>-rwxr–rw-</strong><br>这里便是权限的表示，我们使用0-9的索引为它进行分类解释<br>首位代表文件类型 (示例中的-表示普通文件,还有d则代表目录,b代表块文件等)<br>之后每3个字符拆分，表示分配不同的权限给3个角色<br>依次为以上组概念中解释的 所有者(u),所在组(g),其他组(o)<br>linux中文件至少有三种权限，常见的如下<br><strong>r(read)</strong> 读取:<br>    如作用于目录，则控制是否可以列出目录内容(ls命令)<br><strong>w(write)</strong> 写入:<br>    如作用于目录，则控制是否可创建删除内容<br><strong>x(execute)</strong> 执行:<br>    如作用于目录，则控制是否可以访问目录内容<br>(如以上的例子,1-3索引的内容 “rwx” 则代表所有者读写执行的权限,未开放的权限使用”-“占位)</p><h3 id="chmod用户、组权限管理"><a href="#chmod用户、组权限管理" class="headerlink" title="chmod用户、组权限管理"></a>chmod用户、组权限管理</h3><p>修改文件对不同角色的权限，使用chmod命令进行操作，如下<br><strong>chmod o&#x3D;rw example.txt</strong><br>o指代其他组(Other的简写,此外还有所有者”u”,所在组”g”)<br>&#x3D;代表设置权限，除此之外也可以使用”+”、”-“单独增删权限，如下</p><blockquote><p>chmod u-r example.txt</p></blockquote><p>这便是删除所有者(User)的读取(Read)权限</p><h3 id="用二进制方法表示权限"><a href="#用二进制方法表示权限" class="headerlink" title="用二进制方法表示权限"></a>用二进制方法表示权限</h3><p>权限默认使用rwx来分别表示读写执行，为简化该输入操作，linux引入了二进制表示方法<br>如有权限表示1,无权限表示0,我们可以得到以下的等价关系<br>rwx &#x3D; 111<br>rw- &#x3D; 110<br>r-x &#x3D; 101<br>r– &#x3D; 100<br>我们将他转化为十进制<br>rwx &#x3D; 111 &#x3D; 4+2+1 &#x3D; 7<br>rw- &#x3D; 110 &#x3D; 6<br>r-x &#x3D; 101 &#x3D; 5<br>r– &#x3D; 100 &#x3D; 4<br>由此，我们可以得到<br>r&#x3D;4,w&#x3D;2,x&#x3D;1<br>这样，以上的操作就都可以简化掉了<br>chmod u&#x3D;rwx,g&#x3D;rw-,o&#x3D;r– example.txt<br>等价于<br>chmod 764 example.txt<br>输出以下看看权限表示</p><blockquote><p>-rwxrw-r–. 1 root root 13 2月  14 09:18 example.txt</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java的反射机制及使用笔记</title>
      <link href="/2022/01/18/Java%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/18/Java%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>反射是指java在运行过程中，能够获取并调用任意类的所有属性和方法;<br>如同是类加载的过程,将类的各个组成部分封装成其他对象（Field,Method,Constructor),这便完成了一次反射<br><img src="http://cdn.zsenhe.com/96e8b05847264b5580234aac23f00fe2" alt="反射.png"><br>(系统自带的画图做这种图挺顺手的</p><h3 id="为什么使用反射？"><a href="#为什么使用反射？" class="headerlink" title="为什么使用反射？"></a>为什么使用反射？</h3><p>在反射面前,没有任何权限修饰的概念,运用反射可以在程序运行过程中操作任意对象;同时可以解耦，提高程序的可扩展性，代码的灵活性。</p><h2 id="使用反射"><a href="#使用反射" class="headerlink" title="使用反射"></a>使用反射</h2><h3 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h3><p>在进行操作之前，我们需要获取Class对象</p><ul><li>获取Class对象的方式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.Class.forName(&quot;类名&quot;); 将字节码文件加载进内存，并返回Class对象(详细包路径)</span><br><span class="line">2.类名.class; 通过类名的class属性来获取Class对象</span><br><span class="line">3.Object.getClass(); 通过继承Object类下的getClass()来获取Class对象</span><br></pre></td></tr></table></figure></li></ul><p>抽象了一个测试用的Book类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">    <span class="keyword">public</span> String author;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name)</span>&#123;&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用如下代码来获取Class对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class bookClass = Book.class;</span><br><span class="line">System.out.println(bookClass);</span><br></pre></td></tr></table></figure><p>此时控制台打印</p><blockquote><p>class reflect.Book</p></blockquote><p>不同的获取Class方法适用于不同的使用场景,但需知一个类只会产生一个class对象.</p><h3 id="获取Field"><a href="#获取Field" class="headerlink" title="获取Field"></a>获取Field</h3><p>在获取Class对象后，便可以调用其中的成员变量了<br>Class使用Field描述成员变量，以下是获取方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.Field[] getFields(); 获取所有public修饰的成员变量</span><br><span class="line">2.Field getField(String name); 根据成员变量名获取</span><br><span class="line">3.Field[] getDeclaredFields(); 获取所有成员变量(包括私有变量)</span><br><span class="line">4.Field getDeclaredField(String name); 根据成员变量名获取(包括私有变量)</span><br></pre></td></tr></table></figure><ul><li>在获取成员变量Field后，我们可以进行获取与设置值操作<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set(Object obj,Object value); 设置值</span><br><span class="line">get(Object obj); 获取值</span><br></pre></td></tr></table></figure></li></ul><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">bookClass</span> <span class="operator">=</span> Book.class;</span><br><span class="line">    System.out.println(bookClass);</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;精灵宝钻&quot;</span>,<span class="string">&quot;托尔金&quot;</span>,<span class="number">80</span>);</span><br><span class="line">    <span class="comment">//获取所有public修饰的成员变量</span></span><br><span class="line">    Field[] fields = bookClass.getFields();</span><br><span class="line">    <span class="keyword">for</span>(Field field : fields)&#123;</span><br><span class="line">        System.out.println(field);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">author</span> <span class="operator">=</span> bookClass.getField(<span class="string">&quot;author&quot;</span>);</span><br><span class="line">    <span class="comment">//获取book对象成员变量author的值</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> author.get(book);</span><br><span class="line">    System.out.println(value);</span><br><span class="line">    System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line">    <span class="comment">//设置book对象成员变量author的值</span></span><br><span class="line">    author.set(book,<span class="string">&quot;约翰·罗纳德·瑞尔·托尔金&quot;</span>);</span><br><span class="line">    System.out.println(value);</span><br><span class="line">    <span class="comment">//获取私有成员变量Price</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">priceField</span> <span class="operator">=</span> bookClass.getDeclaredField(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">    <span class="comment">//忽略访问权限修饰符的安全检查(暴力反射)</span></span><br><span class="line">    priceField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> priceField.get(book);</span><br><span class="line">    System.out.println(value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><blockquote><p>class reflect.Book<br>public java.lang.String reflect.Book.author<br>&#x2F;———<br>托尔金<br>&#x2F;———<br>约翰·罗纳德·瑞尔·托尔金<br>80</p></blockquote><p>需要注意的是，在访问私有成员变量(暴力反射)的时候，需要先使用setAccessible(boolean bool)来忽略权限修饰符</p><h3 id="获取Constructor"><a href="#获取Constructor" class="headerlink" title="获取Constructor"></a>获取Constructor</h3><p>Constructor用以描述类构造器,使用以下几种方式来获取Constructor对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.Constructor&lt;?&gt;[] getConstructors()  </span><br><span class="line">2.Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)  </span><br><span class="line"></span><br><span class="line">3.Constructor&lt;?&gt;[] getDeclaredConstructors()  </span><br><span class="line">4.Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)</span><br><span class="line">方法的描述与上文中Field的获取相同,故不再赘述</span><br></pre></td></tr></table></figure><ul><li>Constructor下有几种方法用以创建新的类对象<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T newInstance(Object... initargs);</span><br><span class="line">值的留意的是,当使用空参构造方法创建对象时，直接使用Class下的newInstace()即可</span><br></pre></td></tr></table></figure></li></ul><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">bookClass</span> <span class="operator">=</span> Book.class;</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;精灵宝钻&quot;</span>,<span class="string">&quot;托尔金&quot;</span>,<span class="number">80</span>);</span><br><span class="line">    <span class="comment">//获取构造器对象constructor</span></span><br><span class="line">    Constructor&lt;Book&gt; constructor = bookClass.getConstructor(String.class);</span><br><span class="line">    <span class="comment">//使用构造器创建新的对象</span></span><br><span class="line">    <span class="type">Book</span> <span class="variable">newBook</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;魔戒&quot;</span>);</span><br><span class="line">    System.out.println(newBook.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><blockquote><p>魔戒</p></blockquote><h3 id="获取Method"><a href="#获取Method" class="headerlink" title="获取Method"></a>获取Method</h3><p>Method代表成员方法,使用以下几种方式获取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.Method[] getMethods()  </span><br><span class="line">2.Method getMethod(String name, 类&lt;?&gt;... parameterTypes)  </span><br><span class="line"></span><br><span class="line">3.Method[] getDeclaredMethods()  </span><br><span class="line">4.Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)</span><br></pre></td></tr></table></figure><ul><li>Method下的方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object invoke(Object obj, Object... args); 执行方法</span><br></pre></td></tr></table></figure></li></ul><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">bookClass</span> <span class="operator">=</span> Book.class;</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;精灵宝钻&quot;</span>,<span class="string">&quot;托尔金&quot;</span>,<span class="number">80</span>);</span><br><span class="line">    <span class="comment">//获取Method</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> bookClass.getMethod(<span class="string">&quot;setName&quot;</span>,String.class);</span><br><span class="line">    <span class="comment">//执行Method方法</span></span><br><span class="line">    method.invoke(book,<span class="string">&quot;贝伦与露西恩&quot;</span>);</span><br><span class="line">    System.out.println(book.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><blockquote><p>贝伦与露西恩</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
